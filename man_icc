ICC(1)                  Intel(R) C/C++ Compiler Options                 ICC(1)



Intel(R) C++ Compiler (ICC) Man Page Content

       icc - invokes the Intel(R) C Compiler

       icpc - invokes the Intel(R) C++ Compiler

SSYYNNOOPPSSIISS
       icc/icpc [options] file1 [file2 ...]

       where:

       · options represents zero or more compiler options.

       · fileN  represents a C/C++ source (.C, .c, .cc, .cp, .cpp, .cxx, .c++,
         .i), assembly (.s), object (.o), static library (.a), or other  link-
         able file.

       NNOOTTEE::  The  icpc command uses the same compiler options as the icc com-
       mand. Invoking the compiler using icpc compiles .c and .i files as C++.
       Invoking  the  compiler  using icc compiles .c and .i files as C. Using
       icpc always links in  C++  libraries.  Using  icc  only  links  in  C++
       libraries if C++ source is provided on the command line.

DDeessccrriippttiioonn -- iicccc//iiccppcc
       The  Intel(R) C++ Compiler is designed to process C and C++ programs on
       Intel(R) architecture- based  systems.  You  can  preprocess,  compile,
       assemble, and link these programs.

       This  document  explains how information and instructions apply differ-
       ently to Intel(R)  Many  Integrated  Core  Architecture  (Intel(R)  MIC
       Architecture),  Intel(R)  64 architecture, and IA-32 architecture. If a
       description does not explicitly state a specific  architecture,  assume
       the  description  is  applicable  to all. See the Intel(R) C++ Compiler
       Documentation for more detailed  information  than  what  is  presented
       here.

       When  there is a restriction, you will see "Architecture Restrictions",
       which will show the relevant restriction.

       For example:

       Architecture Restrictions

       Not available on  Intel(R)  64  architecture,  targeting  Intel(R)  MIC
       Architecture.

       Or

       Architecture Restrictions

       Only available on Intel(R) 64 architecture.

       This  man page is intended for Linux* and OS X* users. However you will
       see [Q]option-name sometimes. Whenever you see the [Q]option-name  con-
       vention used, it means that the option has the name that is the same on
       Linux *, OS X*, and Windows*, except for an initial Q at the  start  of
       the  Windows  name. For example, instead of -ip option which is /Qip on
       Windows* , you will see [Q]ip. Compiler option names that are  not  the
       same on Windows* are shown with '-'.

   GGNNUU** ggcccc** IInntteerrooppeerraabbiilliittyy
       C++  compilers  are  interoperable  if  they  can link object files and
       libraries generated by one compiler with  object  files  and  libraries
       generated  by  the  second  compiler, and the resulting executable runs
       successfully. Some GNU* gcc* versions are not interoperable, some  ver-
       sions  are  interoperable.  By  default, the Intel(R) C++ Compiler will
       generate code that is interoperable with the version of gcc*  it  finds
       on your system.

       The  Intel(R) C++ Compiler options that affect GNU* gcc* interoperabil-
       ity include:

       · -cxxlib

       · -gcc-name

       · -gcc-version

       · -gxx-name

       · -fabi-version

       · -no-gcc (see gcc Predefined Macros for more information)

       The Intel(R) C++ Compiler is interoperable with GNU* gcc* compiler ver-
       sions greater than or equal to 3.2. See the Intel(R) C++ Compiler Docu-
       mentation for more information.

FFeeaattuurree RReeqquuiirreemmeennttss
       Some features may require that other products also  be  installed.  The
       following  table  shows components and the products with which they are
       included.

       CCoommppoonneenntt          IInncclluuddeedd wwiitthh tthheessee PPrroodduuccttss

       Intel(R) VTune(TM) Amplifier
                         Intel(R)  Parallel   Studio   Professional   Edition,
                         Intel(R) Parallel Studio Cluster Edition

       Intel(R) Inspector
                         Intel(R)   Parallel   Studio   Professional  Edition,
                         Intel(R) Parallel Studio Cluster Edition

       Intel(R) Trace Analyzer and Intel(R) Trace Collector
                         Intel(R) Parallel Studio Cluster Edition

       The following table lists dependent features  and  their  corresponding
       required products.

       For  certain  compiler  options,  compilation may fail if the option is
       specified but the required product is  not  installed.  In  this  case,
       remove the option from the command line and recompile.

       For  more  information about requirements for a particular product, see
       http://www.intel.com/software/products/.

       · Feature: Performance Guide.  Requirement: Intel(R)  VTune(TM)  Ampli-
         fier.

       · Feature: Thread Checking.  Requirement: Intel(R) Inspector.

       · Feature: Trace Analyzing and Collecting.  Requirement: Intel(R) Trace
         Analyzer and Intel(R) Trace Collector.  Compiler options  related  to
         this  feature  may  require a set-up script. For further information,
         see the documentation supplied with the required product.

       · Feature: Pointer Checker.  Requirement: Intel(R) Parallel Studio Pro-
         fessional Edition or Intel(R) Parallel Studio Composer Edition.

       · Feature:  Static  Analysis (deprecated) Requirement: Intel(R) Inspec-
         tor.  The analysis itself is performed by the compiler.  The  results
         are viewed with the Intel(R) Inspector GUI. Analysis can be performed
         on one machine and the results viewed on another. In this case,  only
         the  compiler needs to be installed on the analysis machine. Both the
         compiler and Intel(R) Inspector must  be  installed  on  the  viewing
         machine.   See the documentation for Intel(R) Inspector to learn more
         about the kinds of analysis performed  by  static  analysis  and  for
         details about how to use it.

       · Feature:  Privatization  of  static data for the MPC unified parallel
         runtime Requirement: Appropriate elements of the MultiProcessor  Com-
         puting  (MPC)  framework For more information, see http://mpc.source-
         forge.net/

       You should also refer  to  the  Release  Notes  for  this  product  for
       detailed  information on system requirements, late changes to the prod-
       ucts, supported architectures, operating systems, and Integrated Devel-
       opment Environments.

OOPPTTIIOONNSS
   OOppttiioonn AAllpphhaabbeettiicc SSuummmmaarryy
       This  section  includes an alphabetic listing of available Intel(R) C++
       Compiler options.

       After each listing is a  reference  to  the  Functional  area  where  a
       detailed  description of the option appears. See Deprecated and Removed
       Options for additional information.

       --AAnnaammee[[((vvaalluuee))]]

              Specifies an identifier for an assertion.

              AArrgguummeennttss::

              name              Is the identifier for the assertion.

              value             Is an optional value for the assertion.  If  a
                                value  is specified, it must be within quotes,
                                including the parentheses delimiting it.

              DDeeffaauulltt::

              OFF               Assertions  have  no  identifiers  or   symbol
                                names.

              DDeessccrriippttiioonn::

              This  option specifies an identifier (symbol name) for an asser-
              tion. It is equivalent to an #assert preprocessing directive.

              Note that this option is not the positive form of the  C++  /QA-
              option.

              On  Linux*  systems, because GCC has deprecated assertions, this
              option has no effect.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aalliiaass--ccoonnsstt

       --nnoo--aalliiaass--ccoonnsstt

              Determines whether the compiler  assumes  a  parameter  of  type
              pointer-to-const  does  not  alias  with  a  parameter  of  type
              pointer-to-non-const.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-alias-const   The compiler uses standard C/C++ rules for the
                                interpretation of const.

              DDeessccrriippttiioonn::

              This  option determines whether the compiler assumes a parameter
              of type pointer-to-const does not alias with a parameter of type
              pointer-to-non-const.  It  implies  an  additional attribute for
              const.

              This functionality complies with the input/output  buffer  rule,
              which  assumes  that  input  and  output buffer arguments do not
              overlap.  This option allows the compiler to do some  additional
              optimizations with those parameters.

              In  C99,  you  can  also get the same result if you additionally
              declare your pointer parameters with the restrict keyword.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aalliiggnn

       --nnooaalliiggnn

              Determines whether variables and arrays are naturally aligned.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -noalign          Variables and arrays are aligned according  to
                                the gcc model, which means they are aligned to
                                4-byte boundaries.

              DDeessccrriippttiioonn::

              This option determines whether variables and  arrays  are  natu-
              rally aligned. Option -align forces the following natural align-
              ment:

              TTyyppee              AAlliiggnnmmeenntt

              double            8 bytes

              long long         8 bytes

              long double       16 bytes

              If you are  not  interacting  with  system  libraries  or  other
              libraries  that  are  compiled  without  -align, this option can
              improve performance by reducing misaligned accesses.

              This option can also be specified  as  -m[no-]align-double.  The
              options are equivalent.

              CCAAUUTTIIOONN::  If you are interacting with compatible libraries, this
              option can improve performance by reducing misaligned  accesses.
              However,  If you are interacting with noncompatible libraries or
              libraries that are compiled without option -align, your applica-
              tion may not perform as expected.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aannssii


              EEnnaabblleess  llaanngguuaaggee ccoommppaattiibbiilliittyy wwiitthh tthhee ggcccc ooppttiioonn aannssii..

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               GNU C++ is more strongly supported than
                                ANSI C.

              DDeessccrriippttiioonn::

              This option enables language compatibility with  the  gcc
              option -ansi and provides the same level of ANSI standard
              conformance as that option.

              This option sets option fmath-errno.

              If you want strict ANSI conformance, use the _-_s_t_r_i_c_t_-_a_n_s_i
              option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aannssii--aalliiaass

       --nnoo--aannssii--aalliiaass

              Enables  or  disables  the  use of ANSI aliasing rules in
              optimizations.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OS X*: -no-ansi-alias
                                ANSI  aliasing  rules  are  disabled in
                                optimizations.

              Linux* OS: -ansi-alias
                                ANSI  aliasing  rules  are  enabled  in
                                optimizations.

              DDeessccrriippttiioonn::

              This option tells the compiler to assume that the program
              adheres to ISO C Standard aliasability rules.

              If your program adheres to the  ANSI aliasability  rules,
              this  option allows the compiler to optimize more aggres-
              sively. If  your program does not adhere to these  rules,
              this  option may cause the compiler to generate incorrect
              code.

              If you are compiling on Linux* OS and your  program  does
              not  adhere to the ANSI aliasability rules, you can spec-
              ify -no-ansi-alias to ensure program correctness.

              When  you  specify   the    [Q]ansi-alias   option,   the
              ansi-alias  checker is enabled by default. To disable the
              ansi-alias      checker,      you      must       specify
              -no-ansi-alias-check   (Linux*   OS   and   OS   X*)   or
              /Qansi-alias-check- (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -fstrict-aliasing

              Windows: None

       --aannssii--aalliiaass--cchheecckk

       --nnoo--aannssii--aalliiaass--cchheecckk

              Enables or disables the ansi-alias checker.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-ansi-alias-check
                                The  ansi-alias  checker  is   disabled
                                unless   option   -ansi-alias-check  or
                                /Qansi-alias-check has been  specified.

              DDeessccrriippttiioonn::

              This  option  enables or disables the ansi-alias checker.
              The ansi-alias checker checks the source code for  poten-
              tial  violations  of  ANSI  aliasing  rules  and disables
              unsafe optimizations related to the code for those state-
              ments that are identified as potential violations.

              You  can use option –Wstrict-aliasing to identify poten-
              tial violations.

              If the [Q]ansi-alias   option  has  been  specified,  the
              ansi-alias  checker  is  enabled by default.  You can use
              the negative form of the option  (see  Syntax  above)  to
              disable the checker.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aauuttoo--iillpp3322

              Instructs  the  compiler to analyze the program to deter-
              mine if there are 64-bit  pointers  that  can  be  safely
              shrunk  into  32-bit  pointers   and  if there are 64-bit
              longs (on Linux* OS)  that  can  be  safely  shrunk  into
              32-bit longs.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Only available on Intel(R) 64
              architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The optimization is not attempted.

              DDeessccrriippttiioonn::

              This option instructs the compiler to analyze the program
              to determine if there are 64-bit  pointers  that  can  be
              safely  shrunk  into  32-bit  pointers   and if there are
              64-bit longs (on Linux* OS) that  can  be  safely  shrunk
              into 32-bit longs.

              For  this  option  to  be effective, the compiler must be
              able to optimize using the [Q]ipo option and must be able
              to  analyze  all library calls or external calls the pro-
              gram makes. This option has no effect on  Linux*  systems
              unless  you specify setting SSE3 or higher for option -x.

              This option requires that the size of  the  program  exe-
              cutable  never  exceeds 232 bytes and all data values can
              be represented within 32 bits. If  the  program  can  run
              correctly  in  a  32-bit  system,  these requirements are
              implicitly satisfied. If the program violates these  size
              restrictions, unpredictable behavior may occur.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aauuttoo--pp3322 ((LL**XX oonnllyy))

              Instructs  the  compiler to analyze the program to deter-
              mine if there are 64-bit  pointers  that  can  be  safely
              shrunk to 32-bit pointers.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Only available on Intel(R) 64
              architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The optimization is not performed.

              DDeessccrriippttiioonn::

              This  option instructs the compiler to analyze and trans-
              form the program so that 64-bit pointers  are  shrunk  to
              32-bit  pointers, wherever it is legal and safe to do so.

              For this option to be effective,  the  compiler  must  be
              able  to  optimize  using the -ipo  option and it must be
              able to analyze all library calls or external  calls  the
              program makes. This option has no effect unless you spec-
              ify setting SSE3 or higher for option -x.

              The application cannot exceed  a  32-bit  address  space;
              otherwise, unpredictable results can occur.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --aaxxccooddee

              Tells the compiler to generate multiple, feature-specific
              auto-dispatch code paths for Intel(R) processors if there
              is a performance benefit.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _c_o_d_e              Indicates to the compiler a feature set
                                that it  may  target,  including  which
                                instruction  sets  it may generate. The
                                following   descriptions    refer    to
                                Intel(R)   Streaming   SIMD  Extensions
                                (Intel(R) SSE) and Supplemental Stream-
                                ing  SIMD  Extensions  (SSSE). Possible
                                values are:

                                MIC-AVX512     May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions   512    (Intel(R)
                                               AVX-512)      Foundation
                                               instructions,   Intel(R)
                                               AVX-512  Conflict Detec-
                                               tion       instructions,
                                               Intel(R)  AVX-512  Expo-
                                               nential  and  Reciprocal
                                               instructions,   Intel(R)
                                               AVX-512         Prefetch
                                               instructions         for
                                               Intel(R) processors, and
                                               the instructions enabled
                                               with CORE-AVX2.

                                CORE-AVX2      May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions 2 (Intel(R) AVX2),
                                               Intel(R)   AVX,  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3  instructions
                                               for Intel(R) processors.

                                CORE-AVX-I     May   generate  Float-16
                                               conversion  instructions
                                               and  the  RDRND instruc-
                                               tion, Intel(R)  Advanced
                                               Vector        Extensions
                                               (Intel(R) AVX), Intel(R)
                                               SSE4.2,   SSE4.1,  SSE3,
                                               SSE2,  SSE,  and   SSSE3
                                               instructions         for
                                               Intel(R) processors.

                                AVX            May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions  (Intel(R)   AVX),
                                               Intel(R) SSE4.2, SSE4.1,
                                               SSE3,  SSE2,  SSE,   and
                                               SSSE3  instructions  for
                                               Intel(R) processors.

                                SSE4.2         May  generate   Intel(R)
                                               SSE4.2,   SSE4.1,  SSE3,
                                               SSE2,  SSE,  and   SSSE3
                                               instructions  for  Intel
                                               processors.

                                SSE4.1         May  generate   Intel(R)
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3  instructions
                                               for Intel(R) processors.

                                SSSE3          May    generate    SSSE3
                                               instructions         and
                                               Intel(R) SSE3, SSE2, and
                                               SSE   instructions   for
                                               Intel(R) processors. For
                                               OS   X*   systems,  this
                                               value is only  supported
                                               on      Intel(R)      64
                                               architecture.       This
                                               replaces  value T, which
                                               is deprecated.

                                SSE3           May  generate   Intel(R)
                                               SSE3,   SSE2,   and  SSE
                                               instructions         for
                                               Intel(R) processors. For
                                               OS  X*   systems,   this
                                               value  is only supported
                                               on IA-32 architecture.

                                SSE2           May  generate   Intel(R)
                                               SSE2  and  SSE  instruc-
                                               tions for Intel(R)  pro-
                                               cessors.  This  value is
                                               not available on  OS  X*
                                               systems.

              DDeeffaauulltt::

              OFF               No  auto-dispatch  code  is  generated.
                                Feature-specific code is generated  and
                                is  controlled  by  the  setting of the
                                following compiler options:

                                · Linux* OS: -m and -x

                                · OS X*: -x

              DDeessccrriippttiioonn::

              This option tells the compiler to generate multiple, fea-
              ture-specific  auto-dispatch code paths for Intel(R) pro-
              cessors if there is a performance benefit. It also gener-
              ates  a  baseline  code  path. The Intel feature-specific
              auto-dispatch path is usually  more  optimized  than  the
              baseline  path.  Other  options,  such as O3, control how
              much optimization is performed on the baseline path.

              The baseline code path is determined by the  architecture
              specified  by  options  -m or -x (Linux* OS and OS X*) or
              options /arch or  /Qx  (Windows*  OS).  While  there  are
              defaults for the [Q]x option that depend on the operating
              system being used, you can specify  an  architecture  and
              optimization  level  for the baseline code that is higher
              or lower than the  default.  The  specified  architecture
              becomes  the effective minimum architecture for the base-
              line code path.

              If you specify both the [Q]ax and [Q]x options, the base-
              line  code  will only execute on Intel(R) processors com-
              patible with the setting specified for the [Q]x.

              If you specify both the -ax and -m options (Linux OS  and
              OS  X)  or  the  /Qax and /arch options (Windows OS), the
              baseline code will execute on non-Intel  processors  com-
              patible  with  the  setting specified for the -m or /arch
              option.

              If you specify both the -ax and -march options (Linux  OS
              and  OS  X),  or the /Qax and /arch options (Windows OS),
              the compiler will not  generate  Intel-specific  instruc-
              tions.

              The [Q]ax option tells the compiler to find opportunities
              to generate separate  versions  of  functions  that  take
              advantage  of  features of the specified instruction fea-
              tures.

              If the compiler  finds  such  an  opportunity,  it  first
              checks whether generating a feature-specific version of a
              function is likely to result in a  performance  gain.  If
              this  is  the  case,  the  compiler generates both a fea-
              ture-specific version of a function and a  baseline  ver-
              sion of the function. At run time, one of the versions is
              chosen to execute, depending on the Intel(R) processor in
              use.  In  this  way, the program can benefit from perfor-
              mance gains on  more  advanced  Intel  processors,  while
              still working properly on older processors  and non-Intel
              processors. A non-Intel  processor  always  executes  the
              baseline code path.

              You  can  use more than one of the feature values by com-
              bining them. For example, you can specify -axSSE4.1,SSSE3
              (Linux OS and OS X) or /QaxSSE4.1,SSSE3 (Windows OS). You
              cannot combine the old style, deprecated options and  the
              new  options. For example, you cannot specify -axSSE4.1,T
              (Linux OS and OS X) or /QaxSSE4.1,T (Windows OS).


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's compilers may or may not  optimize  to  the  same
              degree  for  non-Intel  microprocessors for optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations  include SSE2, SSE3, and SSSE3 instruction sets
              and other optimizations. Intel  does  not  guarantee  the
              availability,  functionality,  or  effectiveness  of  any
              optimization  on  microprocessors  not  manufactured   by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product are intended for use with Intel  microprocessors.
              Certain  optimizations  not specific to Intel microarchi-
              tecture are reserved for  Intel  microprocessors.  Please
              refer to the applicable product User and Reference Guides
              for more information regarding the  specific  instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --BBddiirr

              Specifies a directory that can be used  to  find  include
              files, libraries, and executables.

              AArrgguummeennttss::

              _d_i_r               Is the directory to be used. If  neces-
                                sary,  the  compiler  adds  a directory
                                separator character at the end of  _d_i_r.

              DDeeffaauulltt::

              OFF               The  compiler  looks  for  files in the
                                directories  specified  in  your   PATH
                                environment variable.

              DDeessccrriippttiioonn::

              This  option  specifies  a  directory that can be used to
              find include files, libraries, and executables.

              The compiler uses _d_i_r as a prefix.

              For   include   files,   the   _d_i_r   is   converted    to
              -I/_d_i_r/include. This command is added to the front of the
              includes passed to the preprocessor.

              For libraries, the _d_i_r is converted to -L/_d_i_r. This  com-
              mand  is added to the front of the standard -L inclusions
              before system libraries are added.

              For executables, if _d_i_r contains the name of a tool, such
              as  ld  or  as, the compiler will use it instead of those
              found in the default directories.

              The compiler looks for  include  files  in  _d_i_r  /include
              while library files are looked for in _d_i_r.

              On  Linux*  systems,  another  way to get the behavior of
              this  option  is  to   use   the   environment   variable
              GCC_EXEC_PREFIX.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --BBddyynnaammiicc ((LL**XX oonnllyy))

              Enables dynamic linking of libraries at run time.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Limited dynamic linking occurs.

              DDeessccrriippttiioonn::

              This  option  enables dynamic linking of libraries at run
              time. Smaller executables are created  than  with  static
              linking.

              This  option  is placed in the linker command line corre-
              sponding to its location on the  user  command  line.  It
              controls  the  linking  behavior  of  any library that is
              passed using the command line.

              All libraries on the command line following option  -Bdy-
              namic are linked dynamically until the end of the command
              line or until  a  -Bstatic  option  is  encountered.  The
              -Bstatic option enables static linking of libraries.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --BBssttaattiicc ((LL**XX oonnllyy))

              Enables static linking of a user's library.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Default static linking occurs.

              DDeessccrriippttiioonn::

              This option enables static linking of a user's library.

              This  option  is placed in the linker command line corre-
              sponding to its location on the  user  command  line.  It
              controls  the  linking  behavior  of  any library that is
              passed using the command line.

              All  libraries  on  the  command  line  following  option
              -Bstatic  are linked statically until the end of the com-
              mand line or until a -Bdynamic option is encountered. The
              -Bdynamic option enables dynamic linking of libraries.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --BBssyymmbboolliicc ((LL**XX oonnllyy))

              Binds  references  to  all global symbols in a program to
              the definitions within a user's shared library.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               When  a  program  is linked to a shared
                                library, it can override the definition
                                within the shared library.

              DDeessccrriippttiioonn::

              This  option  binds references to all global symbols in a
              program  to  the  definitions  within  a  user's   shared
              library.

              This option is only meaningful on Executable Linkage For-
              mat (ELF) platforms that support shared libraries.

              CCAAUUTTIIOONN:: This option can have unintended side-effects  of
              disabling symbol preemption in the shared library.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --BBssyymmbboolliicc--ffuunnccttiioonnss ((LL**XX oonnllyy))

              Binds references to all global function symbols in a pro-
              gram to the definitions within a user's shared library.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               When  a  program  is linked to a shared
                                library, it can override the definition
                                within the shared library.

              DDeessccrriippttiioonn::

              This  option binds references to all global function sym-
              bols in a program to  the  definitions  within  a  user's
              shared library.

              This option is only meaningful on Executable Linkage For-
              mat (ELF) platforms that support shared libraries.

              CCAAUUTTIIOONN:: This option can have unintended side-effects  of
              disabling symbol preemption in the shared library.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cc

              Prevents linking.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Linking is performed.

              DDeessccrriippttiioonn::

              This option prevents linking. Compilation stops after the
              object file is generated.

              The compiler generates an object file for each C  or  C++
              source file or preprocessed source file. It also takes an
              assembler file and invokes the assembler to  generate  an
              object file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --CC

              Places comments in preprocessed source output.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  comments are placed in preprocessed
                                source output.

              DDeessccrriippttiioonn::

              This option places (or  preserves)  comments  in  prepro-
              cessed source output.

              Comments following preprocessing directives, however, are
              not preserved.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk==kkeeyywwoorrdd[[,, kkeeyywwoorrdd......]]

       //cchheecckk::kkeeyywwoorrdd[[,, kkeeyywwoorrdd......]]

              Checks for certain conditions at run time.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies the conditions to check. Pos-
                                sible values are:

                                [no]conversions
                                               Determines       whether
                                               checking occurs for con-
                                               verting    to    smaller
                                               types.  Keyword  conver-
                                               sions    enables    this
                                               checking.

                                [no]stack      Determines       whether
                                               checking  occurs  on the
                                               stack   frame.   Keyword
                                               stack    enables    this
                                               checking.  If  stack  is
                                               specified,  the stack is
                                               checked for buffer over-
                                               runs  and  buffer under-
                                               runs. This  option  also
                                               enforces local variables
                                               initialization and stack
                                               pointer verification.

                                [no]uninit     Determines       whether
                                               checking   occurs    for
                                               uninitialized variables.
                                               Keyword  uninit  enables
                                               this   checking.   If  a
                                               variable is read  before
                                               it    is    written,   a
                                               run-time  error  routine
                                               will be called.

              DDeeffaauulltt::

              noconversions nostack nouninit
                                No  checking is performed for the above
                                run-time conditions.

              DDeessccrriippttiioonn::

              This option checks for certain conditions at run time.

              On Windows* OS, this option disables any default or spec-
              ified  optimizations  and  applies the /Od level of opti-
              mization. If you specified  optimizations,  the  compiler
              emits warning diagnostics for the disabled optimizations.

              On Linux* OS and OS X*,  this  option  may  disable  some
              optimizations.

              NNOOTTEE::  This option requires library support. Depending on
              the platform, the required  library  is  either  in  your
              operating system run-time environment or in your compiler
              package.

              AAlltteerrnnaattee OOppttiioonnss::

              check conversions Linux and OS X: None

              check stack       Linux and OS X: None

              check uninit      Linux and OS X: None

       --cchheecckk--ppooiinntteerrss==kkeeyywwoorrdd ((LL**XX oonnllyy))

              Determines whether the compiler checks bounds for  memory
              access through pointers.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              keyword           Specifies what type of bounds  checking
                                occurs. Possible values are:

                                none           Disables  bounds  check-
                                               ing.   This    is    the
                                               default.

                                rw             Checks  bounds for reads
                                               and    writes    through
                                               pointers.

                                write          Checks  bounds  for only
                                               writes through pointers.

              DDeeffaauulltt::

              -check-pointers=none or
                                /Qcheck-pointers:none  No bounds check-
                                ing occurs for  memory  access  through
                                pointers.

              DDeessccrriippttiioonn::

              This option determines whether the compiler checks bounds
              for memory access through pointers. It  enables  checking
              of  all indirect accesses through pointers, and all array
              accesses.

              The compiler may optimize these checks away when  it  can
              determine that an access is safe.

              When  rw  or  write  is  specified,  the  [Q]check-point-
              ers-undimensioned option is set and dimensioned and undi-
              mensioned arrays are checked.

              If you do not want undimensioned arrays checked, you must
              specify option the negative form of the option (see  Syn-
              tax above).

              This  pointer  checker  feature  requires installation of
              another  product.  For  more  information,  see   Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk--ppooiinntteerrss--ddaanngglliinngg==kkeeyywwoorrdd ((LL**XX oonnllyy))

              Determines  whether  the  compiler  checks  for  dangling
              pointer references.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              keyword           Specifies what type of dangling pointer
                                checking occurs. Possible values are:

                                none           Disables  checking   for
                                               dangling  pointer refer-
                                               ences.   This   is   the
                                               default.

                                heap           Checks    for   dangling
                                               pointer  references   on
                                               the heap.

                                stack          Checks    for   dangling
                                               pointer  references   on
                                               the stack.

                                all            Checks    for   dangling
                                               pointer  references   on
                                               the  heap and the stack.

              DDeeffaauulltt::

              -check-pointers-dangling=none or
                                /Qcheck-pointers-dangling:none       No
                                checking  occurs  for  dangling pointer
                                references.

              DDeessccrriippttiioonn::

              This option determines whether the  compiler  checks  for
              dangling pointer references.

              To   use   this   option,   you  must  also  specify  the
              [Q]check-pointers option.

              This pointer checker  feature  requires  installation  of
              another   product.  For  more  information,  see  Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk--ppooiinntteerrss--mmppxx==kkeeyywwoorrdd ((LL**XX oonnllyy))

              Determines whether the compiler checks bounds for  memory
              access   through  pointers  on  processors  that  support
              Intel(R) Memory Protection Extensions (Intel(R) MPX).

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              keyword           Specifies what type of bounds  checking
                                occurs. Possible values are:

                                none           Disables  bounds  check-
                                               ing.   This    is    the
                                               default.

                                rw             Checks  bounds for reads
                                               and    writes    through
                                               pointers.

                                write          Checks  bounds  for only
                                               writes through pointers.

              DDeeffaauulltt::

              -check-pointers-mpx=none or
                                /Qcheck-pointers-mpx:none   No   bounds
                                checking  occurs  for   memory   access
                                through  pointers  on  processors  that
                                support Intel(R) MPX.

              DDeessccrriippttiioonn::

              This option determines whether the compiler checks bounds
              for  memory  access  through  pointers on processors that
              support  Intel(R) MPX. It enables checking of  all  indi-
              rect accesses through pointers, and all array accesses.

              The  compiler  may optimize these checks away when it can
              determine that an access is safe.

              If you specify option [Q]check-pointers along with option
              [Q]check-pointers-mpx, option [Q]check-pointers-mpx takes
              precedence.

              If you specify [Q]check-pointers-mpx, you cannot  specify
              option [Q]check-pointers-dangling.

              This  pointer  checker  feature  requires installation of
              another  product.  For  more  information,  see   Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk--ppooiinntteerrss--nnaarrrroowwiinngg ((LL**XX oonnllyy))

       --nnoo--cchheecckk--ppooiinntteerrss--nnaarrrroowwiinngg ((LL**XX oonnllyy))

              Determines  whether  the compiler enables or disables the
              narrowing of pointers to structure fields.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -check-pointers-narrowing or /Qcheck-pointers-narrowing
                                The  compiler  enables the narrowing of
                                pointers to structure fields.

              DDeessccrriippttiioonn::

              This option determines whether the  compiler  enables  or
              disables  the  narrowing of pointers to structure fields.
              Narrowing restricts a field pointer so that it  can  only
              legally point to that field.

              To   use   this   option,   you  must  also  specify  the
              [Q]check-pointers option.

              Disabling this feature can improve Pointer  Checker  com-
              patibility with non-ANSI compliant code.

              To disable the narrowing of pointers to structure fields,
              specify the negative  form  of  the  option  (see  Syntax
              above).

              This  pointer  checker  feature  requires installation of
              another  product.  For  more  information,  see   Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk--ppooiinntteerrss--uunnddiimmeennssiioonneedd ((LL**XX oonnllyy))

       --nnoo--cchheecckk--ppooiinntteerrss--uunnddiimmeennssiioonneedd ((LL**XX oonnllyy))

              Determines  whether the compiler checks bounds for memory
              access through arrays that are  declared  without  dimen-
              sions.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -check-pointers-undimensioned  or  /Qcheck-pointers-undi-
              mensioned
                                Bounds   checking   occurs  for  memory
                                access through arrays that are declared
                                without   dimensions.   This   checking
                                occurs for both dimensioned  and  undi-
                                mensioned arrays.

              DDeessccrriippttiioonn::

              This option determines whether the compiler checks bounds
              for memory access through arrays that are declared  with-
              out dimensions.

              To   use   this   option,   you  must  also  specify  the
              [Q]check-pointers option.

              This pointer checker  feature  requires  installation  of
              another   product.  For  more  information,  see  Feature
              Requirements.

              The default setting, [Q]check-pointers-undimensioned, can
              cause  link  time  errors  for  multiple  definitions for
              non-standard code and it can cause  linker  warnings  for
              undefined  symbols when linking library code that has not
              been compiled with pointer checking enabled. In  both  of
              these   cases,   the  symbols  will  contain  the  string
              cp_array_end.

              To prevent these issues, disable the checking of undimen-
              sioned  arrays,  by  specifying  the negative form of the
              option (see Syntax above).

              Note that even if you specify the negative  form  of  the
              option, dimensioned arrays are always checked.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --cchheecckk--uunniinniitt

       --nnoo--cchheecckk--uunniinniitt

              Determines  whether  checking  occurs  for  uninitialized
              variables. This is a deprecated option.  The  replacement
              option is -check=uninit.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-check-uninit  No  checking  occurs  for uninitialized
                                variables.

              DDeessccrriippttiioonn::

              This option determines whether checking occurs for unini-
              tialized  variables.  Option  -check-uninit  enables this
              checking.

              If a variable is read before it is  written,  a  run-time
              error routine will be called.

              Run-time  checking  of undefined variables is only imple-
              mented on local, scalar variables. It is not  implemented
              on  dynamically  allocated variables, extern variables or
              static variables.  It  is  not  implemented  on  structs,
              classes, unions or arrays.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -check=uninit

              Windows: /check:uninit

       --cciillkk--sseerriiaalliizzee

              Causes serialization of Intel(R) Cilk(TM) Plus code.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  Intel(R)  Cilk(TM)  Plus  language
                                extensions are recognized.

              DDeessccrriippttiioonn::

              This option causes serialization of  code  that  contains
              Intel(R)  Cilk(TM)  Plus  language extensions. This means
              that the compiler will run the program as if  it  were  a
              C/C++ serialized program.

              This  option  forces  inclusion  of a special header file
              (cilk_stub.h) that includes preprocessor macros that make
              certain  specific keywords that are related to those lan-
              guage extensions invisible to the compiler.

              The serialization of a program containing  these  special
              language   extensions  is  described  in  Using  Intel(R)
              Cilk(TM) Plus.

              NNOOTTEE:: Vector parallelism, which is generated by the array
              notations  within Intel(R) Cilk(TM) Plus, is not affected
              by this compiler option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ccllaanngg--nnaammee==nnaammee ((MM**XX oonnllyy))

              Specifies the name of the Clang compiler that  should  be
              used to set up the environment for C compilations.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n_a_m_e              Is the name of the  Clang  compiler  to
                                use.  It can include the path where the
                                Clang compiler is located.

              DDeeffaauulltt::

              OFF               The compiler uses the PATH  setting  to
                                find  the  Clang  compiler  and resolve
                                environment settings.

              DDeessccrriippttiioonn::

              This option specifies the name of the Clang compiler that
              should  be  used to set up the environment for C compila-
              tions. If you do not specify a path,  the  compiler  will
              search  the  PATH settings for the compiler name you pro-
              vide.

              This  option  is  helpful  when  you  are  referencing  a
              non-standard Clang installation.

              The    C++    equivalent   to   option   -clang-name   is
              -clangxx-name.

              NNOOTTEE:: This option applies to the Intel  compiler  running
              in  a  CLANG environment.  It does not apply to the Intel
              CLANG-based compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ccllaannggxxxx--nnaammee==nnaammee ((MM**XX oonnllyy))

              Specifies the name of the Clang++ compiler that should be
              used to set up the environment for C++ compilations.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n_a_m_e              Is the name of the Clang++ compiler  to
                                use.  It can include the path where the
                                Clang++ compiler is located.

              DDeeffaauulltt::

              OFF               The compiler uses the PATH  setting  to
                                find  the  Clang++ compiler and resolve
                                environment settings.

              DDeessccrriippttiioonn::

              This option specifies the name of  the  Clang++  compiler
              that  should  be  used  to set up the environment for C++
              compilations. If you do not specify a path, the  compiler
              will  search  the PATH settings for the compiler name you
              provide.

              The C equivalent to option -clangxx-name is  -clang-name.

              NNOOTTEE::  This  option applies to the Intel compiler running
              in a CLANG environment.  It does not apply to  the  Intel
              CLANG-based compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ccoommpplleexx--lliimmiitteedd--rraannggee

       --nnoo--ccoommpplleexx--lliimmiitteedd--rraannggee

              Determines  whether the use of basic algebraic expansions
              of some arithmetic operations involving data of type COM-
              PLEX is enabled.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-complex-limited-range
                                Basic   algebraic  expansions  of  some
                                arithmetic operations involving data of
                                type COMPLEX are disabled.

              DDeessccrriippttiioonn::

              This option determines whether the use of basic algebraic
              expansions of some arithmetic operations  involving  data
              of type COMPLEX is enabled.

              When  the  option  is enabled, this can cause performance
              improvements in programs that use a lot of COMPLEX arith-
              metic.  However,  values  at the extremes of the exponent
              range may not compute correctly.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ccxxxxlliibb[[==ddiirr]] ((LL**XX oonnllyy))

       --ccxxxxlliibb--nnoossttdd ((LL**XX oonnllyy))

       --nnoo--ccxxxxlliibb ((LL**XX oonnllyy))

              Determines whether  the  compiler  links  using  the  C++
              run-time libraries and header files provided by gcc.

              AArrgguummeennttss::

              _d_i_r               Is an optional top-level  location  for
                                the gcc binaries and libraries.

              DDeeffaauulltt::

              C++: -cxxlib C: -no-cxxlib
                                For C++, the compiler uses the run-time
                                libraries and headers provided by  gcc.
                                For  C,  the  compiler uses the default
                                run-time libraries and headers and does
                                not link to any additional C++ run-time
                                libraries and headers. However, if  you
                                specify  compiler  option -std=gnu++98,
                                the default is -cxxlib.

              DDeessccrriippttiioonn::

              This option determines whether the compiler  links  using
              the  C++  run-time libraries and header files provided by
              gcc.

              Option -cxxlib-nostd prevents the compiler  from  linking
              with the standard C++ library.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --DDnnaammee[[==vvaalluuee]]

              Defines  a  macro  name  that  can  be associated with an
              optional value.

              AArrgguummeennttss::

              _n_a_m_e              Is the name of the macro.

              _v_a_l_u_e             Is  an  optional integer or an optional
                                character string  delimited  by  double
                                quotes; for example, D_n_a_m_e_=_s_t_r_i_n_g.

              DDeeffaauulltt::

              OFF               Only  default  symbols  or  macros  are
                                defined.

              DDeessccrriippttiioonn::

              Defines a macro name  that  can  be  associated  with  an
              optional  value.  This  option is equivalent to a #define
              preprocessor directive.

              If a _v_a_l_u_e is not specified, _n_a_m_e is defined as "1".

              CCAAUUTTIIOONN:: On Linux* and OS X*  systems,  if  you  are  not
              specifying  a  _v_a_l_u_e,  do  not use D for _n_a_m_e, because it
              will conflict with the -DD option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddDD

              Same as  option -dM, but outputs  #define  directives  in
              preprocessed source.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does  not  output  #define
                                directives.

              DDeessccrriippttiioonn::

              Same  as  -dM,  but outputs #define directives in prepro-
              cessed source. To use this option, you must also  specify
              the E option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddeebbuugg [[kkeeyywwoorrdd]]

              Enables  or disables generation of debugging information.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Is the type of debugging information to
                                be generated. Possible values are:

                                none           Disables  generation  of
                                               debugging information.

                                full or all    Generates       complete
                                               debugging information.

                                minimal        Generates  line   number
                                               information  for  debug-
                                               ging.

                                [no]emit_column
                                               Determines  whether  the
                                               compiler  generates col-
                                               umn  number  information
                                               for debugging.

                                [no]expr-source-pos
                                               Determines  whether  the
                                               compiler       generates
                                               source position informa-
                                               tion at  the  expression
                                               level of granularity.

                                [no]inline-debug-info
                                               Determines  whether  the
                                               compiler       generates
                                               enhanced  debug informa-
                                               tion for inlined code.

                                [no]macros     Determines  whether  the
                                               compiler emits debugging
                                               information  for   C/C++
                                               macros.  This setting is
                                               not  available  on   the
                                               Clang-based compiler.

                                [no]pubnames   Determines  whether  the
                                               compiler   generates   a
                                               DWARF     debug_pubnames
                                               section.

                                [no]semantic-stepping
                                               Determines  whether  the
                                               compiler       generates
                                               enhanced debug  informa-
                                               tion  useful  for break-
                                               points and stepping.

                                [no]variable-locations
                                               Determines  whether  the
                                               compiler       generates
                                               enhanced debug  informa-
                                               tion  useful  in finding
                                               scalar local  variables.

                                extended       Sets    keyword   values
                                               semantic-stepping    and
                                               variable-locations.

                                [no]parallel (Linux only)
                                               Determines  whether  the
                                               compiler generates  par-
                                               allel debug code instru-
                                               mentations  useful   for
                                               thread  data sharing and
                                               reentrant  call   detec-
                                               tion.

              For  information  on  the  non-default settings for these
              keywords, see the Description section.

              DDeeffaauulltt::

              varies            Normally, the default  is  -debug  none
                                and  no debugging information is gener-
                                ated. However, on Linux* OS, the -debug
                                inline-debug-info    option   will   be
                                enabled by default if you compile  with
                                optimizations  (option  -O2  or higher)
                                and debugging is enabled (option -g).

              DDeessccrriippttiioonn::

              This option enables or disables generation  of  debugging
              information.

              Note  that  if  you  turn  debugging  on, optimization is
              turned off.

              Keywords  semantic-stepping,   inline-debug-info,   vari-
              able-locations,  and  extended can be used in combination
              with each other. If conflicting keywords are used in com-
              bination,  the last one specified on the command line has
              precedence.

              OOppttiioonn            DDeessccrriippttiioonn

              -debug none       Disables generation of debugging infor-
                                mation.

              -debug full or -debug all
                                Generates  complete  debugging informa-
                                tion. It  is  the  same  as  specifying
                                -debug with no keyword.

              -debug minimal    Generates  line  number information for
                                debugging.

              -debug emit_column
                                Generates column number information for
                                debugging.

              -debug expr-source-pos
                                Generates  source  position information
                                at the statement level of  granularity.

              -debug inline-debug-info
                                Generates  enhanced  debug  information
                                for inlined code.

              On inlined functions, symbols are (by default) associated
              with  the  caller. This option causes symbols for inlined
              functions to be associated with the source of the  called
              function.

              -debug macros     The compiler emits  debugging  informa-
                                tion  for C/C++ macros. This provides a
                                means to  describe  the  macros  for  a
                                given compilation unit. This setting is
                                not available on the  Clang-based  com-
                                piler.

              -debug pubnames   The    compiler   generates   a   DWARF
                                debug_pubnames section. This provides a
                                means  to  list  the  names  of  global
                                objects and functions in a  compilation
                                unit.

              -debug semantic-stepping
                                Generates  enhanced  debug  information
                                useful for breakpoints and stepping. It
                                tells  the  debugger  to  stop  only at
                                machine instructions that  achieve  the
                                final effect of a source statement.

              For example, in the case of an assignment statement, this
              might be a store instruction that assigns a  value  to  a
              program  variable;  for  a function call, it might be the
              machine  instruction  that  executes  the   call.   Other
              instructions  generated  for  those source statements are
              not displayed during stepping.

              This  option has no impact unless optimizations have also
              been enabled.

              -debug variable-locations
                                Generates  enhanced  debug  information
                                useful in finding  scalar  local  vari-
                                ables.  It  uses a feature of the Dwarf
                                object  module   known   as   "location
                                lists".

              This  feature  allows  the  run-time  locations  of local
              scalar variables to be specified  more  accurately;  that
              is,  whether, at a given position in the code, a variable
              value is found in memory or a machine register.

              -debug extended   Sets  keyword  values semantic-stepping
                                and variable-locations. It  also  tells
                                the  compiler to include column numbers
                                in the line information.

              -debug parallel   Generates parallel debug  code  instru-
                                mentations  needed  for the thread data
                                sharing and reentrant  call  detection.
                                For  shared  data and reentrancy detec-
                                tion, option -qopenmp must be set.

              On Linux* systems, debuggers read debug information  from
              executable images. As a result, information is written to
              object files and then added  to  the  executable  by  the
              linker.

              On  OS  X* systems, debuggers read debug information from
              object files. As a result, the executables don't  contain
              any  debug information. Therefore, if you want to be able
              to debug on these systems, you  must  retain  the  object
              files.

              AAlltteerrnnaattee OOppttiioonnss::

              For -debug full, -debug all, or -debug
                                Linux and OS X: -g

              For -debug variable-locations
                                Linux and OS X: -fvar-tracking

              For -debug semantic-stepping
                                Linux  and OS X: -fvar-tracking-assign-
                                ments

       --ddiiaagg--ttyyppee==ddiiaagg--lliisstt

              Controls the display of diagnostic information.

              AArrgguummeennttss::

              _t_y_p_e              Is an action to perform on diagnostics.
                                Possible values are:

                                enable         Enables   a   diagnostic
                                               message or  a  group  of
                                               messages.

                                disable        Disables   a  diagnostic
                                               message or  a  group  of
                                               messages.

                                error          Tells  the  compiler  to
                                               change  diagnostics   to
                                               errors.

                                warning        Tells  the  compiler  to
                                               change  diagnostics   to
                                               warnings.

                                remark         Tells  the  compiler  to
                                               change  diagnostics   to
                                               remarks (comments).

              _d_i_a_g_-_l_i_s_t         Is a diagnostic group or ID value. Pos-
                                sible values are:

                                driver         Specifies     diagnostic
                                               messages  issued  by the
                                               compiler driver.

                                port-linux     Specifies     diagnostic
                                               messages   for  language
                                               features that may  cause
                                               errors  when  porting to
                                               Linux*   systems.   This
                                               diagnostic group is only
                                               available  on   Windows*
                                               systems.

                                port-win       Specifies     diagnostic
                                               messages for GNU  exten-
                                               sions   that  may  cause
                                               errors when  porting  to
                                               Windows. This diagnostic
                                               group is only  available
                                               on  Linux and OS X* sys-
                                               tems.

                                thread         Specifies     diagnostic
                                               messages  that  help  in
                                               thread-enabling  a  pro-
                                               gram.

                                vec            Specifies     diagnostic
                                               messages issued  by  the
                                               vectorizer.

                                par            Specifies     diagnostic
                                               messages issued  by  the
                                               auto-parallelizer  (par-
                                               allel optimizer).

                                openmp         Specifies     diagnostic
                                               messages  issued  by the
                                               OpenMP* parallelizer.

                                warn           Specifies     diagnostic
                                               messages   that  have  a
                                               "warning"       severity
                                               level.

                                error          Specifies     diagnostic
                                               messages  that  have  an
                                               "error"  severity level.

                                remark         Specifies     diagnostic
                                               messages     that    are
                                               remarks or comments.

                                cpu-dispatch   Specifies the  CPU  dis-
                                               patch  remarks for diag-
                                               nostic  messages.  These
                                               remarks  are  enabled by
                                               default.

                                id[,id,...]    Specifies the ID  number
                                               of one or more messages.
                                               If you specify more than
                                               one message number, they
                                               must  be  separated   by
                                               commas.  There can be no
                                               intervening white  space
                                               between each id.

                                tag[,tag,...]  Specifies  the  mnemonic
                                               name of one or more mes-
                                               sages.  If  you  specify
                                               more than  one  mnemonic
                                               name, they must be sepa-
                                               rated by  commas.  There
                                               can  be  no  intervening
                                               white space between each
                                               tag.

                                The  diagnostic  messages generated can
                                be affected by certain options, such as
                                [Q]x,  /arch (Windows) or -m (Linux and
                                OS X).

              DDeeffaauulltt::

              OFF               The compiler issues certain  diagnostic
                                messages by default.

              DDeessccrriippttiioonn::

              This  option  controls the display of diagnostic informa-
              tion. Diagnostic messages are output to stderr unless the
              [Q]diag-file option is specified.

              When  _d_i_a_g_-_l_i_s_t  value  warn is used with static analysis
              diagnostics, the following behavior occurs:

              · Option     -diag-enable=warn     (Linux     OS)     and
                /Qdiag-enable:warn  (Windows OS) enable all diagnostics
                except those that have an "error" severity level.  They
                enable  all  static  analysis  warnings,  cautions, and
                remarks.

              · Option -diag-disable=warn (Linux  OS)  and  /Qdiag-dis-
                able:warn  (Windows  OS)  disable  all  static analysis
                diagnostics except those that have an "error"  severity
                level. They suppress all static analysis warnings, cau-
                tions, and remarks.

              NNOOTTEE:: The static analyzer, which performs  static  analy-
              sis, is deprecated.

              To  control  the  diagnostic  information reported by the
              vectorizer, use the [Q]vec-report option.

              To control the diagnostic  information  reported  by  the
              auto-parallelizer, use the [Q]par-report option.

              AAlltteerrnnaattee OOppttiioonnss::

              enable vec        Linux and OS X: -vec-report

              disable vec       Linux and OS X: -vec-report0

              enable par        Linux and OS X: -par-report

              disable par       Linux and OS X: -par-report0

       --ddiiaagg--dduummpp

              Tells  the  compiler to print all enabled diagnostic mes-
              sages and stop compilation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler issues certain diagnostic
                                messages by default.

              DDeessccrriippttiioonn::

              This option tells the compiler to print all enabled diag-
              nostic messages and stop compilation. The diagnostic mes-
              sages are output to stdout.

              This option prints the enabled diagnostics from all  pos-
              sible  diagnostics that the compiler can issue, including
              any default diagnostics.

              If _d_i_a_g_-_l_i_s_t is specified for the [Q]diag-enable  option,
              the print out will include the _d_i_a_g_-_l_i_s_t diagnostics.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eennaabbllee==ppoowweerr

       --ddiiaagg--ddiissaabbllee==ppoowweerr

              Controls  whether  diagnostics  are  enabled for possibly
              inefficient code that may  affect  power  consumption  on
              IA-32 and Intel(R) 64 architectures.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -diag-disable=power or
                                /Qdiag-disable:power  Power consumption
                                diagnostics are disabled.

              DDeessccrriippttiioonn::

              This option controls whether diagnostics are enabled  for
              possibly  inefficient code that may affect power consump-
              tion on IA-32 and Intel(R) 64 architectures.

              If you specify option -diag-enable=power (Linux*  and  OS
              X*)  or /Qdiag-enable:power (Windows*), the compiler will
              detect various API calls with argument values  in  ranges
              known  to be inefficient for power consumption. The diag-
              nostic issued will point out the  problem  argument;  for
              example,  "power inefficient use of 'Sleep' with argument
              in range [0;10]".

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eennaabbllee==sscc[[nn]] ((LL**XX oonnllyy))

       --ddiiaagg--eennaabbllee==sscc--mmooddee ((LL**XX oonnllyy))

       --ddiiaagg--ddiissaabbllee==sscc ((LL**XX oonnllyy))

              Enables static analysis diagnostics.  You  can  determine
              which  diagnostics  to  emit based on severity or you can
              specify an analysis mode for diagnostic messages. This is
              a deprecated option. There is no replacement option.

              AArrgguummeennttss::

              _n                 Specifies  the  level  of  severity  to
                                report. Possible values are:

                                1              Reports only diagnostics
                                               with a severity level of
                                               "critical".  Diagnostics
                                               with a severity level of
                                               "error" or "warning" are
                                               not displayed.

                                2              Reports all  diagnostics
                                               with a severity level of
                                               "critical" and  "error".
                                               Diagnostics    with    a
                                               severity level of "warn-
                                               ing"  are  not reported.
                                               This is the default.

                                3              Reports all  diagnostics
                                               regardless of the sever-
                                               ity level.

              _m_o_d_e              Specifies the analysis  mode.  Possible
                                values are:

                                full           This  mode  attempts  to
                                               find all  program  weak-
                                               nesses,   even   at  the
                                               expense  of  more  false
                                               positives.  This mode is
                                               recommended  when  using
                                               the  tool  for  security
                                               assurance.

                                               This is the  default  if
                                               -diag-enable=sc{[1|2|3]}
                                               (Linux* OS and OS X*) or
                                               /Qdiag-enable:sc{[1|2|3]}
                                               (Windows*     OS)     is
                                               present.  Otherwise, the
                                               default is None  (static
                                               analysis diagnostics are
                                               disabled).

                                concise        This  mode  attempts  to
                                               reduce  false  positives
                                               somewhat    more    than
                                               reducing   false   nega-
                                               tives. This mode is rec-
                                               ommended  when using the
                                               tool for  general  error
                                               detection.

                                precise        This  mode  attempts  to
                                               avoid  all  false  posi-
                                               tives,   even   at   the
                                               expense of substantially
                                               reduced  error checking.
                                               This mode is recommended
                                               when  using the tool for
                                               acceptance screening.

              DDeeffaauulltt::

              -diag-disable=sc and /Qdiag-disable:sc
                                Static analysis  diagnostics  are  dis-
                                abled.

              DDeessccrriippttiioonn::

              This option enables static analysis diagnostics.

              If  you specify _n for the option, you can determine which
              diagnostics to emit based on severity.   If  you  specify
              _m_o_d_e,  you can also specify an analysis mode for diagnos-
              tic messages.

              To disable  static  analysis,  specify  /Qdiag-disable:sc
              (Windows* OS) or option -diag-disable=sc (Linux* OS).

              You  can  also  specify the following options that affect
              the diagnostics:

              · Option [Q]diag-error setting sc This changes all Static
                Analysis diagnostics to errors.

              · Option  [Q]diag-warning  setting  sc  This  changes all
                Static Analysis diagnostics to warnings.

              · Option  [Q]diag-remark  setting  sc  This  changes  all
                Static Analysis diagnostics to remarks (comments).

              This  static  analysis  feature  requires installation of
              another  product.  For  more  information,  see   Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eennaabbllee==sscc--eennuummss ((LL**XX oonnllyy))

              Tells  static  analysis to treat enumeration variables as
              known values equal to any one of the associated  enumera-
              tion  literals.  This is a deprecated option. There is no
              replacement option.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               If   static  analysis  is  enabled,  it
                                treats unknown enumeration variables as
                                unknown integer values.

              DDeessccrriippttiioonn::

              This  option  tells  static analysis to treat enumeration
              variables as known values equal to any one of the associ-
              ated  enumeration  literals.  By default, static analysis
              treats unknown enumeration variables as  unknown  integer
              values.   Setting  this option may find additional errors
              but tends to create more false positives.

              This option is ignored unless you enable static  analysis
              diagnostics  by  specifying option [Q]diag-enable setting
              sc[n] or setting sc-mode.

              This static analysis  feature  requires  installation  of
              another   product.  For  more  information,  see  Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eennaabbllee==sscc--iinncclluuddee ((LL**XX oonnllyy))

              Tells a source code analyzer to process include files and
              source files when issuing diagnostic messages.  This is a
              deprecated option. There is no replacement option.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler issues certain  diagnostic
                                messages by default. If static analysis
                                is enabled, include files are not  ana-
                                lyzed by default.

              DDeessccrriippttiioonn::

              This option tells the static security analyzer to process
              include files and source files  when  issuing  diagnostic
              messages.  Normally, when static analysis diagnostics are
              enabled, only source files are analyzed.

              This option is ignored unless you enable static  analysis
              diagnostics  by  specifying option [Q]diag-enable setting
              sc[n] or setting sc-mode.

              This static analysis  feature  requires  installation  of
              another   product.  For  more  information,  see  Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eennaabbllee==sscc--ssiinnggllee--ffiillee ((LL**XX oonnllyy))

              Tells static analysis to process each file  individually.
              This  is  a  deprecated  option.  There is no replacement
              option.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               If static analysis is enabled, it  ana-
                                lyzes the whole program.

              DDeessccrriippttiioonn::

              This  option  tells  static analysis to process each file
              individually.  Skipping the usual whole-program  analysis
              reduces  memory  requirements  and analysis time on large
              programs but often finds fewer real errors.

              This option is ignored unless you enable static  analysis
              diagnostics  by  specifying option [Q]diag-enable setting
              sc[n] or setting sc-mode.

              This static analysis  feature  requires  installation  of
              another   product.  For  more  information,  see  Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--eerrrroorr--lliimmiittnn

       --nnoo--ddiiaagg--eerrrroorr--lliimmiitt

              Specifies the maximum number  of  errors  allowed  before
              compilation stops.

              AArrgguummeennttss::

              _n                 Is the maximum number of error-level or
                                fatal-level compiler errors allowed.

              DDeeffaauulltt::

              30                A   maximum   of   30  error-level  and
                                fatal-level messages are allowed.

              DDeessccrriippttiioonn::

              This  option  specifies  the  maximum  number  of  errors
              allowed  before compilation stops. It indicates the maxi-
              mum number of error-level or fatal-level compiler  errors
              allowed for a file specified on the command line.

              If    you    specify    the    negative   form   of   the
              [Q]diag-error-limit option on the command line, there  is
              no limit on the number of errors that are allowed.

              If  the  maximum  number  of errors is reached, a warning
              message is issued and the next file (if any) on the  com-
              mand line is compiled.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -wn (this is a deprecated option)

       --ddiiaagg--ffiillee[[==ffiilleennaammee]] ((LL**XX oonnllyy))

              Causes the results of diagnostic analysis to be output to
              a file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of the file for output.

              DDeeffaauulltt::

              OFF               Diagnostic   messages   are  output  to
                                stderr.

              DDeessccrriippttiioonn::

              This option causes the results of diagnostic analysis  to
              be  output  to  a file. The file is placed in the current
              working directory.

              You can include a file extension in _f_i_l_e_n_a_m_e.  For  exam-
              ple,  if  _f_i_l_e_._t_x_t  is  specified, the name of the output
              file is _f_i_l_e_._t_x_t. If you do not provide a file extension,
              the name of the file is _f_i_l_e_n_a_m_e_._d_i_a_g.

              If  _f_i_l_e_n_a_m_e  is  not  specified, the name of the file is
              _n_a_m_e_-_o_f_-_t_h_e_-_f_i_r_s_t_-_s_o_u_r_c_e_-_f_i_l_e_._d_i_a_g. This is also the name
              of the file if the name specified for file conflicts with
              a source file name provided in the command line.

              NNOOTTEE:: If you specify the [Q]diag-file option and you also
              specify  the  [Q]diag-file-append option, the last option
              specified on the command line takes precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--ffiillee--aappppeenndd[[==ffiilleennaammee]] ((LL**XX oonnllyy))

              Causes the results of diagnostic analysis to be  appended
              to a file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of the file to be  appended
                                to. It can include a path.

              DDeeffaauulltt::

              OFF               Diagnostic   messages   are  output  to
                                stderr.

              DDeessccrriippttiioonn::

              This option causes the results of diagnostic analysis  to
              be  appended to a file. If you do not specify a path, the
              driver will look for  _f_i_l_e_n_a_m_e  in  the  current  working
              directory.

              If  _f_i_l_e_n_a_m_e is not found, then a new file with that name
              is created in the current working directory. If the  name
              specified for file conflicts with a source file name pro-
              vided in the command  line,  the  name  of  the  file  is
              _n_a_m_e_-_o_f_-_t_h_e_-_f_i_r_s_t_-_s_o_u_r_c_e_-_f_i_l_e_._d_i_a_g.

              NNOOTTEE::  If  you specify the [Q]diag-file-append option and
              you also specify the [Q]diag-file option, the last option
              specified on the command line takes precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--iidd--nnuummbbeerrss

       --nnoo--ddiiaagg--iidd--nnuummbbeerrss

              Determines  whether the compiler displays diagnostic mes-
              sages by using their ID number values.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -diag-id-numbers  The  compiler  displays diagnostic mes-
                                sages by using their ID number  values.

              DDeessccrriippttiioonn::

              This  option  determines  whether  the  compiler displays
              diagnostic messages by using their ID number  values.  If
              you  specify  the negative form of the [Q]diag-id-numbers
              option, mnemonic names are output for driver  diagnostics
              only.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddiiaagg--oonncceeiidd[[,,iidd,,......]]

              Tells  the  compiler to issue one or more diagnostic mes-
              sages only once.

              AArrgguummeennttss::

              _i_d                Is the ID number of the diagnostic mes-
                                sage. If you specify more than one mes-
                                sage  number, they must be separated by
                                commas. There  can  be  no  intervening
                                white space between each _i_d.

              DDeeffaauulltt::

              OFF               The  compiler issues certain diagnostic
                                messages by default.

              DDeessccrriippttiioonn::

              This option tells the compiler to issue one or more diag-
              nostic messages only once.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux: -wo (this is a deprecated option)

              Windows: /Qwo (this is a deprecated option)

       --ddiiaagg--sscc--ddiirr[[==ddiirr]] ((LL**XX oonnllyy))

              Specifies  a  directory for static analysis results. This
              is a deprecated option. There is no replacement option.

              AArrgguummeennttss::

              _d_i_r               Is  the name of the directory where the
                                results should be placed.

              DDeeffaauulltt::

              OFF               If static analysis is enabled, analysis
                                results are placed in the current work-
                                ing directory. For  more  details,  see
                                below.

              DDeessccrriippttiioonn::

              This  option  specifies  a  directory for static analysis
              results.

              If you do not specify _d_i_r, the results are placed in  the
              current  working directory.  Results are placed in a sub-
              directory with the name r_n_n_nsc, where _n_n_n is replaced  by
              the next available sequence number (001, 002, etc.).

              This  option is ignored unless you enable static analysis
              diagnostics by specifying option  [Q]diag-enable  setting
              sc[n] or setting sc-mode.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddMM

              Tells  the compiler to output macro definitions in effect
              after preprocessing.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not output macro def-
                                initions after preprocessing.

              DDeessccrriippttiioonn::

              This option tells the compiler to  output  macro  defini-
              tions  in effect after preprocessing. To use this option,
              you must also specify option E.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddNN

              Same as option -dD, but output #define directives contain
              only macro names.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does  not  output  #define
                                directives.

              DDeessccrriippttiioonn::

              Same  as  -dD, but output #define directives contain only
              macro names. To use this option, you  must  also  specify
              option E.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddrryyrruunn

              Specifies  that  driver tool commands should be shown but
              not executed.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  tool  commands  are shown, but they
                                are executed.

              DDeessccrriippttiioonn::

              This option specifies that driver tool commands should be
              shown but not executed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --dduummppmmaacchhiinnee

              Displays the target machine and operating system configu-
              ration.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  does  not display target
                                machine or  operating  system  informa-
                                tion.

              DDeessccrriippttiioonn::

              This  option  displays  the  target machine and operating
              system configuration. No compilation is performed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --dduummppvveerrssiioonn

              Displays the version number of the compiler.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not display the  com-
                                piler version number.

              DDeessccrriippttiioonn::

              This  option displays the version number of the compiler.
              It does not compile your source files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddyynnaammiicc--lliinnkkeerr ffiillee ((LL**XX oonnllyy))

              Specifies a dynamic linker other than the default.

              AArrgguummeennttss::

              _f_i_l_e              Is the name of the dynamic linker to be
                                used.

              DDeeffaauulltt::

              OFF               The default dynamic linker is used.

              DDeessccrriippttiioonn::

              This  option lets you specify a dynamic linker other than
              the default.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ddyynnaammiicclliibb ((MM**XX oonnllyy))

              Invokes  the  libtool   command   to   generate   dynamic
              libraries.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler produces an executable.

              DDeessccrriippttiioonn::

              This option  invokes  the  libtool  command  to  generate
              dynamic libraries.

              When  passed  this  option, the compiler uses the libtool
              command to produce a dynamic library instead of  an  exe-
              cutable when linking.

              To  build  static  libraries,  you  should specify option
              -staticlib or libtool -static <objects>.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --EE

              Causes the preprocessor to send output to stdout.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Preprocessed source files are output to
                                the compiler.

              DDeessccrriippttiioonn::

              This  option  causes  the  preprocessor to send output to
              stdout. Compilation stops when the files have  been  pre-
              processed.

              When you specify this option, the compiler's preprocessor
              expands your source module and writes the result to  std-
              out.  The  preprocessed source contains #line directives,
              which the compiler uses to determine the source file  and
              line number.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --eeaarrllyy--tteemmppllaattee--cchheecckk

       --nnoo--eeaarrllyy--tteemmppllaattee--cchheecckk

              Lets  you  semantically  check template function template
              prototypes before instantiation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-early-template-check
                                The prototype instantiation of function
                                templates and function members of class
                                templates is deferred.

              DDeessccrriippttiioonn::

              Lets  you  semantically  check template function template
              prototypes before instantiation. On Linux* OS  platforms,
              gcc  3.4 (or newer) compatibilty modes must be in effect.
              For all OS X* platforms, gcc 4.0 (or newer) is  required.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --EEPP

              Causes  the  preprocessor to send output to stdout, omit-
              ting #line directives.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Preprocessed source files are output to
                                the compiler.

              DDeessccrriippttiioonn::

              This option causes the preprocessor  to  send  output  to
              stdout, omitting #line directives.

              If  you  also specify option P or Linux* OS option F, the
              preprocessor will write the results (without #line direc-
              tives) to a file instead of stdout.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --FFddiirr ((MM**XX oonnllyy))

              Adds a framework directory to the head of an include file
              search path.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _d_i_r               Is  the  name  for the framework direc-
                                tory.

              DDeeffaauulltt::

              OFF               The compiler does not add  a  framework
                                directory  to  the  head  of an include
                                file search path.

              DDeessccrriippttiioonn::

              This option adds a framework directory to the head of  an
              include file search path.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --FFaa[[ffiilleennaammee||ddiirr]]

              Specifies  that an assembly listing file should be gener-
              ated.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is  the  name  of  the assembly listing
                                file.

              _d_i_r               Is the directory where the file  should
                                be placed. It can include _f_i_l_e_n_a_m_e.

              DDeeffaauulltt::

              OFF               No assembly listing file is produced.

              DDeessccrriippttiioonn::

              This  option  specifies  that  an  assembly  listing file
              should be generated (optionally named _f_i_l_e_n_a_m_e).

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -S

              Windows: /S

       --ffaabbii--vveerrssiioonn==nn

              Instructs the compiler to select a specific ABI implemen-
              tation.

              AArrgguummeennttss::

              _n                 Is  the  ABI  implementation.  Possible
                                values are:

                                0              Requests  the latest ABI
                                               implementation.

                                1              Requests the ABI  imple-
                                               mentation  used  in  gcc
                                               3.2 and gcc 3.3.

                                2              Requests the ABI  imple-
                                               mentation  used  in  gcc
                                               3.4 and higher.

              DDeeffaauulltt::

              Varies            The compiler uses the  ABI  implementa-
                                tion  that corresponds to the installed
                                version of gcc.

              DDeessccrriippttiioonn::

              This option tells the compiler to select a  specific  ABI
              implementation. This option is compatible with gcc option
              -fabi-version. If  you  have  multiple  versions  of  gcc
              installed, the compiler may change the value of _n depend-
              ing on which gcc is detected in your path.

              NNOOTTEE:: gcc 3.2 and 3.3 are not  fully  ABI-compliant,  but
              gcc 3.4 is highly ABI-compliant.

              CCAAUUTTIIOONN:: Do not mix different values for -fabi-version in
              one link.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaalliiaass

       --ffnnoo--aalliiaass

              Determines whether aliasing should be assumed in the pro-
              gram.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -falias           Aliasing is assumed in the program.

              DDeessccrriippttiioonn::

              This option determines whether aliasing should be assumed
              in the program.

              If you do not want aliasing to be assumed in the program,
              specify -fno-alias.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --ffaalliiggnn--ffuunnccttiioonnss[[==nn]]

       --ffnnoo--aalliiggnn--ffuunnccttiioonnss

              Tells the compiler to align functions on an optimal  byte
              boundary.

              AArrgguummeennttss::

              _n                 Is  the  byte  boundary  for   function
                                alignment. Possible values are 2 or 16.

              DDeeffaauulltt::

              -fno-align-functions
                                The compiler aligns functions on 2-byte
                                boundaries.  This is the same as speci-
                                fying  -falign-functions=2  (Linux*  OS
                                and OS X*).

              DDeessccrriippttiioonn::

              This  option  tells the compiler to align functions on an
              optimal byte boundary. If you do not specify _n, the  com-
              piler  aligns  the  start  of functions on 16-byte bound-
              aries.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaalliiggnn--ssttaacckk==mmooddee ((LL**XX oonnllyy))

              Tells the compiler the stack alignment to use on entry to
              routines.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              _m_o_d_e              Is the method to use for  stack  align-
                                ment.  Possible values are:

                                assume-4-byte  Tells  the  compiler  to
                                               assume  the   stack   is
                                               aligned on 4-byte bound-
                                               aries. The compiler  can
                                               dynamically  adjust  the
                                               stack to 16-byte  align-
                                               ment if needed.

                                maintain-16-byte
                                               Tells  the  compiler  to
                                               not assume any  specific
                                               stack   alignment,   but
                                               attempt   to    maintain
                                               alignment  in  case  the
                                               stack     is     already
                                               aligned.   The  compiler
                                               can  dynamically   align
                                               the   stack  if  needed.
                                               This setting is compati-
                                               ble with gcc.

                                assume-16-byte Tells  the  compiler  to
                                               assume  the   stack   is
                                               aligned    on    16-byte
                                               boundaries and  to  con-
                                               tinue     to    maintain
                                               16-byte alignment.  This
                                               setting   is  compatible
                                               with gcc.

              DDeeffaauulltt::

              -falign-stack=assume-16-byte
                                The  compiler  assumes  the  stack   is
                                aligned  on 16-byte boundaries and con-
                                tinues to maintain 16-byte alignment.

              DDeessccrriippttiioonn::

              This option tells the compiler the stack alignment to use
              on entry to routines.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaarrgguummeenntt--aalliiaass

       --ffaarrgguummeenntt--nnooaalliiaass

              Determines  whether  function  arguments  can  alias each
              other.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fargument-alias  Function arguments can alias each other
                                and can alias global storage.

              DDeessccrriippttiioonn::

              This option determines  whether  function  arguments  can
              alias  each  other.  If you specify -fargument-noalias or
              /Qalias-args-,  function  arguments  cannot  alias   each
              other, but they can alias global storage.

              On  Linux and OS X systems, you can also disable aliasing
              for  global  storage,  by   specifying   option   -fargu-
              ment-noalias-global.

       --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall

              Tells  the  compiler that function arguments cannot alias
              each other and cannot alias global storage.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Function arguments can alias each other
                                and can alias global storage.

              DDeessccrriippttiioonn::

              This option tells the compiler  that  function  arguments
              cannot  alias  each  other  and  they cannot alias global
              storage.

              If you only want to prevent function arguments from being
              able   to   alias  each  other,  specify  option  -fargu-
              ment-noalias.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaassmm--bblloocckkss

              Enables the use of blocks and entire functions of  assem-
              bly code within a C or C++ file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler allows a GNU*-style inline
                                assembly format.

              DDeessccrriippttiioonn::

              This  option  enables  the use of blocks and entire func-
              tions of assembly code within a C or C++ file.

              It allows a Microsoft* MASM-style inline  assembly  block
              not a GNU*-style inline assembly block.

              On OS X* systems, this option is provided for compatibil-
              ity with the Apple* GNU compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              -use-msasm

       --ffaasstt

              Maximizes speed across the entire program.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The optimizations that  maximize  speed
                                are not enabled.

              DDeessccrriippttiioonn::

              This option maximizes speed across the entire program.

              It sets the following options:

              On   OS   X*   systems:   -ipo,   -mdynamic-no-pic,  -O3,
              -no-prec-div, -fp-model fast=2, and  -xHost  On  Windows*
              systems: /O3, /Qipo, /Qprec-div-, /fp:fast=2, and /QxHost
              On Linux*  systems:  -ipo,  -O3,  -no-prec-div,  -static,
              -fp-model  fast=2,  and  -xHost  On Intel(R) 64 architec-
              ture-based systems that target Intel(R) MIC Architecture:
              [Q]ipo,  O3,  -no-prec-div  (Linux*  OS)   or /Qprec-div-
              (Windows* OS), -fp-model fast=2 (Linux* OS) or /fp:fast=2
              (Windows* OS)

              When  option  fast  is  specified,  you  can override the
              [Q]xHost option setting by specifying a different proces-
              sor-specific  [Q]x  option  on the command line. However,
              the last option  specified  on  the  command  line  takes
              precedence.

              For example:

              · On  Linux*  OS,   if  you  specify option -fast -xSSE3,
                option -xSSE3 takes effect.  However,  if  you  specify
                -xSSE3 -fast, option -xHost takes effect.

              · On  Windows*  OS,  if you specify option /fast /QxSSE3,
                option/QxSSE3 takes effect.  However,  if  you  specify
                /QxSSE3 /fast, option /QxHost takes effect.

              For  implications  on  non-Intel processors, refer to the
              [Q]xHost documentation.

              NNOOTTEE:: Option fast sets some aggressive optimizations that
              may  not be appropriate for all applications. The result-
              ing executable may not run on processor  types  different
              from  the  one on which you compile. You should make sure
              that you understand the individual  optimization  options
              that are enabled by option fast.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaasstt--ttrraannsscceennddeennttaallss

       --nnoo--ffaasstt--ttrraannsscceennddeennttaallss

              Enables  the  compiler to replace calls to transcendental
              functions with faster but less precise implementations.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              depends on the setting of -fp-model (Linux* OS and OS X*)
                                If    you   do   not   specify   option
                                -[no-]fast-transcendentals:

                                · The default is ON if option -fp-model
                                  fast is specified or is in effect.

                                · The  default  is  OFF if a value-safe
                                  setting is  specified  for  -fp-model
                                  (such  as "precise", "source", etc.).

              DDeessccrriippttiioonn::

              This option enables the  compiler  to  replace  calls  to
              transcendental functions with implementations that may be
              faster but less precise.

              It allows the compiler to perform  certain  optimizations
              on transcendental functions, such as replacing individual
              calls to sine in a loop with a single call to a less pre-
              cise vectorized sine library routine.

              This  option  does  not affect explicit Short Vector Math
              Library (SVML) intrinsics.  It only affects scalar  calls
              to the standard math library routines.

              You  cannot use option –fast-transcendentals with option
              –fp-model strict.

              This option determines the setting for the maximum allow-
              able  relative  error  for  math library function results
              (max-error) if none of the following options  are  speci-
              fied:

              · -fimf-accuracy-bits   (Linux*   OS   and   OS   X*)  or
                /Qimf-accuracy-bits (Windows* OS)

              · -fimf-max-error (Linux OS and OS X) or  /Qimf-max-error
                (Windows OS)

              · -fimf-precision  (Linux OS and OS X) or /Qimf-precision
                (Windows OS)

              This option enables extra optimization that only  applies
              to Intel(R) processors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess

       --ffnnoo--aassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess

              Determines  whether  unwind  information is precise at an
              instruction boundary or at a call boundary.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              Intel(R) 64 architecture: -fasynchronous-unwind-tables
                                The  unwind  table generated is precise
                                at  an instruction  boundary,  enabling
                                accurate  unwinding at any instruction.

              IA-32 architecture: -fno-asynchronous-unwind-tables
                                The unwind table generated  is  precise
                                at call boundaries only.

              DDeessccrriippttiioonn::

              This option determines whether unwind information is pre-
              cise at an instruction boundary or at  a  call  boundary.
              The  compiler  generates  an  unwind  table  in DWARF2 or
              DWARF3 format, depending on which format is supported  on
              your system.

              If   -fno-asynchronous-unwind-tables  is  specified,  the
              unwind table is precise at call boundaries only. In  this
              case,  the compiler will avoid creating unwind tables for
              routines such as the following:

              · A C++  routine  that  does  not  declare  objects  with
                destructors and does not contain calls to routines that
                might throw an exception.

              · A C/C++ or Fortran routine  compiled  without  -fexcep-
                tions, and on Intel(R) 64 architecture, without -trace-
                back.

              · A C/C++ or Fortran routine compiled  with  -fexceptions
                that  does  not  contain  calls  to routines that might
                throw an exception.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffbblloocckkss ((MM**XX oonnllyy))

       --ffnnoo--bblloocckkss ((MM**XX oonnllyy))

              Determines whether Apple* blocks are enabled or disabled.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss::  Not available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fblocks          Apple* blocks are enabled.

              DDeessccrriippttiioonn::

              This option determines whether Apple* blocks (block vari-
              able declarations) are enabled or disabled.

              If   you   want   to   disable   Apple*  blocks,  specify
              -fno-blocks.

              To use this feature, OS X* 10.6 or greater is required.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffbbuuiillttiinn[[--nnaammee]]

       --ffnnoo--bbuuiillttiinn[[--nnaammee]]

              Enables or disables inline expansion of  intrinsic  func-
              tions.

              AArrgguummeennttss::

              _n_a_m_e              Is a list  of  one  or  more  intrinsic
                                functions.   If  there is more than one
                                intrinsic function, they must be  sepa-
                                rated by commas.

              DDeeffaauulltt::

              OFF               Inline expansion of intrinsic functions
                                is disabled.

              DDeessccrriippttiioonn::

              This option enables or disables inline expansion  of  one
              or more intrinsic functions.

              If  -fno-builtin_-_n_a_m_e  or /Qno-builtin_-_n_a_m_e is specified,
              inline expansion is disabled for the named functions.  If
              _n_a_m_e  is  not  specified,  -fno-builtin  or /Oi- disables
              inline expansion for all intrinsic functions.

              For a list of built-in functions affected  by  -fbuiltin,
              search  for  "built-in functions" in the appropriate gcc*
              documentation.

              For a list of built-in functions affected by /Oi,  search
              for  "/Oi"  in  the  appropriate Microsoft* Visual C/C++*
              documentation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffccooddee--aassmm

              Produces an assembly listing with  machine  code  annota-
              tions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No machine code annotations  appear  in
                                the  assembly  listing  file, if one is
                                produced.

              DDeessccrriippttiioonn::

              This  option  produces  an  assembly  listing  file  with
              machine code annotations.

              The  assembly listing file shows the hex machine instruc-
              tions at the beginning of each line of assembly code. The
              file  cannot  be  assembled; the file name is the name of
              the source file with an extension of .cod.

              To use this option, you  must  also  specify  option  -S,
              which causes an assembly listing to be generated.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --ffccoommmmoonn

       --ffnnoo--ccoommmmoonn

              Determines  whether the compiler treats common symbols as
              global definitions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fcommon          The compiler does not treat common sym-
                                bols as global definitions.

              DDeessccrriippttiioonn::

              This option determines whether the compiler treats common
              symbols  as global definitions and to allocate memory for
              each symbol at compile time.

              Option -fno-common tells the  compiler  to  treat  common
              symbols  as  global  definitions. When using this option,
              you can only have a common variable declared in one  mod-
              ule; otherwise, a link time error will occur for multiple
              defined symbols.

              Normally, a file-scope declaration  with  no  initializer
              and without the extern or static keyword "int i;" is rep-
              resented as a common symbol. Such a symbol is treated  as
              an  external  reference. However, if no other compilation
              unit has a global definition for  the  name,  the  linker
              allocates memory for it.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffddeeffeerr--ppoopp

       --ffnnoo--ddeeffeerr--ppoopp

              Determines whether the compiler always pops the arguments
              to each function call as soon as that function returns.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fdefer-pop       The compiler uses default optimizations
                                that may result in  deferred  clearance
                                of the stack arguments.

              DDeessccrriippttiioonn::

              This  option  determines whether the compiler always pops
              the arguments to each function call as soon as that func-
              tion returns.

              If  you  want the compiler to always pop the arguments to
              each function call as  soon  as  that  function  returns,
              specify -fno-defer-pop.

              For  processors  that must pop arguments after a function
              call, the compiler normally lets arguments accumulate  on
              the stack for several function calls and pops them all at
              once.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffeelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess

       --ffnnoo--eelliimmiinnaattee--uunnuusseedd--ddeebbuugg--ttyyppeess

              Controls the debug information emitted for types declared
              in a compilation unit.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -feliminate-unused-debug-types
                                The compiler  emits  debug  information
                                only  for  types that are actually used
                                by a variable/parameter/etc..

              DDeessccrriippttiioonn::

              This option controls the debug  information  emitted  for
              types declared in a compilation unit.

              If  you  specify -fno-eliminate-unused-debug-types (Linux
              and OS X)  or  /Qeliminate-unused-debug-types-,  it  will
              cause  the  compiler  to  emit  debug information for all
              types present in the sources. This  option  may  cause  a
              large increase in the size of the debug information.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffeemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss ((LL**XX oonnllyy))

       --ffnnoo--eemmiitt--ccllaassss--ddeebbuugg--aallwwaayyss ((LL**XX oonnllyy))

              Controls  the format and size of debug information gener-
              ated by the compiler for C++ classes.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-emit-class-debug-always
                                Causes   the  compiler  to  reduce  the
                                amount of debug  information  generated
                                for C++ classes.

              DDeessccrriippttiioonn::

              When  emission  of  debug  information  is  enabled, this
              option will control the format and size of debug informa-
              tion  generated by the compiler for C++ classes. It tells
              the compiler to generate full debug  information,  or  it
              tells the compiler to reduce the amount of debug informa-
              tion it generates.

              When you specify  the  -femit-class-debug-always  option,
              the compiler emits debug information for a C++ class into
              each object file where the class is used.  This option is
              useful  for tools that are not able to resolve incomplete
              type descriptions.  Note that this  option  may  cause  a
              large  increase in the size of the debug information gen-
              erated.

              When you specify the -fno-emit-class-debug-always option,
              the  compiler  does  not  emit full debug information for
              every instance of C++ class use. In general, this reduces
              the  size  of the debugging information generated for C++
              applications without  impacting  debugging  ability  when
              used with debuggers that have corresponding support, such
              as gdb.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffeexxcceeppttiioonnss

       --ffnnoo--eexxcceeppttiioonnss

              Enables exception handling table generation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fexceptions      Exception handling table generation  is
                                enabled. Default for C++.

              -fno-exceptions   Exception  handling table generation is
                                disabled. Default for C.

              DDeessccrriippttiioonn::

              This option enables exception handling table  generation.
              The  -fno-exceptions  option  disables exception handling
              table generation, resulting in smaller  code.  When  this
              option  is used, any use of exception handling constructs
              (such as try blocks and throw statements) will produce an
              error.  Exception  specifications are parsed but ignored.
              It also undefines the preprocessor symbol __EXCEPTIONS.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffeexxtteenndd--aarrgguummeennttss==nn

              Controls how scalar integer  arguments  are  extended  in
              calls to unprototyped and varargs functions.

              AArrgguummeennttss::

              _n                 Specifies the extension for the integer
                                parameters. Possible values are:

                                32             Causes      unprototyped
                                               integer parameters to be
                                               extended to 32 bits.

                                64             Causes      unprototyped
                                               integer parameters to be
                                               extended   to  64  bits.
                                               This   value   is   only
                                               available on Intel(R) 64
                                               architecture.

              DDeeffaauulltt::

              -fextend-arguments=32 or /Qextend-arguments:32
                                Unprototyped  integer  parameters   are
                                extended to 32 bits.

              DDeessccrriippttiioonn::

              This  option  controls  how  scalar integer arguments are
              extended in calls to unprototyped and varargs  functions.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffffaatt--llttoo--oobbjjeeccttss ((LL**XX oonnllyy))

       --ffnnoo--ffaatt--llttoo--oobbjjeeccttss ((LL**XX oonnllyy))

              Determines  whether  a  fat  link-time optimization (LTO)
              object, containing both intermediate language and  object
              code, is generated during an interprocedural optimization
              compilation (-c –ipo).

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Not available on IA-32 archi-
              tecture targeting Intel(R)  Graphics  Technology,  or  on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -ffat-lto-objects When   –c –ipo is specified, the com-
                                piler generates a fat  link-time  opti-
                                mization  (LTO)  object that has both a
                                true object and a discardable  interme-
                                diate language section.

              DDeessccrriippttiioonn::

              This  option determines whether a fat link time optimiza-
              tion (LTO) object, containing both intermediate  language
              and  object  code, is generated during an interprocedural
              optimization compilation (-c –ipo).

              During an interprocedural  optimization  compilation  (-c
              –ipo), the following occurs:

              · If  you  specify -ffat-lto-objects, the compiler gener-
                ates a fat link-time optimization (LTO) object that has
                both  a true object and a discardable intermediate lan-
                guage section.  This enables both  link-time  optimiza-
                tion (LTO) linking and normal linking.

              · If  you specify -fno-fat-lto-objects, the compiler gen-
                erates a fat link-time optimization (LTO)  object  that
                only  has  a discardable intermediate language section;
                no true object is generated. This  option  may  improve
                compilation time.

              Note  that  these files will be inserted into archives in
              the form in which they were created.

              This option is provided for compatibility with  gcc.  For
              more  information about this option, see the gcc documen-
              tation.

              NNOOTTEE:: Intel's intermediate language representation is not
              compatible  with gcc’s intermediate language representa-
              tion.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffffnnaalliiaass

       --ffnnoo--ffnnaalliiaass

              Specifies that aliasing should be  assumed  within  func-
              tions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -ffnalias         Aliasing is assumed within functions.

              DDeessccrriippttiioonn::

              This option specifies that  aliasing  should  be  assumed
              within functions.

              The  -fno-fnalias  option  specifies that aliasing should
              not be assumed within functions, but  should  be  assumed
              across calls.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --ffffrreeeessttaannddiinngg

              Ensures  that  compilation  takes place in a freestanding
              environment.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Standard libraries are used during com-
                                pilation.

              DDeessccrriippttiioonn::

              This option ensures that compilation  takes  place  in  a
              freestanding  environment.  The compiler assumes that the
              standard library may not exist and  program  startup  may
              not  necessarily  be  at main. This environment meets the
              definition of a freestanding environment as described  in
              the C and C++ standard.

              An  example  of an application requiring such an environ-
              ment is an OS kernel.

              NNOOTTEE:: When you specify this option, the compiler will not
              assume  the  presence  of compiler-specific libraries. It
              will only generate calls that appear in the source  code.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffffrriieenndd--iinnjjeeccttiioonn

       --ffnnoo--ffrriieenndd--iinnjjeeccttiioonn

              Causes  the  compiler to inject friend functions into the
              enclosing namespace.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-friend-injection
                                The  compiler  does  not  inject friend
                                functions into the enclosing namespace.
                                A  friend function that is not declared
                                in an enclosing scope can only be found
                                using argument-dependent lookup.

              DDeessccrriippttiioonn::

              This  option  causes  the compiler to inject friend func-
              tions into the enclosing namespace, so they  are  visible
              outside  the  scope  of  the  class  in  which  they  are
              declared.

              On Linux systems,  in gcc versions 4.1 or later, this  is
              not  the default behavior. This option allows compatibil-
              ity with gcc 4.0 or earlier.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffffuunnccttiioonn--sseeccttiioonnss

              Places each function in its own COMDAT section.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Places each function in its own COMDAT section.

              AAlltteerrnnaattee OOppttiioonnss::

              -fdata-sections

       --ffggnnuu8899--iinnlliinnee

              Tells the compiler to use C89 semantics for inline  func-
              tions when in C99 mode.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              This option tells the compiler to use C89  semantics  for
              inline functions when in C99 mode.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--aabbssoolluuttee--eerrrroorr==vvaalluuee[[::ffuunncclliisstt]]

              Defines  the  maximum  allowable  absolute error for math
              library function results.

              AArrgguummeennttss::

              _v_a_l_u_e             Is  a  positive, floating-point number.
                                Errors in math library function results
                                may  exceed  the maximum relative error
                                (max-error)  setting   if   the   abso-
                                lute-error  is  less  than  or equal to
                                _v_a_l_u_e.

                                The format for the number  is  [digits]
                                [.digits] [ { e | E }[sign]digits]

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library   functions   to   which    the
                                attribute  should  be  applied.  If you
                                specify more than  one  function,  they
                                must  be separated with commas.  Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,  so  you  would  need   to   use
                                -fimf-absolute-error=0.00001:sin,sinf
                                (or                         /Qimf-abso-
                                lute-error:0.00001:sin,sinf) to specify
                                the maximum  allowable  absolute  error
                                for  both the single-precision and dou-
                                ble-precision sine functions.

                                You also can specify the symbol  /f  to
                                denote single-precision divides, symbol
                                / to denote  double-precision  divides,
                                symbol  /l to denote extended-precision
                                divides,  and  symbol  /q   to   denote
                                quad-precision divides. For example you
                                can        specify          -fimf-abso-
                                lute-error=0.00001:/   or   /Qimf-abso-
                                lute-error: 0.00001:/.

              DDeeffaauulltt::

              Zero ("0")        An absolute-error setting  of  0  means
                                that the function is bound by the rela-
                                tive error setting. This is the default
                                behavior.

              DDeessccrriippttiioonn::

              This  option defines the maximum allowable absolute error
              for math library function results.

              This option can improve run-time performance, but it  may
              decrease the accuracy of results.

              This  option  only  affects functions that have zero as a
              possible return value, such as log, sin, asin, etc.

              The relative error requirements for a particular function
              are  determined  by options that set the maximum relative
              error (max-error) and precision. The return value from  a
              function  must  have  a  relative  error  less  than  the
              max-error value, or an absolute error less than the abso-
              lute-error value.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision  that you need. For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision,   you   can  specify  :sinf,  as  in  -fimf-abso-
              lute-error=0.00001:sin           or           /Qimf-abso-
              lute-error:0.00001:sin,           or          -fimf-abso-
              lute-error=0.00001:sqrtf          or          /Qimf-abso-
              lute-error:0.00001:sqrtf.

              If  you  do not specify any function names, then the set-
              ting applies to all functions (and  to  all  precisions).
              However,  as  soon  as you specify an individual function
              name, the setting applies only to the function of  corre-
              sponding precision. So, for example, sinf applies only to
              the single-precision sine function, sin applies  only  to
              the  double-precision sine function, sinl applies only to
              the extended-precision sine function, etc.

              NNOOTTEE:: Many routines in libraries LIBM (Math Library)  and
              SVML  (Short  Vector  Math Library) are more highly opti-
              mized for Intel(R)  microprocessors  than  for  non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--aaccccuurraaccyy--bbiittss==bbiittss[[::ffuunncclliisstt]]

              Defines  the  relative  error  for  math library function
              results,  including division and square root.

              AArrgguummeennttss::

              _b_i_t_s              Is  a  positive,  floating-point number
                                indicating the number of  correct  bits
                                the compiler should use.

                                The  format  for the number is [digits]
                                [.digits] [ { e | E }[sign]digits].

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library    functions   to   which   the
                                attribute should  be  applied.  If  you
                                specify  more  than  one function, they
                                must be separated with commas.   Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,   so   you  would  need  to  use
                                -fimf-accuracy-bits=23:sin,sinf     (or
                                /Qimf-accuracy-bits:23:sin,sinf)     to
                                specify the relative error for both the
                                single-precision  and  double-precision
                                sine functions.

                                You also can specify the symbol  /f  to
                                denote single-precision divides, symbol
                                / to denote  double-precision  divides,
                                symbol  /l to denote extended-precision
                                divides,  and  symbol  /q   to   denote
                                quad-precision divides. For example you
                                can        specify          -fimf-accu-
                                racy-bits=10.0:/f     or    /Qimf-accu-
                                racy-bits:10.0:/f.

              DDeeffaauulltt::

              -fimf-precision=medium or /Qimf-precision:medium
                                The compiler uses medium precision when
                                calling  math  library  functions. Note
                                that other options  can  affect  preci-
                                sion; see below for details.

              DDeessccrriippttiioonn::

              This  option  defines the relative error, measured by the
              number  of  correct  bits,  for  math  library   function
              results.

              The  following formula is used to convert bits into ulps:
              ulps = 2p-1-bits, where p is the  number  of  the  target
              format  mantissa bits (24, 53, and 64 for single, double,
              and long double, respectively).

              This option can affect run-time performance and the accu-
              racy of results.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision  that you need. For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision, you can specify :sinf, as in the following:

              · -fimf-accuracy-bits=23:sinf,cosf,logf   or  /Qimf-accu-
                racy-bits:23:sinf,cosf,logf

              · -fimf-accuracy-bits=52:sqrt,/,trunc   or    /Qimf-accu-
                racy-bits:52:sqrt,/,trunc

              · -fimf-accuracy-bits=10:powf        or       /Qimf-accu-
                racy-bits:10:powf

              If you do not specify any function names, then  the  set-
              ting  applies  to  all functions (and to all precisions).
              However, as soon as you specify  an  individual  function
              name,  the setting applies only to the function of corre-
              sponding precision. So, for example, sinf applies only to
              the  single-precision  sine function, sin applies only to
              the double-precision sine function, sinl applies only  to
              the extended-precision sine function, etc.

              There  are three options you can use to express the maxi-
              mum relative error.  They are as follows:

              · -fimf-precision (Linux* OS and OS X*)  or  /Qimf-preci-
                sion (Windows* OS)

              · -fimf-max-error    (Linux*    OS    and   OS   X*)   or
                /Qimf-max-error (Windows* OS)

              · -fimf-accuracy-bits (Linux OS and OS X*) or /Qimf-accu-
                racy-bits (Windows OS)

              If  more  than  one  of  these options are specified, the
              default value for the maximum relative  error  is  deter-
              mined by the last one specified on the command line.

              If  none  of the above options are specified, the default
              values for the maximum relative error are  determined  by
              the setting of the following options:

              · [Q]fast-transcendentals

              · [Q]prec-div

              · [Q]prec-sqrt

              · -fp-model (Linux OS and OS X) or /fp (Windows OS)

              NNOOTTEE::  Many routines in libraries LIBM (Math Library) and
              SVML (Short Vector Math Library) are  more  highly  opti-
              mized  for  Intel(R)  microprocessors  than for non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's compilers may or may not  optimize  to  the  same
              degree  for  non-Intel  microprocessors for optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations  include SSE2, SSE3, and SSSE3 instruction sets
              and other optimizations. Intel  does  not  guarantee  the
              availability,  functionality,  or  effectiveness  of  any
              optimization  on  microprocessors  not  manufactured   by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product are intended for use with Intel  microprocessors.
              Certain  optimizations  not specific to Intel microarchi-
              tecture are reserved for  Intel  microprocessors.  Please
              refer to the applicable product User and Reference Guides
              for more information regarding the  specific  instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--aarrcchh--ccoonnssiisstteennccyy==vvaalluuee[[::ffuunncclliisstt]]

              Ensures that the math library functions  produce  consis-
              tent  results  across different microarchitectural imple-
              mentations of the same architecture.

              AArrgguummeennttss::

              _v_a_l_u_e             Is one of the logical values "true"  or
                                "false".

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library   functions   to   which    the
                                attribute  should  be  applied.  If you
                                specify more than  one  function,  they
                                must  be separated with commas.  Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,  so  you  would  need   to   use
                                -fimf-arch-consistency=true:sin,sinf
                                (or                  /Qimf-arch-consis-
                                tency:true:sin,sinf) to specify consis-
                                tent results for both the single-preci-
                                sion  and  double-precision  sine func-
                                tions.

                                You also can specify the symbol  /f  to
                                denote single-precision divides, symbol
                                / to denote  double-precision  divides,
                                symbol  /l to denote extended-precision
                                divides,  and  symbol  /q   to   denote
                                quad-precision divides. For example you
                                can     specify      -fimf-arch-consis-
                                tency=true:/    or   /Qimf-arch-consis-
                                tency:true:/.

              DDeeffaauulltt::

              false             Implementations of  some  math  library
                                functions  may produce slightly differ-
                                ent results on implementations  of  the
                                same architecture.

              DDeessccrriippttiioonn::

              This  option ensures that the math library functions pro-
              duce consistent results across  different  microarchitec-
              tural implementations of the same architecture (for exam-
              ple, across different microarchitectural  implementations
              of  IA-32  architecture).  Consistency is only guaranteed
              for a single binary. Consistency is not guaranteed across
              different  architectures. For example, consistency is not
              guaranteed across  IA-32  architecture  and  Intel(R)  64
              architecture.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision  that you need. For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision,  you  can specify :sinf, as in -fimf-arch-consis-
              tency=true:sin   or  /Qimf-arch-consistency:true:sin,  or
              -fimf-arch-consistency=false:sqrtf  or /Qimf-arch-consis-
              tency:false:sqrtf.

              If you do not specify any function names, then  the  set-
              ting  applies  to  all functions (and to all precisions).
              However, as soon as you specify  an  individual  function
              name,  the setting applies only to the function of corre-
              sponding precision. So, for example, sinf applies only to
              the  single-precision  sine function, sin applies only to
              the double-precision sine function, sinl applies only  to
              the extended-precision sine function, etc.

              The  -fimf-arch-consistency  (Linux*  OS  and  OS X*) and
              /Qimf-arch-consistency (Windows* OS) option may  decrease
              run-time   performance,   but  the  option  will  provide
              bit-wise consistent results on  all  Intel(R)  processors
              and   compatible,  non-Intel  processors,  regardless  of
              micro-architecture. This option may not provide  bit-wise
              consistent  results  between different architectures, for
              example, between IA-32 and Intel(R) 64 architectures,  or
              between  Intel(R) 64 architecture and Intel(R) MIC Archi-
              tecture.

              NNOOTTEE:: Many routines in libraries LIBM (Math Library)  and
              SVML  (Short  Vector  Math Library) are more highly opti-
              mized for Intel(R)  microprocessors  than  for  non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--ddoommaaiinn--eexxcclluussiioonn==ccllaasssslliisstt[[::ffuunncclliisstt]]

              Indicates  the input arguments domain on which math func-
              tions must provide correct results.

              AArrgguummeennttss::

              _c_l_a_s_s_l_i_s_t         Is one of the following:

                                · One  or  more of the following float-
                                  ing-point  value  classes   you   can
                                  exclude   from  the  function  domain
                                  without affecting the correctness  of
                                  your  program.  The  supported  class
                                  names are:
                                  extremes This  class  is  for  values
                                  which  do  not  lie  within the usual
                                  domain of arguments for a given func-
                                  tion.    nans   This  means  "x=Nan".
                                  infinities This means "x=infinities".
                                  denormals  This  means  "x=denormal".
                                  zeros This means "x=0".
                                Each _c_l_a_s_s_l_i_s_t element corresponds to a
                                power  of  two. The exclusion attribute
                                is the logical  or  of  the  associated
                                powers  of  two  (that  is, a bitmask).
                                The following shows the current mapping
                                from  _c_l_a_s_s_l_i_s_t  mnemonics to numerical
                                values:

                                extremes          1

                                nans              2

                                infinities        4

                                denormals         8

                                zeros             16

                                none              0

                                all               31

                                common            15

                                other combinations
                                                  bitwise  OR  of   the
                                                  used  values You must
                                                  specify  the  integer
                                                  value   that   corre-
                                                  sponds to  the  class
                                                  that   you   want  to
                                                  exclude.   Note  that
                                                  on  excluded  values,
                                                  unexpected    results
                                                  may occur.

                                · One   of   the  following  short-hand
                                  tokens:
                                  none This means that none of the sup-
                                  ported  classes are excluded from the
                                  domain. To indicate this token, spec-
                                  ify 0, as in -fimf-domain-exclusion=0
                                  (or  /Qimf-domain-exclusion:0).   all
                                  This  means that all of the supported
                                  classes are excluded from the domain.
                                  To  indicate  this token, specify 31,
                                  as in  -fimf-domain-exclusion=31  (or
                                  /Qimf-domain-exclusion:31).    common
                                  This  is  the  same   as   specifying
                                  extremes,nans,infinities,denormals.
                                  To indicate this token, specify 15 (1
                                  +     2+    4    +    8),    as    in
                                  -fimf-domain-exclusion=15         (or
                                  /Qimf-domain-exclusion:15)

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library   functions   to   which    the
                                attribute  should  be  applied.  If you
                                specify more than  one  function,  they
                                must  be separated with commas.  Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,  so  you  would  need   to   use
                                -fimf-domain-exclusion=4:sin,sinf   (or
                                /Qimf-domain-exclusion:4:sin,sinf)   to
                                specify  infinities  for  both the sin-
                                gle-precision and double-precision sine
                                functions.

                                You  also  can specify the symbol /f to
                                denote single-precision divides, symbol
                                /  to  denote double-precision divides,
                                symbol /l to denote  extended-precision
                                divides,   and   symbol  /q  to  denote
                                quad-precision  divides.  For  example,
                                you can specify:

                                -fimf-domain-exclusion=4             or
                                /Qimf-domain-exclusion:4

                                -fimf-domain-exclusion=5:/,powf      or
                                /Qimf-domain-exclusion:5:/,powf

                                -fimf-domain-exclu-
                                sion=23:log,logf,/,sin,cosf          or
                                /Qimf-domain-exclu-
                                sion:23:log,logf,/,sin,cosf

                                If you don ’t  specify  argument  _f_u_n_-
                                _c_l_i_s_t, the domain restrictions apply to
                                all math library functions.

              DDeeffaauulltt::

              Zero ("0")        The compiler  uses  default  heuristics
                                when calling math library functions.

              DDeessccrriippttiioonn::

              This option indicates the input arguments domain on which
              math functions must provide correct results. It specifies
              that  your  program  will function correctly if the func-
              tions specified in _f_u_n_c_l_i_s_t do not produce standard  con-
              forming results on the number classes.

              This option can affect run-time performance and the accu-
              racy of results.  As more classes  are  excluded,  faster
              code sequences can be used.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision  that you need. For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision,  you can specify :sinf, as in -fimf-domain-exclu-
              sion=denormals:sin    or    /Qimf-domain-exclusion:denor-
              mals:sin,   or  -fimf-domain-exclusion=extremes:sqrtf  or
              /Qimf domain-exclusion:extremes:sqrtf.

              If you do not specify any function names, then  the  set-
              ting  applies  to  all functions (and to all precisions).
              However, as soon as you specify  an  individual  function
              name,  the setting applies only to the function of corre-
              sponding precision. So, for example, sinf applies only to
              the  single-precision  sine function, sin applies only to
              the double-precision sine function, sinl applies only  to
              the extended-precision sine function, etc.

              NNOOTTEE::  Many routines in libraries LIBM (Math Library) and
              SVML (Short Vector Math Library) are  more  highly  opti-
              mized  for  Intel(R)  microprocessors  than for non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's compilers may or may not  optimize  to  the  same
              degree  for  non-Intel  microprocessors for optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations  include SSE2, SSE3, and SSSE3 instruction sets
              and other optimizations. Intel  does  not  guarantee  the
              availability,  functionality,  or  effectiveness  of  any
              optimization  on  microprocessors  not  manufactured   by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product are intended for use with Intel  microprocessors.
              Certain  optimizations  not specific to Intel microarchi-
              tecture are reserved for  Intel  microprocessors.  Please
              refer to the applicable product User and Reference Guides
              for more information regarding the  specific  instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--mmaaxx--eerrrroorr==uullppss[[::ffuunncclliisstt]]

              Defines the maximum allowable  relative  error  for  math
              library  function  results, including division and square
              root.

              AArrgguummeennttss::

              _u_l_p_s              Is a  positive,  floating-point  number
                                indicating  the maximum allowable rela-
                                tive error the compiler should use.

                                The format for the number  is  [digits]
                                [.digits] [ { e | E }[sign]digits].

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library   functions   to   which    the
                                attribute  should  be  applied.  If you
                                specify more than  one  function,  they
                                must  be separated with commas.  Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,  so  you  would  need   to   use
                                -fimf-max-error=4.0:sin,sinf        (or
                                /Qimf-max-error=4.0:sin,sinf) to  spec-
                                ify   the  maximum  allowable  relative
                                error for both the single-precision and
                                double-precision sine functions.

                                You  also  can specify the symbol /f to
                                denote single-precision divides, symbol
                                /  to  denote double-precision divides,
                                symbol /l to denote  extended-precision
                                divides,   and   symbol  /q  to  denote
                                quad-precision divides. For example you
                                can  specify   -fimf-max-error=4.0:/ or
                                /Qimf-max-error:4.0:/.

              DDeeffaauulltt::

              -fimf-precision=medium or /Qimf-precision:medium
                                The compiler uses medium precision when
                                calling  math  library  functions. Note
                                that other options  can  affect  preci-
                                sion; see below for details.

              DDeessccrriippttiioonn::

              This option defines the maximum allowable relative error,
              measured in ulps, for math library function results.

              This option can affect run-time performance and the accu-
              racy of results.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision  that you need. For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision,     you     can     specify    :sinf,    as    in
              -fimf-max-error=4.0:sin  or  /Qimf-max-error:4.0:sin,  or
              -fimf-max-error=4.0:sqrtf or /Qimf-max-error:4.0:sqrtf.

              If  you  do not specify any function names, then the set-
              ting applies to all functions (and  to  all  precisions).
              However,  as  soon  as you specify an individual function
              name, the setting applies only to the function of  corre-
              sponding precision. So, for example, sinf applies only to
              the single-precision sine function, sin applies  only  to
              the  double-precision sine function, sinl applies only to
              the extended-precision sine function, etc.

              There are three options you can use to express the  maxi-
              mum relative error.  They are as follows:

              · -fimf-precision  (Linux*  OS and OS X*) or /Qimf-preci-
                sion (Windows* OS)

              · -fimf-max-error   (Linux*   OS   and    OS    X*)    or
                /Qimf-max-error (Windows* OS)

              · -fimf-accuracy-bits (Linux OS and OS X*) or /Qimf-accu-
                racy-bits (Windows OS)

              If more than one of  these  options  are  specified,  the
              default  value  for  the maximum relative error is deter-
              mined by the last one specified on the command line.

              If none of the above options are specified,  the  default
              values  for  the maximum relative error are determined by
              the setting of the following options:

              · [Q]fast-transcendentals

              · [Q]prec-div

              · [Q]prec-sqrt

              · -fp-model (Linux OS and OS X) or /fp (Windows OS)

              NNOOTTEE:: Many routines in libraries LIBM (Math Library)  and
              SVML  (Short  Vector  Math Library) are more highly opti-
              mized for Intel(R)  microprocessors  than  for  non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiimmff--pprreecciissiioonn[[==vvaalluuee[[::ffuunncclliisstt]]]]

              Lets you specify a level of accuracy (precision) that the
              compiler should use when determining which  math  library
              functions to use.

              AArrgguummeennttss::

              _v_a_l_u_e             Is one of the following values denoting
                                the desired accuracy:

                                high           This  is  equivalent  to
                                               max-error = 0.6.

                                medium         This  is  equivalent  to
                                               max-error = 4;  this  is
                                               the  default  setting if
                                               the option is  specified
                                               and _v_a_l_u_e is omitted.

                                low            This  is  equivalent  to
                                               accuracy-bits =  11  for
                                               single-precision   func-
                                               tions;  accuracy-bits  =
                                               26  for double-precision
                                               functions.

                                In the  above  explanations,  max-error
                                means  option   -fimf-max-error (Linux*
                                OS and OS X*) or /Qimf-max-error  (Win-
                                dows*  OS);  accuracy-bits means option
                                -fimf-accuracy-bits (Linux* OS  and  OS
                                X*)  or  /Qimf-accuracy-bits  (Windows*
                                OS).

              _f_u_n_c_l_i_s_t          Is an optional list of one or more math
                                library    functions   to   which   the
                                attribute should  be  applied.  If  you
                                specify  more  than  one function, they
                                must be separated with commas.   Preci-
                                sion-specific  variants  like  sin  and
                                sinf  are  considered  different  func-
                                tions,   so   you  would  need  to  use
                                -fimf-precision=high:sin,sinf       (or
                                /Qimf-precision:high:sin,sinf) to spec-
                                ify high precision for  both  the  sin-
                                gle-precision and double-precision sine
                                functions.

                                You also can specify the symbol  /f  to
                                denote single-precision divides, symbol
                                / to denote  double-precision  divides,
                                symbol  /l to denote extended-precision
                                divides,  and  symbol  /q   to   denote
                                quad-precision divides. For example you
                                can  specify  -fimf-precision=low:/  or
                                /Qimf-precision:low:/  and -fimf-preci-
                                sion=low:/f or  /Qimf-precision:low:/f.

              DDeeffaauulltt::

              medium            The compiler uses medium precision when
                                calling math  library  functions.  Note
                                that  other  options  can affect preci-
                                sion; see below for details.

              DDeessccrriippttiioonn::

              This option lets you specify a level of accuracy  (preci-
              sion) that the compiler should use when determining which
              math library functions to use.

              This option can be used to improve  run-time  performance
              if reduced accuracy is sufficient for the application, or
              it can be used to increase the accuracy of  math  library
              functions selected by the compiler.

              In  general, using a lower precision can improve run-time
              performance and  using  a  higher  precision  may  reduce
              run-time performance.

              If you need to define the accuracy for a math function of
              a certain precision, specify the  function  name  of  the
              precision that you need.  For example, if you want double
              precision, you can specify :sin; if you want single  pre-
              cision,  you  can  specify  :sinf,  as   in  -fimf-preci-
              sion=low:sin  or /Qimf-precision:low:sin, or -fimf-preci-
              sion=high:sqrtf or /Qimf-precision:high:sqrtf.

              If  you  do not specify any function names, then the set-
              ting applies to all functions (and  to  all  precisions).
              However,  as  soon  as you specify an individual function
              name, the setting applies only to the function of  corre-
              sponding precision. So, for example, sinf applies only to
              the single-precision sine function, sin applies  only  to
              the  double-precision sine function, sinl applies only to
              the extended-precision sine function, etc.

              There are three options you can use to express the  maxi-
              mum relative error.  They are as follows:

              · -fimf-precision  (Linux*  OS and OS X*) or /Qimf-preci-
                sion (Windows* OS)

              · -fimf-max-error   (Linux*   OS   and    OS    X*)    or
                /Qimf-max-error (Windows* OS)

              · -fimf-accuracy-bits (Linux OS and OS X*) or /Qimf-accu-
                racy-bits (Windows OS)

              If more than one of  these  options  are  specified,  the
              default  value  for  the maximum relative error is deter-
              mined by the last one specified on the command line.

              If none of the above options are specified,  the  default
              values  for  the maximum relative error are determined by
              the setting of the following options:

              · [Q]fast-transcendentals

              · [Q]prec-div

              · [Q]prec-sqrt

              · -fp-model (Linux OS and OS X) or /fp (Windows OS)

              NNOOTTEE:: Many routines in libraries LIBM (Math Library)  and
              SVML  (Short  Vector  Math Library) are more highly opti-
              mized for Intel(R)  microprocessors  than  for  non-Intel
              microprocessors.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiinnlliinnee

       --ffnnoo--iinnlliinnee

              Tells  the  compiler  to  inline  functions declared with
              __inline and perform C++ inlining.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-inline       The  compiler does not inline functions
                                declared with __inline.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  to  inline  functions
              declared with __inline and perform C++ inlining.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -inline-level

       --ffiinnlliinnee--ffuunnccttiioonnss

       --ffnnoo--iinnlliinnee--ffuunnccttiioonnss

              Enables function inlining for single file compilation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -finline-functions
                                Interprocedural   optimizations  occur.
                                However,  if  you  specify   -O0,   the
                                default is OFF.

              DDeessccrriippttiioonn::

              This  option  enables  function  inlining for single file
              compilation.

              It enables the compiler to perform inline function expan-
              sion  for  calls  to functions defined within the current
              source file.

              The compiler applies a heuristic to perform the  function
              expansion.  To  specify  the  size  of the function to be
              expanded, use the -finline-limit option.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -inline-level=2

       --ffiinnlliinnee--lliimmiitt==nn

              Lets you specify the maximum size of  a  function  to  be
              inlined.

              AArrgguummeennttss::

              _n                 Must be  an  integer  greater  than  or
                                equal to zero. It is the maximum number
                                of lines the function can  have  to  be
                                considered for inlining.

              DDeeffaauulltt::

              OFF               The  compiler  uses  default heuristics
                                when inlining functions.

              DDeessccrriippttiioonn::

              This option lets you specify the maximum size of a  func-
              tion  to  be  inlined. The compiler inlines smaller func-
              tions, but this option lets you inline  large  functions.
              For  example,  to  indicate  a  large function, you could
              specify 100 or 1000 for _n.

              Note that parts of  functions  cannot  be  inlined,  only
              whole functions.

              This  option  is a modification of the -finline-functions
              option, whose behavior occurs by default.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss

       --ffnnoo--iinnssttrruummeenntt--ffuunnccttiioonnss

              Determines whether function entry  and  exit  points  are
              instrumented.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on IA-32  archi-
              tecture  targeting  Intel(R)  Graphics  Technology, or on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-instrument-functions
                                Function entry and exit points are  not
                                instrumented.

              DDeessccrriippttiioonn::

              This  option  determines  whether function entry and exit
              points are instrumented. It may increase execution  time.

              The  following  profiling  functions  are called with the
              address of the current function and the address of  where
              the function was called (its "call site"):

              · This function is called upon function entry:

                ·

                  void __cyg_profile_func_enter (void *this_fn,

                  void *call_site);

              · This function is called upon function exit:

                ·

                  void __cyg_profile_func_exit (void *this_fn,

                  void *call_site);

              These  functions  can be used to gather more information,
              such as profiling information or timing information. Note
              that  it  is  the  user's responsibility to provide these
              profiling functions.

              If you specify -finstrument-functions (Linux* OS  and  OS
              X*)  or  /Qinstrument-functions  (Windows*  OS), function
              inlining  is  disabled.  If  you   specify   -fno-instru-
              ment-functions  or  /Qinstrument-functions-,  inlining is
              not disabled.

              On Linux and OS X systems,  you  can  use  the  following
              attribute  to  stop  an  individual  function  from being
              instrumented:

              __attribute__((__no_instrument_function__))


              It also stops inlining from being disabled for that indi-
              vidual function.

              This option is provided for compatibility with gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffjjuummpp--ttaabblleess

       --ffnnoo--jjuummpp--ttaabblleess

              Determines  whether  jump tables are generated for switch
              statements.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fjump-tables     The  compiler  may  use jump tables for
                                switch statements.

              DDeessccrriippttiioonn::

              This option determines whether jump tables are  generated
              for switch statements.

              Option -fno-jump-tables prevents the compiler from gener-
              ating jump tables for switch statements. This  action  is
              performed  unconditionally  and independent of any gener-
              ated code performance consideration.

              Option -fno-jump-tables also prevents the  compiler  from
              creating  switch  statements  internally  as  a result of
              optimizations.

              Use -fno-jump-tables with -fpic  when  compiling  objects
              that will be loaded in a way where the jump table reloca-
              tion cannot be resolved.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss

       --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss

              Tells the compiler to preserve  allocation  of  variables
              that are not referenced in the source.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-keep-static-consts
                                If a variable is never referenced in  a
                                routine,   the  variable  is  discarded
                                unless optimizations  are  disabled  by
                                option -O0 (Linux* OS and OS X*).

              DDeessccrriippttiioonn::

              This  option tells the compiler to preserve allocation of
              variables that are not referenced in the source.

              The negated form can be  useful  when  optimizations  are
              enabled to reduce the memory usage of static data.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmaa

       --nnoo--ffmmaa

              Determines  whether  the  compiler generates fused multi-
              ply-add (FMA) instructions if such instructions exist  on
              the target processor.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fma              If the instructions exist on the target
                                processor, the compiler generates fused
                                multiply-add (FMA) instructions.

                                However,   if   you  specify  -fp-model
                                strict (Linux* OS and OS  X*),  but  do
                                not   explicitly   specify   -fma,  the
                                default is -no-fma.

              DDeessccrriippttiioonn::

              This option determines  whether  the  compiler  generates
              fused  multiply-add  (FMA)  instructions if such instruc-
              tions exist on the  target  processor.  When  the  [Q]fma
              option  is  specified,  the  compiler  may  generate  FMA
              instructions for combining multiply and  add  operations.
              When the negative form of the [Q]fma option is specified,
              the compiler must  generate  separate  multiply  and  add
              instructions with intermediate rounding.

              This  option  has  no  effect unless setting CORE-AVX2 or
              higher is specified for option [Q]x,   -march  (Linux  OS
              and OS X), or /arch (Windows OS).

       --ffmmaatthh--eerrrrnnoo

       --ffnnoo--mmaatthh--eerrrrnnoo

              Tells  the  compiler  that  errno  can be reliably tested
              after calls to standard math library functions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-math-errno   The  compiler  assumes that the program
                                does not  test  errno  after  calls  to
                                standard math library functions.

              DDeessccrriippttiioonn::

              This option tells the compiler to assume that the program
              tests errno after calls to math library  functions.  This
              restricts  optimization because it causes the compiler to
              treat most math functions as having side effects.

              Option -fno-math-errno tells the compiler to assume  that
              the  program  does  not  test  errno  after calls to math
              library functions. This frequently allows the compiler to
              generate  faster code. Floating-point code that relies on
              IEEE exceptions instead of errno  to  detect  errors  can
              safely use this option to improve performance.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmeerrggee--ccoonnssttaannttss ((LL**XX oonnllyy))

       --ffnnoo--mmeerrggee--ccoonnssttaannttss ((LL**XX oonnllyy))

              Determines  whether  the  compiler  and linker attempt to
              merge identical constants (string  constants  and  float-
              ing-point constants) across compilation units.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fmerge-constants The  compiler  and  linker  attempt  to
                                merge identical constants across compi-
                                lation units if the compiler and linker
                                supports it.

              DDeessccrriippttiioonn::

              This option determines whether the  compiler  and  linker
              attempt  to  merge  identical constants (string constants
              and floating-point constants) across compilation units.

              If you do not want the compiler and linker to attempt  to
              merge   identical  constants  across  compilation  units.
              specify -fno-merge-constants.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmeerrggee--ddeebbuugg--ssttrriinnggss ((LL**XX oonnllyy))

       --ffnnoo--mmeerrggee--ddeebbuugg--ssttrriinnggss ((LL**XX oonnllyy))

              Causes the compiler to pool  strings  used  in  debugging
              information.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fmerge-debug-strings
                                The compiler will pool strings used  in
                                debugging information.

              DDeessccrriippttiioonn::

              This  option  causes the compiler to pool strings used in
              debugging  information.  The  linker  will  automatically
              retain this pooling.

              This option can reduce the size of debug information, but
              it may produce slightly slower compile and link times.

              This option is only turned on by default if you are using
              gcc 4.3 or later, where this setting is also the default,
              since the generated debug tables require binutils version
              2.17 or later to work reliably.

              If  you  do not want the compiler to pool strings used in
              debugging       information,        specify        option
              -fno-merge-debug-strings.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmiinnsshhaarreedd

              Specifies  that  a  compilation  unit is a component of a
              main program and should not be linked as part of a share-
              able object.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Source  files  are compiled together to
                                form a single object file.

              DDeessccrriippttiioonn::

              This option specifies that a compilation unit is a compo-
              nent  of  a main program and should not be linked as part
              of a shareable object.

              This option allows the compiler to optimize references to
              defined  symbols  without special visibility settings. To
              ensure that external and  common  symbol  references  are
              optimized,  you need to specify visibility hidden or pro-
              tected by using the -fvisibility, -fvisibility-hidden, or
              -fvisibility-protected option.

              Also,  the  compiler  does  not  need  to  generate posi-
              tion-independent code for the main program.  It  can  use
              absolute  addressing,  which  may  reduce the size of the
              global offset table (GOT) and may reduce memory  traffic.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmppcc--pprriivvaattiizzee ((LL**XX oonnllyy))

       --ffnnoo--mmppcc--pprriivvaattiizzee ((LL**XX oonnllyy))

              Enables  or disables privatization of all static data for
              the MultiProcessor Computing  environment  (MPC)  unified
              parallel runtime.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Only available on Intel(R) 64
              architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-mpc-privatize
                                The  privatization  of  all static data
                                for the MPC unified parallel runtime is
                                disabled.

              DDeessccrriippttiioonn::

              This  option  enables  or  disables  privatization of all
              static data for the MultiProcessor Computing  environment
              (MPC) unified parallel runtime.

              Option    -fmpc-privatize    causes   calls  to  extended
              thread-local-storage (TLS) resolution, run-time  routines
              that  are  not  supported on standard Linux* OS distribu-
              tions.

              This option requires installation of another product. For
              more information, see Feature Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffmmss--ddiiaalleecctt[[==vveerr]] ((LL**XX oonnllyy))

              Enables support for a language dialect that is compatible
              with Microsoft* Windows, while maintaining link  compati-
              bility with gcc.

              AArrgguummeennttss::

              _v_e_r               Indicates  that  the  language  dialect
                                should be  compatible  with  a  certain
                                version  of  Microsoft*  Visual Studio.
                                Possible values are:

                                12             Specifies  the   dialect
                                               should   be   compatible
                                               with  Microsoft*  Visual
                                               Studio 2013.

                                11             Specifies   the  dialect
                                               should   be   compatible
                                               with  Microsoft*  Visual
                                               Studio 2012.

                                10             Specifies  the   dialect
                                               should   be   compatible
                                               with  Microsoft*  Visual
                                               Studio 2010. This is the
                                               default if  you  do  not
                                               specify _v_e_r.

              DDeeffaauulltt::

              OFF               The  compiler  does  not support a lan-
                                guage dialect that is  compatible  with
                                Microsoft* Windows.

              DDeessccrriippttiioonn::

              This  option  enables support for a language dialect that
              is compatible with Microsoft* Windows, while  maintaining
              link  compatibility  with  gcc.  It allows portability of
              code written on Windows* OS that  uses  Microsoft  exten-
              sions or language features.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --ffmmuuddffllaapp ((LL**XX oonnllyy))

              The compiler instruments risky pointer operations to pre-
              vent buffer overflows and invalid heap use.   This  is  a
              deprecated  option.  There  is no replacement option. You
              can consider using the Pointer Checker options  (such  as
              option -check-pointers).

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler does not instrument risky
                                pointer operations.

              DDeessccrriippttiioonn::

              The compiler instruments risky pointer operations to pre-
              vent  buffer  overflows and invalid heap use. It requires
              gcc 4.0 or newer.

              When using this compiler option, you must specify  linker
              option -lmudflap in the link command line to resolve ref-
              erences to the libmudflap library.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoo--ggnnuu--kkeeyywwoorrddss

              Tells the compiler to not recognize typeof as a  keyword.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Keyword typeof is recognized.

              DDeessccrriippttiioonn::

              Tells the compiler to not recognize typeof as a  keyword.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess

              Tells  the compiler to not emit code for implicit instan-
              tiations of inline templates.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  handles  inlines so that
                                compilations, with  and  without  opti-
                                mization,  will  need  the  same set of
                                explicit instantiations.

              DDeessccrriippttiioonn::

              This option tells the  compiler  to  not  emit  code  for
              implicit instantiations of inline templates.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess

              Tells  the  compiler to not emit code for non-inline tem-
              plates that are instantiated implicitly.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  handles  inlines so that
                                compilations, with  and  without  opti-
                                mization,  will  need  the  same set of
                                explicit instantiations.

              DDeessccrriippttiioonn::

              This option tells the  compiler  to  not  emit  code  for
              non-inline  templates  that  are instantiated implicitly,
              but to only emit code for explicit instantiations.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss

       --ffnnoo--nnoonn--ccaallll--eexxcceeppttiioonnss

              Allows trapping instructions to throw C++ exceptions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-non-call-exceptions
                                C++  exceptions  are  not  thrown  from
                                trapping instructions.

              DDeessccrriippttiioonn::

              This  option  allows  trapping  instructions to throw C++
              exceptions. It allows hardware signals generated by trap-
              ping instructions to be converted into C++ exceptions and
              caught using the standard C++ exception  handling  mecha-
              nism. Examples of such signals are SIGFPE (floating-point
              exception) and SIGSEGV (segmentation violation).

              You must write a signal handler that catches  the  signal
              and throws a C++ exception. After that, any occurrence of
              that signal within a C++ try block can be caught by a C++
              catch  handler  of  the  same  type  as the C++ exception
              thrown within the signal handler.

              Only signals generated by trapping instructions (that is,
              memory  access  instructions  and floating-point instruc-
              tions) can be caught. Signals that can occur at any time,
              such as SIGALRM, cannot be caught in this manner.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoonn--llvvaalluuee--aassssiiggnn

       --ffnnoo--nnoonn--llvvaalluuee--aassssiiggnn

              Determines  whether casts and conditional expressions can
              be used as lvalues.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fnon-lvalue-assign
                                The  compiler  allows  casts and condi-
                                tional expressions to be used as  lval-
                                ues.

              DDeessccrriippttiioonn::

              This  option  determines  whether  casts  and conditional
              expressions can be used as lvalues.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoo--ooppeerraattoorr--nnaammeess

              Disables support for the operator names specified in  the
              standard.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Disables support for the operator names specified in  the
              standard.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffnnoo--rrttttii

              Disables support for run-time type information (RTTI).

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              This  option  disables support for run-time type informa-
              tion (RTTI).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffoommiitt--ffrraammee--ppooiinntteerr

       --ffnnoo--oommiitt--ffrraammee--ppooiinntteerr

              Determines whether EBP is used as a general-purpose  reg-
              ister in optimizations.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Option /Oy[-] is  only  avail-
              able on IA-32 architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fomit-frame-pointer
                                EBP is used as a general-purpose regis-
                                ter   in   optimizations.  However,  on
                                Linux* and OS X* systems,  the  default
                                is  -fno-omit-frame-pointer  if  option
                                -O0 or -g is specified.

              DDeessccrriippttiioonn::

              These options determine whether EBP is  used  as  a  gen-
              eral-purpose    register    in   optimizations.   Options
              -fomit-frame-pointer and  /Oy  allow  this  use.  Options
              -fno-omit-frame-pointer and /Oy- disallow it.

              Some  debuggers  expect  EBP  to be used as a stack frame
              pointer, and cannot produce a stack backtrace unless this
              is  so.  The  -fno-omit-frame-pointer  and  /Oy-  options
              direct the compiler to generate code that  maintains  and
              uses  EBP  as  a stack frame pointer for all functions so
              that a debugger can still produce a stack backtrace with-
              out doing the following:

              · For  -fno-omit-frame-pointer: turning off optimizations
                with -O0

              · For /Oy-: turning off /O1, /O2, or /O3 optimizations

              The -fno-omit-frame-pointer option is set when you  spec-
              ify option -O0 or the -g option. The -fomit-frame-pointer
              option is set when you specify option -O1, -O2, or -O3.

              The /Oy option is set when you specify the /O1,  /O2,  or
              /O3  option.  Option /Oy- is set when you specify the /Od
              option.

              Using the -fno-omit-frame-pointer or /Oy- option  reduces
              the  number  of available general-purpose registers by 1,
              and can result in slightly less efficient code.

              NNOOTTEE:: For Linux* systems:

              There is currently an issue with GCC 3.2  exception  han-
              dling.  Therefore, the Intel compiler ignores this option
              when GCC 3.2 is installed for C++ and exception  handling
              is turned on (the default).

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -fp (this is a deprecated option)

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss

       --ffnnoo--ooppttiimmiizzee--ssiibblliinngg--ccaallllss

              Determines  whether the compiler optimizes tail recursive
              calls.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -foptimize-sibling-calls
                                The  compiler  optimizes tail recursive
                                calls.

              DDeessccrriippttiioonn::

              This option determines  whether  the  compiler  optimizes
              tail  recursive  calls.  It  enables  conversion  of tail
              recursion into loops.

              If you do not want  to  optimize  tail  recursive  calls,
              specify -fno-optimize-sibling-calls.

              Tail  recursion  is  a  special  form  of  recursion that
              doesn't use stack space. In tail recursion,  a  recursive
              call is converted to a GOTO statement that returns to the
              beginning of the function. In this case, the return value
              of  the recursive call is only used to be returned. It is
              not used in another expression.  The  recursive  function
              is  converted into a loop, which prevents modification of
              the stack space used.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--mmooddeell kkeeyywwoorrdd

              Controls the semantics of floating-point calculations.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies the  semantics  to  be  used.
                                Possible values are:

                                precise        Disables   optimizations
                                               that are not  value-safe
                                               on  floating-point data.

                                fast[=1|2]     Enables more  aggressive
                                               optimizations  on float-
                                               ing-point data.

                                strict         Enables   precise    and
                                               except,   disables  con-
                                               tractions,  and  enables
                                               pragma stdc fenv_access.

                                source         Rounds      intermediate
                                               results               to
                                               source-defined    preci-
                                               sion.

                                double         Rounds      intermediate
                                               results to 53-bit  (dou-
                                               ble) precision.

                                extended       Rounds      intermediate
                                               results    to     64-bit
                                               (extended) precision.

                                [no-]except  (Linux*  OS  and OS X*) or
                                except[-] (Windows* OS)
                                               Determines       whether
                                               strict    floating-point
                                               exception  semantics are
                                               honored.

              DDeeffaauulltt::

              -fp-model fast=1  The compiler uses more aggressive opti-
                                mizations  on  floating-point  calcula-
                                tions.

              DDeessccrriippttiioonn::

              This option controls the semantics of floating-point cal-
              culations.

              The _k_e_y_w_o_r_d_s can be considered in groups:

              · Group A: precise, fast, strict

              · Group B: source, double, extended

              · Group C: except (or the negative form)

              You can use more than one _k_e_y_w_o_r_d. However, the following
              rules apply:

              · You cannot specify fast and except together in the same
                compilation.  You  can specify any other combination of
                group A, group B,  and  group  C.  Since  fast  is  the
                default,  you must not specify except without a group A
                or group B _k_e_y_w_o_r_d.

              · You should specify only one _k_e_y_w_o_r_d from  group  A  and
                only  one  _k_e_y_w_o_r_d from  group B. If you try to specify
                more than one _k_e_y_w_o_r_d from either group A or  group  B,
                the last (rightmost) one takes effect.

              · If  you specify except more than once, the last (right-
                most) one takes effect.

              The floating-point (FP) environment is  a  collection  of
              registers   that  control  the  behavior  of  FP  machine
              instructions and indicate  the  current  FP  status.  The
              floating-point environment may include rounding-mode con-
              trols, exception masks, flush-to-zero controls, exception
              status  flags, and other floating-point related features.

              OOppttiioonn            DDeessccrriippttiioonn

              -fp-model precise or /fp:precise
                                Tells the compiler to  strictly  adhere
                                to value-safe optimizations when imple-
                                menting floating-point calculations. It
                                disables  optimizations that can change
                                the result of  floating-point  calcula-
                                tions,  which  is  required  for strict
                                ANSI conformance.

              These semantics  ensure  the  reproducibility  of  float-
              ing-point  computations  for  serial code, including code
              vectorized or auto-parallelized by the compiler, but they
              may  slow performance. They do not ensure value safety or
              run-to-run reproducibility of other parallel code.
                                Run-to-run reproducibility  for  float-
                                ing-point  reductions  in  OpenMP* code
                                may be obtained for a fixed  number  of
                                threads   through  the  KMP_DETERMINIS-
                                TIC_REDUCTION   environment   variable.
                                For  more  information about this envi-
                                ronment variable, see  _S_u_p_p_o_r_t_e_d  _E_n_v_i_-
                                _r_o_n_m_e_n_t _V_a_r_i_a_b_l_e_s

              The  compiler assumes the default floating-point environ-
              ment; you are not allowed to modify it.

              Intermediate  results  are  computed  with  the precision
              shown in the following table, unless it is overridden  by
              a keyword from Group B:

              IA-32  architecture: Windows: Double; Linux: Extended; OS
              X: Extended

              Intel(R) 64 architecture: All operating systems: Source

              Floating-point   exception   semantics  are  disabled  by
              default. To enable these semantics, you must also specify
              -fp-model except or /fp:except.

              -fp-model fast[=1|2] or /fp:fast[=1|2]
                                Tells  the compiler to use more aggres-
                                sive  optimizations  when  implementing
                                floating-point    calculations.   These
                                optimizations increase speed,  but  may
                                affect  the accuracy or reproducibility
                                of floating-point computations.

              Specifying fast is the same as specifying fast=1.  fast=2
              may produce faster and less accurate results.

              Floating-point  exception  semantics  are   disabled   by
              default  and  they  cannot  be enabled because you cannot
              specify fast and except together in the same compilation.
              To  enable exception semantics, you must explicitly spec-
              ify another keyword (see other keyword  descriptions  for
              details).

              -fp-model strict or /fp:strict
                                Tells the compiler to  strictly  adhere
                                to value-safe optimizations when imple-
                                menting floating-point calculations and
                                enables floating-point exception seman-
                                tics.  This  is  the  strictest  float-
                                ing-point model.

              The  compiler  does not assume the default floating-point
              environment; you are allowed to modify it.

              Floating-point  exception  semantics  can  be disabled by
              explicitly specifying -fp-model no-except or /fp:except-.

              -fp-model source or /fp:source
                                This option causes intermediate results
                                to be rounded to the precision  defined
                                in  the  source  code.  It also implies
                                keyword precise unless it is overridden
                                by a keyword from Group A.

              Intermediate expressions use the precision of the operand
              with higher precision, if any.

              long  double:  64-bit precision; 80-bit data type; 15-bit
              exponent

              double:  53-bit precision; 64-bit data type; 11-bit expo-
              nent; on Windows systems using  IA-32  architecture,  the
              exponent may be 15-bit if an x87 register is used to hold
              the value.

              float: 24-bit precision; 32-bit data type; 8-bit exponent

              The  compiler assumes the default floating-point environ-
              ment; you are not allowed to modify it.

              -fp-model double or /fp:double
                                This option causes intermediate results
                                to be rounded as follows:

              53-bit (double) precision

              64-bit data type

              11-bit exponent; on Windows systems using IA-32 architec-
              ture,  the  exponent  may be 15-bit if an x87 register is
              used to hold the value.

              53-bit (double) precision

              64-bit data type

              11-bit exponent; on Windows systems using IA-32 architec-
              ture,  the  exponent  may be 15-bit if an x87 register is
              used to hold the value.

              This option also implies keyword  precise  unless  it  is
              overridden by a keyword from Group A.

              The compiler assumes the default floating-point  environ-
              ment; you are not allowed to modify it.

              -fp-model extended or /fp:extended
                                This option causes intermediate results
                                to be rounded as follows:

              64-bit (extended) precision

              80-bit data type

              15-bit exponent

              64-bit (extended) precision

              80-bit data type

              15-bit exponent

              This  option  also  implies  keyword precise unless it is
              overridden by a keyword from Group A.

              The  compiler assumes the default floating-point environ-
              ment; you are not allowed to modify it.

              -fp-model except or /fp:except
                                Tells  the  compiler  to  follow strict
                                floating-point exception semantics.

              The -fp-model and /fp  options determine the setting  for
              the  maximum  allowable  relative  error for math library
              function results (max-error) if  none  of  the  following
              options are specified:

              · -fimf-accuracy-bits   (Linux*   OS   and   OS   X*)  or
                /Qimf-accuracy-bits (Windows* OS)

              · -fimf-max-error (Linux OS and OS X) or  /Qimf-max-error
                (Windows OS)

              · -fimf-precision  (Linux OS and OS X) or /Qimf-precision
                (Windows OS)

              · [Q]fast-transcendentals

              Option  -fp-model  fast  (and   /fp:fast)   sets   option
              -fimf-precision=medium    (/Qimf-precision:medium)    and
              option  -fp-model  precise  (and   /fp:precise)   implies
              -fimf-precision=high  (and  /Qimf-precision:high). Option
              -fp-model fast=2 (and /fp:fast2) sets option -fimf-preci-
              sion=medium   (and   /Qimf-precision:medium)  and  option
              -fimf-domain-exclusion=15    (and     /Qimf-domain-exclu-
              sion=15).

              NNOOTTEE::  On  Windows  and  Linux operating systems on IA-32
              architecture,   the  compiler,  by  default,   implements
              floating-point   (FP)   arithmetic  using  SSE2  and  SSE
              instructions.  This  can  cause  differences  in   float-
              ing-point results when compared to previous x87 implemen-
              tations.

              NNOOTTEE::


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's compilers may or may not  optimize  to  the  same
              degree  for  non-Intel  microprocessors for optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations  include SSE2, SSE3, and SSSE3 instruction sets
              and other optimizations. Intel  does  not  guarantee  the
              availability,  functionality,  or  effectiveness  of  any
              optimization  on  microprocessors  not  manufactured   by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product are intended for use with Intel  microprocessors.
              Certain  optimizations  not specific to Intel microarchi-
              tecture are reserved for  Intel  microprocessors.  Please
              refer to the applicable product User and Reference Guides
              for more information regarding the  specific  instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--ppoorrtt

       --nnoo--ffpp--ppoorrtt

              Rounds floating-point results after floating-point opera-
              tions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-fp-port       The default rounding  behavior  depends
                                on the compiler's code generation deci-
                                sions and the precision  parameters  of
                                the operating system.

              DDeessccrriippttiioonn::

              This  option  rounds  floating-point results after float-
              ing-point operations.

              This option is  designed  to  be  used  with  the  -mia32
              (Linux* OS and OS X*) or /arch:IA32 (Windows* OS ) option
              on a 32-bit compiler. Under those  conditions,  the  com-
              piler  implements  floating-point  calculations using the
              x87 instruction set, which  uses  an  internal  precision
              that  may  be  higher than the precision specified in the
              program.

              By default, the  compiler  may  keep  results  of  float-
              ing-point  operations  in this higher internal precision.
              Rounding  to  program  precision  occurs  at  unspecified
              points.  This provides better performance, but the float-
              ing-point results are less deterministic. The  [Q]fp-port
              option  rounds  floating-point  results to user-specified
              precision at assignments and type conversions.  This  has
              some impact on speed.

              When  compiling  for  newer  architectures,  the compiler
              implements  floating-point  calculations  with  different
              instructions,  such  as  Intel(R)  SSE  and  SSE2.  These
              Intel(R) Streaming SIMD Extensions round directly to sin-
              gle  precision  or double precision at every instruction.
              In these cases, option [Q]fp-port has no effect.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--ssppeeccuullaattiioonn==mmooddee

              Tells the compiler the mode  in  which  to  speculate  on
              floating-point operations.

              AArrgguummeennttss::

              _m_o_d_e              Is the mode for  floating-point  opera-
                                tions. Possible values are:

                                fast           Tells  the  compiler  to
                                               speculate   on    float-
                                               ing-point operations.

                                safe           Tells  the  compiler  to
                                               disable  speculation  if
                                               there  is  a possibility
                                               that the speculation may
                                               cause  a  floating-point
                                               exception.

                                strict         Tells  the  compiler  to
                                               disable  speculation  on
                                               floating-point    opera-
                                               tions.

                                off            This   is  the  same  as
                                               specifying strict.

              DDeeffaauulltt::

              -fp-speculation=fast
                                The  compiler  speculates   on   float-
                                ing-point  operations. This is also the
                                behavior   when    optimizations    are
                                enabled.  However,  if  you  specify no
                                optimizations (-O0 on Linux*  OS),  the
                                default is -fp-speculation=safe (Linux*
                                OS).

              DDeessccrriippttiioonn::

              This option tells the compiler the mode in which to spec-
              ulate on floating-point operations.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--ssttaacckk--cchheecckk

              Tells  the  compiler  to  generate extra code after every
              function call to ensure that the floating-point stack  is
              in the expected state.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               There is no checking to ensure that the
                                floating-point (FP)  stack  is  in  the
                                expected state.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler to generate extra code
              after every function  call  to  ensure  that  the  float-
              ing-point (FP) stack is in the expected state.

              By  default,  there  is no checking. So when the FP stack
              overflows, a NaN value is put into  FP  calculations  and
              the program's results differ. Unfortunately, the overflow
              point can be far away from the point of the  actual  bug.
              This  option  places code that causes an access violation
              exception immediately after  an  incorrect  call  occurs,
              thus making it easier to locate these issues.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--ttrraapp==mmooddee[[,,mmooddee,,......]]

              Sets  the  floating-point trapping mode for the main rou-
              tine.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _m_o_d_e              Is the floating-point trapping mode. If
                                you specify more than one  mode  value,
                                the list is processed sequentially from
                                left to right.  Possible values are:

                                [no]divzero    Enables or disables  the
                                               IEEE  trap  for division
                                               by zero.

                                [no]inexact    Enables or disables  the
                                               IEEE  trap  for  inexact
                                               result.

                                [no]invalid    Enables or disables  the
                                               IEEE  trap  for  invalid
                                               operation.

                                [no]overflow   Enables or disables  the
                                               IEEE  trap for overflow.

                                [no]underflow  Enables or disables  the
                                               IEEE trap for underflow.

                                [no]denormal   Enables or disables  the
                                               trap for denormal.

                                all            Enables all of the above
                                               traps.

                                none           Disables  all   of   the
                                               above traps.

                                common         Sets  the  most commonly
                                               used IEEE  traps:  divi-
                                               sion  by  zero,  invalid
                                               operation, and overflow.

              DDeeffaauulltt::

              -fp-trap=none     No  traps  are  enabled  when a program
                                starts.

              DDeessccrriippttiioonn::

              This option sets the floating-point trapping mode for the
              main  routine.    It  does  not  set a handler for float-
              ing-point exceptions.

              The [no] form of a mode value is only used to modify  the
              meaning  of  mode  values all and common, and can only be
              used with one of those  values.  The  [no]  form  of  the
              option  by  itself does not explicitly cause a particular
              trap to be disabled.

              Use mode value inexact with caution. This results in  the
              trap being enabled whenever a floating-point value cannot
              be  represented  exactly,  which  can  cause   unexpected
              results.

              If  mode  value  underflow  is  specified,  the  compiler
              ignores the FTZ (flush-to-zero)  bit  state  of  Intel(R)
              Streaming  SIMD  Extensions (Intel(R) SSE) floating-point
              units.

              When a DAZ (denormals are zero) bit is set in an Intel(R)
              SSE  floating-point unit control word, a denormal operand
              exception is never generated.

              To set the floating-point trapping mode for all routines,
              specify the[Q]fp-trap-all option.

              NNOOTTEE::  The negative form of the [Q]ftz option can be used
              to set or reset the FTZ and the DAZ hardware flags.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffpp--ttrraapp--aallll==mmooddee[[,,mmooddee,,......]]

              Sets the floating-point trapping mode for all routines.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _m_o_d_e              Is the floating-point trapping mode. If
                                you  specify  more than one mode value,
                                the list is processed sequentially from
                                left to right.  Possible values are:

                                [no]divzero    Enables  or disables the
                                               IEEE trap  for  division
                                               by zero.

                                [no]inexact    Enables  or disables the
                                               IEEE  trap  for  inexact
                                               result.

                                [no]invalid    Enables  or disables the
                                               IEEE  trap  for  invalid
                                               operation.

                                [no]overflow   Enables  or disables the
                                               IEEE trap for  overflow.

                                [no]underflow  Enables  or disables the
                                               IEEE trap for underflow.

                                [no]denormal   Enables  or disables the
                                               trap for denormal.

                                all            Enables all of the above
                                               traps.

                                none           Disables   all   of  the
                                               above traps.

                                common         Sets the  most  commonly
                                               used  IEEE  traps: divi-
                                               sion  by  zero,  invalid
                                               operation, and overflow.

              DDeeffaauulltt::

              -fp-trap-all=none No traps are enabled for all  routines.

              DDeessccrriippttiioonn::

              This option sets the floating-point trapping mode for the
              main routine.   It does not  set  a  handler  for  float-
              ing-point exceptions.

              The  [no] form of a mode value is only used to modify the
              meaning of mode values all and common, and  can  only  be
              used  with  one  of  those  values.  The [no] form of the
              option by itself does not explicitly cause  a  particular
              trap to be disabled.

              Use  mode value inexact with caution. This results in the
              trap being enabled whenever a floating-point value cannot
              be   represented  exactly,  which  can  cause  unexpected
              results.

              If  mode  value  underflow  is  specified,  the  compiler
              ignores  the  FTZ  (flush-to-zero)  bit state of Intel(R)
              Streaming SIMD Extensions (Intel(R)  SSE)  floating-point
              units.

              When a DAZ (denormals are zero) bit is set in an Intel(R)
              SSE floating-point unit control word, a denormal  operand
              exception is never generated.

              To set the floating-point trapping mode for the main rou-
              tine only, specify the  [Q]fp-trap option.

              NNOOTTEE:: The negative form of the [Q]ftz option can be  used
              to set or reset the FTZ and the DAZ hardware flags.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffppaacckk--ssttrruucctt

              Specifies   that   structure  members  should  be  packed
              together.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Specifies   that   structure  members  should  be  packed
              together.

              NNOOTTEE:: Using this option may result in code  that  is  not
              usable with standard (system) c and C++ libraries.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -Zp1

       --ffppeerrmmiissssiivvee

              Tells the compiler to allow for non-conformant code.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Tells the compiler to allow for non-conformant code.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffppiicc

       --ffnnoo--ppiicc

              Determines  whether the compiler generates position-inde-
              pendent code.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-pic          The  compiler  does  not generate posi-
                                tion-independent code.

              DDeessccrriippttiioonn::

              This option determines  whether  the  compiler  generates
              position-independent code.

              Option  -fpic  specifies  full  symbol preemption. Global
              symbol definitions as well as  global  symbol  references
              get  default  (that  is,  preemptable)  visibility unless
              explicitly specified otherwise.

              Option -fpic must be used when building shared objects.

              This option can also be specified as -fPIC.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffppiiee ((LL**XX oonnllyy))

              Tells the compiler to generate position-independent code.
              The generated code can only be linked into executables.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does  not  generate  posi-
                                tion-independent   code   for  an  exe-
                                cutable-only object.

              DDeessccrriippttiioonn::

              This option tells the compiler to generate position-inde-
              pendent  code. It is similar to -fpic, but code generated
              by -fpie can only be linked into an executable.

              Because the object is linked  into  an  executable,  this
              option  causes  better optimization of some symbol refer-
              ences.

              To ensure that run-time libraries are set up properly for
              the  executable,  you  should also specify option -pie to
              the compiler driver on the link command line.

              Option -fpie can also be specified as -fPIE.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffrreegg--ssttrruucctt--rreettuurrnn

              Tells the compiler to return struct and union  values  in
              registers when possible.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              This option tells the compiler to return struct and union
              values in registers when possible.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffsshhoorrtt--eennuummss

              Tells  the  compiler  to allocate as many bytes as needed
              for enumerated types.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler allocates a default number
                                of bytes for enumerated types.

              DDeessccrriippttiioonn::

              This option tells the compiler to allocate as many  bytes
              as needed for enumerated types.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffssoouurrccee--aassmm

              Produces  an  assembly  listing  with source code annota-
              tions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  source  code  annotations appear in
                                the assembly listing file,  if  one  is
                                produced.

              DDeessccrriippttiioonn::

              This option produces an assembly listing file with source
              code annotations. The assembly  listing  file  shows  the
              source code as interspersed comments.

              To  use  this  option,  you  must also specify option -S,
              which causes an assembly listing to be generated.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffssttaacckk--pprrootteeccttoorr--aallll

       --ffnnoo--ssttaacckk--pprrootteeccttoorr--aallll

              Enables  or  disables  stack  overflow  security   checks
              including functions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-stack-protector-all
                                Stack overflow security checks, includ-
                                ing functions, are disabled.

              DDeessccrriippttiioonn::

              Enables   or  disables  stack  overflow  security  checks
              including functions.  These checks are enabled  when  you
              specify -fstack-protector-all.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffssttaacckk--sseeccuurriittyy--cchheecckk

       --ffnnoo--ssttaacckk--sseeccuurriittyy--cchheecckk

              Determines  whether  the  compiler  generates  code  that
              detects some buffer overruns.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-stack-security-check
                                The  compiler  does  not  detect buffer
                                overruns.

              DDeessccrriippttiioonn::

              This option determines  whether  the  compiler  generates
              code that detects some buffer overruns that overwrite the
              return address. This is a common technique for exploiting
              code that does not enforce buffer size restrictions.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -f[no-]stack-protector

       --ffssyynnttaaxx--oonnllyy

              Tells the compiler to check only for correct syntax.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Normal compilation is performed.

              DDeessccrriippttiioonn::

              This  option tells the compiler to check only for correct
              syntax. No object file is produced.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --fftteemmppllaattee--ddeepptthh--nn

              Control  the  depth  in  which  recursive  templates  are
              expanded.

              AArrgguummeennttss::

              _n                 The number of recursive templates  that
                                are expanded.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Control  the  depth  in  which  recursive  templates  are
              expanded. On Linux*, this option  is  supported  only  by
              invoking the compiler with icpc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffttllss--mmooddeell==mmooddeell

              Changes the thread local storage (TLS) model.

              AArrgguummeennttss::

              _m_o_d_e_l             Determines  the  TLS  model used by the
                                compiler. Possible values are:

                                global-dynamic Generates a generic  TLS
                                               code.  The  code  can be
                                               used everywhere and  the
                                               code  can  access  vari-
                                               ables  defined  anywhere
                                               else.    This    setting
                                               causes the largest  size
                                               code to be generated and
                                               uses the most  run  time
                                               to produce.

                                local-dynamic  Generates  an  optimized
                                               TLS code.  To  use  this
                                               setting,             the
                                               thread-local   variables
                                               must  be  defined in the
                                               same  object  in   which
                                               they are referenced.

                                initial-exec   Generates a restrictive,
                                               optimized TLS  code.  To
                                               use  this  setting,  the
                                               thread-local   variables
                                               accessed must be defined
                                               in one  of  the  modules
                                               available  to  the  pro-
                                               gram.

                                local-exec     Generates    the    most
                                               restrictive TLS code. To
                                               use  this  setting,  the
                                               thread-local   variables
                                               must be defined  in  the
                                               executable.

              DDeeffaauulltt::

              OFF               The  compiler  uses  default heuristics
                                when determining the thread-local stor-
                                age model.

              DDeessccrriippttiioonn::

              This option changes the thread local storage (TLS) model.
              Thread-local storage is a mechanism  by  which  variables
              are  allocated  in  a way that causes one instance of the
              variable per extant thread.

              For more information on the  thread-storage  localization
              models, see the appropriate gcc* documentation.

              For  more  information on the thread-storage localization
              models, see the appropriate clang* documentation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffttrraappuuvv

              Initializes stack local variables to an unusual value  to
              aid error detection.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not initialize  local
                                variables.

              DDeessccrriippttiioonn::

              This  option  initializes  stack  local  variables  to an
              unusual value to aid  error  detection.  Normally,  these
              local variables should be initialized in the application.
              It also unmasks the floating-point invalid exception.

              The option sets any uninitialized  local  variables  that
              are  allocated  on the stack to a value that is typically
              interpreted  as  a  very  large  integer  or  an  invalid
              address. References to these variables are then likely to
              cause run-time errors that can  help  you  detect  coding
              errors.

              This  option sets option -g (Linux* OS and OS X*) and /Zi
              or /Z7 (Windows* OS), which  changes  the  default  opti-
              mization  level from O2 to -O0 (Linux OS and OS X) or /Od
              (Windows OS). You can override this effect by  explicitly
              specifying an O option setting.

              If  option  O2 and option -ftrapuv (Linux OS and OS X) or
              /Qtrapuv (Windows OS) are used together, you should spec-
              ify  option  -fp-speculation  safe (Linux OS and OS X) or
              /Qfp-speculation:safe (Windows OS) to prevent  exceptions
              resulting  from speculated floating-point operations from
              being trapped.

              For more details on using options -ftrapuv  and  /Qtrapuv
              with  compiler  option  O,  see  the  article in Intel(R)
              Developer Zone titled Don't optimize when using  -ftrapuv
              for uninitialized variable detection.

              Another  way  to  detect uninitialized local scalar vari-
              ables is by specifying keyword uninit for option check.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffttzz

       --nnoo--ffttzz

              Flushes denormal results to zero.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -ftz              Denormal results are flushed to zero.

                                Every  optimization  option  O   level,
                                except O0, sets [Q]ftz.

              DDeessccrriippttiioonn::

              This  option  flushes  denormal  results to zero when the
              application is in the  gradual  underflow  mode.  It  may
              improve performance if the denormal values are not criti-
              cal to your application's behavior.

              The [Q]ftz option has no effect during compile-time opti-
              mization.

              The  [Q]ftz  option  sets  or  resets the FTZ and the DAZ
              hardware flags. If  FTZ  is  ON,  denormal  results  from
              floating-point  calculations  will  be  set  to the value
              zero. If FTZ is OFF, denormal results remain  as  is.  If
              DAZ  is  ON,  denormal  values  used  as  input to float-
              ing-point instructions will be treated as zero. If DAZ is
              OFF,  denormal  instruction inputs remain as is.  Systems
              using Intel(R) 64 architecture have both FTZ and DAZ. FTZ
              and DAZ are not supported on all IA-32 architectures.

              When  the  [Q]ftz  option  is used in combination with an
              SSE-enabling option on systems using  IA-32  architecture
              (for  example,  the  [Q]xSSE2  option), the compiler will
              insert code in the main routine to set FTZ and DAZ.  When
              [Q]ftz  is used without such an option, the compiler will
              insert code to  conditionally  set  FTZ/DAZ  based  on  a
              run-time  processor  check.  The negative form of  option
              [Q]ftz will prevent the compiler from inserting any  code
              that might set FTZ or DAZ.

              Option [Q]ftz only has an effect when the main program is
              being compiled. It sets the FTZ/DAZ mode for the process.
              The  initial  thread and any threads subsequently created
              by that process will operate in FTZ/DAZ mode.

              If this option produces undesirable results of the numer-
              ical  behavior  of your program, you can turn the FTZ/DAZ
              mode off by using -no-ftz or /Qftz- in the  command  line
              while still benefiting from the O3 optimizations.

              NNOOTTEE:: Option [Q]ftz is a performance option. Setting this
              option does not guarantee that all denormals in a program
              are  flushed  to  zero.  The option only causes denormals
              generated at run time to be flushed to zero.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffuunnrroollll--aallll--llooooppss

              Unroll all loops even if  the  number  of  iterations  is
              uncertain when the loop is entered.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Do not unroll all loops.

              DDeessccrriippttiioonn::

              Unroll all loops, even if the  number  of  iterations  is
              uncertain  when  the loop is entered. There may a perfor-
              mance impact with this option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffuunnssiiggnneedd--bbiittffiieellddss

       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss

              Determines whether the default bitfield type  is  changed
              to unsigned.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-unsigned-bitfields
                                The default bitfield type is signed.

              DDeessccrriippttiioonn::

              This option determines whether the default bitfield  type
              is changed to unsigned.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffuunnssiiggnneedd--cchhaarr

              Change default char type to unsigned.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Do  not  change  default  char  type to
                                unsigned.

              DDeessccrriippttiioonn::

              Change default char type to unsigned.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffvveerrbboossee--aassmm

       --ffnnoo--vveerrbboossee--aassmm

              Produces an  assembly  listing  with  compiler  comments,
              including options and version information.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-verbose-asm  No source code  annotations  appear  in
                                the  assembly  listing  file, if one is
                                produced.

              DDeessccrriippttiioonn::

              This option produces an assembly listing file  with  com-
              piler  comments,  including  options and version informa-
              tion.

              To use this option, you must also specify -S, which  sets
              -fverbose-asm.

              If  you  do  not  want  this default when you specify -S,
              specify -fno-verbose-asm.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffvviissiibbiilliittyy==kkeeyywwoorrdd

       --ffvviissiibbiilliittyy--kkeeyywwoorrdd==ffiilleennaammee

              Specifies the default visibility for  global  symbols  or
              the visibility for symbols in a file.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies the visibility setting.  Pos-
                                sible values are:

                                default        Sets    visibility    to
                                               default.

                                extern         Sets    visibility    to
                                               extern.

                                hidden         Sets  visibility to hid-
                                               den.

                                internal       Sets    visibility    to
                                               internal.

                                protected      Sets  visibility to pro-
                                               tected.  This  value  is
                                               not  available  on OS X*
                                               systems.

              _f_i_l_e_n_a_m_e          Is the pathname of  a  file  containing
                                the  list  of  symbols whose visibility
                                you want to set. The  symbols  must  be
                                separated  by whitespace (spaces, tabs,
                                or newlines).

              DDeeffaauulltt::

              -fvisibility=default
                                The compiler sets visibility of symbols
                                to default.

              DDeessccrriippttiioonn::

              This  option  specifies the default visibility for global
              symbols (syntax -fvisibility=_k_e_y_w_o_r_d) or  the  visibility
              for  symbols in a file (syntax -fvisibility-_k_e_y_w_o_r_d_=_f_i_l_e_-
              _n_a_m_e).

              Visibility  specified  by   -fvisibility-_k_e_y_w_o_r_d_=_f_i_l_e_n_a_m_e
              overrides  visibility  specified  by -fvisibility=_k_e_y_w_o_r_d
              for symbols specified in a file.

              OOppttiioonn            DDeessccrriippttiioonn

              -fvisibility=default -fvisibility-default_=_f_i_l_e_n_a_m_e
                                Sets visibility of symbols to  default.
                                This  means other components can refer-
                                ence the symbol, and the symbol defini-
                                tion can be overridden (preempted) by a
                                definition of the same name in  another
                                component.

              -fvisibility=extern -fvisibility-extern_=_f_i_l_e_n_a_m_e
                                Sets  visibility  of symbols to extern.
                                This means the  symbol  is  treated  as
                                though  it is defined in another compo-
                                nent. It also means that the symbol can
                                be  overridden  by  a definition of the
                                same name in another component.

              -fvisibility=hidden -fvisibility-hidden_=_f_i_l_e_n_a_m_e
                                Sets visibility of symbols  to  hidden.
                                This means that other components cannot
                                directly reference the symbol. However,
                                its address may be passed to other com-
                                ponents indirectly.

              -fvisibility=internal -fvisibility-internal_=_f_i_l_e_n_a_m_e
                                Sets visibility of symbols to internal.
                                This  means  that  the symbol cannot be
                                referenced outside its defining  compo-
                                nent,  either  directly  or indirectly.
                                The affected  functions  can  never  be
                                called  from  another module, including
                                through function pointers.

              -fvisibility=protected -fvisibility-protected_=_f_i_l_e_n_a_m_e
                                Sets  visibility  of  symbols  to  pro-
                                tected. This means other components can
                                reference the symbol, but it cannot  be
                                overridden  by a definition of the same
                                name in another component.  This  value
                                is not available on OS X* systems.

              If  an -fvisibility option is specified more than once on
              the command line, the last specification takes precedence
              over any others.

              If a symbol appears in more than one visibility _f_i_l_e_n_a_m_e,
              the setting with the least visibility takes precedence.

              The following shows the precedence of the visibility set-
              tings (from greatest to least visibility):

              · extern

              · default

              · protected

              · hidden

              · internal

              Note that extern visibility only applies to functions. If
              a variable symbol is specified as extern, it  is  assumed
              to be default.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffvviissiibbiilliittyy--iinnlliinneess--hhiiddddeenn

              Causes  inline  member  functions  (those  defined in the
              class declaration) to be marked hidden.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not cause inline mem-
                                ber functions to be marked hidden.

              DDeessccrriippttiioonn::

              Causes inline member  functions  (those  defined  in  the
              class  declaration)  to  be marked hidden. This option is
              particularly useful for templates.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss

              Determines whether the compiler places in the  DATA  sec-
              tion any variables explicitly initialized with zeros.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -fno-zero-initialized-in-bss
                                Variables explicitly  initialized  with
                                zeros  are  placed  in the BSS section.
                                This can save space  in  the  resulting
                                code.

              DDeessccrriippttiioonn::

              This option determines whether the compiler places in the
              DATA section any variables  explicitly  initialized  with
              zeros.

              If  option -fno-zero-initialized-in-bss (Linux* OS and OS
              X*) or /Qzero-initialized-in-bss- (Windows* OS) is speci-
              fied,  the  compiler places in the DATA section any vari-
              ables that are initialized to zero.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gg

              Tells the compiler to generate full debugging information
              in the object file or a project database (PDB) file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No debugging information is produced in
                                the object file or in a PDB file.

              DDeessccrriippttiioonn::

              Options  -g  (Linux*  OS and OS X*) and /Z7 (Windows* OS)
              tell the compiler to generate symbolic debugging informa-
              tion  in the object file, which increases the size of the
              object file. The /Zi option (Windows OS) tells  the  com-
              piler to generate symbolic debugging information in a PDB
              file.

              Two PDB files are created, one by the compiler,  and  one
              by the linker:

              · vc_x0.pdb, where _x represents the version of Visual C++,
                for example vc100.pdb.  This file stores all  debugging
                information for the individual OBJ files and resides in
                the same directory as the project makefile. If you want
                to change this name, use option /Fd.

              · _e_x_e_c_u_t_a_b_l_e_n_a_m_e.pdb  This file stores all debug informa-
                tion for the .exe file and resides in the debug  subdi-
                rectory.

              Each  time  it  creates  a .obj file, the compiler merges
              debug information into vc_x0.pdb.

              The linker  creates  _e_x_e_c_u_t_a_b_l_e_n_a_m_e.pdb,  which  contains
              debug  information  for the project's .exe file. The _e_x_e_-
              _c_u_t_a_b_l_e_n_a_m_e.pdb file  contains  full  debug  information,
              including function prototypes, not just the type informa-
              tion found in vc_x0.pdb. Both PDB files allow  incremental
              updates. The linker also embeds the path to the .pdb file
              in the .exe or .dll file that it creates.

              The compiler does not support the generation of debugging
              information  in  assemblable  files. If you specify these
              options, the resulting object file will contain debugging
              information, but the assemblable file will not.

              These options turn off O2 and make O0 (Linux OS and OS X)
              or Od (Windows OS) the default unless O2 (or  higher)  is
              explicitly specified in the same command line.

              On  Linux*  OS and OS X*, specifying the -g or -O0 option
              sets the -fno-omit-frame-pointer option.  On  Linux*  OS,
              the  -debug  inline-debug-info  option will be enabled by
              default if you compile with optimizations (option -O2  or
              higher) and debugging is enabled (option -g).

              NNOOTTEE::  When option -g is specified, debugging information
              is generated in the DWARF Version 3  format.  Older  ver-
              sions  of some analysis tools may require applications to
              be built with the  -gdwarf-2  option  to  ensure  correct
              operation.

              AAlltteerrnnaattee OOppttiioonnss::

              /Zi               Linux and OS X: None

       --gg00

              Disables generation of symbolic debug information.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  generates symbolic debug
                                information.

              DDeessccrriippttiioonn::

              This option disables generation of symbolic debug  infor-
              mation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggcccc

       --nnoo--ggcccc

       --ggcccc--ssyyss

              Determines  whether  certain  GNU  macros  are defined or
              undefined.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -gcc              The  compiler  defines  the  GNU macros
                                __GNUC__,      __GNUC_MINOR__,      and
                                __GNUC_PATCHLEVEL__

              DDeessccrriippttiioonn::

              This  option  determines whether the GNU macros __GNUC__,
              __GNUC_MINOR__, and __GNUC_PATCHLEVEL__  are  defined  or
              undefined.

              OOppttiioonn            DDeessccrriippttiioonn

              -gcc              Defines GNU macros.

              -no-gcc           Undefines GNU macros.

              -gcc-sys          Defines GNU macros only during compila-
                                tion of system headers.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggcccc--iinncclluuddee--ddiirr ((LL**XX oonnllyy))

       --nnoo--ggcccc--iinncclluuddee--ddiirr ((LL**XX oonnllyy))

              Controls whether the gcc-specific  include  directory  is
              put into the system include path.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -gcc-include-dir  The gcc-specific include  directory  is
                                put into the system include path.

              DDeessccrriippttiioonn::

              This  option  controls  whether  the gcc-specific include
              directory is put into the system include path.

              If  you  specify  -no-gcc-include-dir,  the  gcc-specific
              include directory will not be put into the system include
              path.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggcccc--nnaammee==nnaammee ((LL**XX oonnllyy))

              Specifies the name of the gcc  compiler  that  should  be
              used to set up the environment for C compilations.

              AArrgguummeennttss::

              _n_a_m_e              Is the name of the gcc compiler to use.
                                It  can  include the path where the gcc
                                compiler is located.

              DDeeffaauulltt::

              OFF               The compiler uses the PATH  setting  to
                                find the gcc compiler and resolve envi-
                                ronment settings.

              DDeessccrriippttiioonn::

              This option specifies the name of the gcc  compiler  that
              should  be  used to set up the environment for C compila-
              tions.  If you do not specify a path, the  compiler  will
              search  the  PATH settings for the compiler name you pro-
              vide.

              This  option  is  helpful  when  you  are  referencing  a
              non-standard gcc installation.

              The C++ equivalent to option -gcc-name is -gxx-name.

              AAlltteerrnnaattee OOppttiioonnss::

              None

              Enables  generation  of  debugging  information using the
              DWARF Version 2 format. For more information, see  option
              gdwarf.

       --ggddwwaarrff--nn

              Lets  you  specify a DWARF Version format when generating
              debug information.

              AArrgguummeennttss::

              _n                 Is  a  value denoting the DWARF Version
                                format to use. Possible values are:

                                2              Generates debug informa-
                                               tion   using  the  DWARF
                                               Version 2 format.

                                3              Generates debug informa-
                                               tion   using  the  DWARF
                                               Version 3 format.

                                4              Generates debug informa-
                                               tion   using  the  DWARF
                                               Version 4  format.  This
                                               setting  is  only avail-
                                               able on Linux* OS.

              DDeeffaauulltt::

              OFF               No debug information is generated. How-
                                ever,  if  compiler option -g is speci-
                                fied, debugging information  is  gener-
                                ated in the DWARF Version 3 format.

              DDeessccrriippttiioonn::

              This  option lets you specify a DWARF Version format when
              generating debug information.

              Note that older  versions  of  some  analysis  tools  may
              require  applications  to  be  built  with  the -gdwarf-2
              option to ensure correct operation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gglloobbaall--hhooiisstt

       --nnoo--gglloobbaall--hhooiisstt

              Enables certain optimizations that can move memory  loads
              to  a  point  earlier in the program execution than where
              they appear in the source.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -global-hoist     Certain optimizations are enabled  that
                                can move memory loads.

              DDeessccrriippttiioonn::

              This  option  enables certain optimizations that can move
              memory loads to a point earlier in the program  execution
              than  where  they  appear  in  the source. In most cases,
              these optimizations are safe and can improve performance.

              The negative form of the option is useful for some appli-
              cations, such as those that  use  shared  or  dynamically
              mapped  memory,  which  can  fail  if a load is moved too
              early in the execution stream (for  example,  before  the
              memory is mapped).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggnnuu--pprreeffiixx==pprreeffiixx ((LL**XX oonnllyy))

              Lets you specify a prefix that will be added to the names
              of gnu utilities called from the compiler.

              AArrgguummeennttss::

              _p_r_e_f_i_x            Is  a  string that prepends the name of
                                gnu tools  called  from  the  compiler.
                                The  value depends on the gnu toolchain
                                used for a particular operating system.
                                For example, for Wind River* Linux 6.x,
                                the    _p_r_e_f_i_x     value     will     be
                                x86_64-wrs-linux-.  You  must  append a
                                hyphen to _p_r_e_f_i_x only if the  toolchain
                                prefix ends with a hyphen.

                                You can specify a short name or a path-
                                name:

                                · short  name:  -gnu-prefix=_p_r_e_f_i_x   In
                                  this  case,  the  compiler calls _p_r_e_-
                                  _f_i_x_<_g_n_u___u_t_i_l_i_t_y_>      instead      of
                                  _<_g_n_u___u_t_i_l_i_t_y_>.  The utility with this
                                  name should be in the  PATH  environ-
                                  ment variable.

                                · pathname:         -gnu-prefix=/direc-
                                  tory_name/_p_r_e_f_i_x In  this  case,  the
                                  compiler  calls  /directory_name/_p_r_e_-
                                  _f_i_x_<_g_n_u___u_t_i_l_i_t_y_>.  The  utility  with
                                  this name will be invoked by its full
                                  pathname.

              DDeeffaauulltt::

              OFF               The compiler  calls  gnu  utilities  by
                                their  short  names, and looks for them
                                in the path specified by the PATH envi-
                                ronment variable.

              DDeessccrriippttiioonn::

              This  option lets you specify a prefix that will be added
              to the names of gnu utilities called from  the  compiler.
              This  option  is  available for Linux*-targeted compilers
              but the host may be either Windows* OS or Linux* OS.

              If you specify option -gnu-prefix with  option  -gcc-name
              (or -gxx-name), the following occurs:

              · If  a  name  specified in -gcc-name (or -gxx-name) con-
                tains a full path to a binary then  option  -gnu-prefix
                has  no  effect  on  the specified name; other binutils
                will have the prefix.

              · Otherwise, option -gnu-prefix is applied  to  the  name
                specified in -gcc-name (or -gxx-name).

              The  above  approach  provides  flexibility to specify an
              alternative gcc name outside of the default toolchain. At
              the  same  time,  if  a  short name is provided in option
              -gcc-name, it is assumed to be  a  part  of  the  default
              toolchain and a prefix will be added.

              Instead  of using option -gnu-prefix, you can create sym-
              links for  the  short  names  of  gnu  utilities  in  the
              toolchain  and  add  them to the PATH. For example, ld-->
              i686-wrs-linux-gnu-ld.

              NNOOTTEE:: Even though this option is not supported for a Win-
              dows-to-Windows  native  compiler,  it is supported for a
              Windows-host to Linux-target compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggrreeccoorrdd--ggcccc--sswwiittcchheess ((LL**XX oonnllyy))

              Causes the command line options that were used to  invoke
              the   compiler  to  be  appended  to  the  DW_AT_producer
              attribute in DWARF debugging information.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The command line options that were used
                                to invoke the compiler are not appended
                                to  the  DW_AT_producer  attribute   in
                                DWARF debugging information.

              DDeessccrriippttiioonn::

              This  option  causes  the  command line options that were
              used to  invoke  the  compiler  to  be  appended  to  the
              DW_AT_producer  attribute in DWARF debugging information.

              The options are concatenated with  whitespace  separating
              them from each other and from the compiler version.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee[[==nn]]

              Lets  you set a level of guidance for auto-vectorization,
              auto parallelism, and data transformation.

              AArrgguummeennttss::

              _n                 Is  an  optional  value  specifying the
                                level of guidance to be provided.

                                The values available are 1  through  4.
                                Value  1  indicates a standard level of
                                guidance. Value 4  indicates  the  most
                                advanced  level  of  guidance.  If _n is
                                omitted, the default is 4.

              DDeeffaauulltt::

              OFF               You do not receive guidance  about  how
                                to  improve  optimizations  for  paral-
                                lelism, vectorization, and data  trans-
                                formation.

              DDeessccrriippttiioonn::

              This option lets you set a level of guidance (advice) for
              auto-vectorization, auto parallelism, and data  transfor-
              mation.  It causes the compiler to generate messages sug-
              gesting ways to improve these optimizations.

              When this option is specified, the compiler does not pro-
              duce any objects or executables.

              You  must  also specify the [Q]parallel option to receive
              auto parallelism guidance.

              You can set levels of guidance for the  individual  guide
              optimizations by specifying one of the following options:

              data transformation
                                [Q]guide-data-trans

              auto parallelism  [Q]guide-par

              auto-vectorization
                                [Q]guide-vec

              If you specify the [Q]guide option and also  specify  one
              of  the  options setting a level of guidance for an indi-
              vidual guide optimization, the value set for the individ-
              ual  guide  optimization will override the setting speci-
              fied in [Q]guide.

              If you do not specify [Q]guide, but specify  one  of  the
              options  setting  a  level  of guidance for an individual
              guide optimization, option [Q]guide is enabled  with  the
              greatest  value  passed among any of the three individual
              guide optimizations specified.

              In debug mode, this option has no effect unless option O2
              (or  higher)  is explicitly specified in the same command
              line.

              NNOOTTEE:: The compiler speculatively  performs  optimizations
              as  part  of  guide  analysis.  As a result, when you use
              guided auto-parallelism options with the [Q]vec-report or
              [Q]par-report  options,  the compiler generates "LOOP WAS
              VECTORIZED" or similar messages as if the compilation was
              performed with the recommended changes.

              You  should  use  extra  caution when interpreting output
              from the [Q]vec-report or [Q]par-report options when  the
              compilation is performed with the [Q]guide option.

              NNOOTTEE:: You can specify [Q]diag-disable to prevent the com-
              piler from issuing one or more diagnostic messages.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--ddaattaa--ttrraannss[[==nn]]

              Lets you set a level of guidance for data transformation.

              AArrgguummeennttss::

              _n                 Is an  optional  value  specifying  the
                                level of guidance to be provided.

                                The  values  available are 1 through 4.
                                Value 1 indicates a standard  level  of
                                guidance.  Value  4  indicates the most
                                advanced level of  guidance.  If  _n  is
                                omitted, the default is 4.

              DDeeffaauulltt::

              OFF               You  do  not receive guidance about how
                                to  improve  optimizations   for   data
                                transformation.

              DDeessccrriippttiioonn::

              This  option  lets  you  set a level of guidance for data
              transformation. It causes the compiler to  generate  mes-
              sages suggesting ways to improve that optimization.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--ffiillee[[==ffiilleennaammee]]

              Causes  the results of guided auto parallelism to be out-
              put to a file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is  the name of the file for output. It
                                can include a path.

              DDeeffaauulltt::

              OFF               Messages that are generated  by  guided
                                auto  parallelism are output to stderr.

              DDeessccrriippttiioonn::

              This option causes the results of guided auto parallelism
              to be output to a file.

              This  option  is  ignored  unless you also specify one or
              more of the following options:

              · [Q]guide

              · [Q]guide-vec

              · [Q]guide-data-trans

              · [Q]guide-par

              If you do not specify a path, the file is placed  in  the
              current working directory.

              If  there  is  already  a file named _f_i_l_e_n_a_m_e, it will be
              overwritten.

              You can include a file extension in _f_i_l_e_n_a_m_e.  For  exam-
              ple,  if  _f_i_l_e_._t_x_t  is  specified, the name of the output
              file is _f_i_l_e_._t_x_t. If you do not provide a file extension,
              the name of the file is _f_i_l_e_n_a_m_e_._g_u_i_d_e.

              If  you  do not specify _f_i_l_e_n_a_m_e, the name of the file is
              _n_a_m_e_-_o_f_-_t_h_e_-_f_i_r_s_t_-_s_o_u_r_c_e_-_f_i_l_e_._g_u_i_d_e.  This  is  also  the
              name  of the file if the name specified for _f_i_l_e_n_a_m_e con-
              flicts with a source file name provided  in  the  command
              line.

              NNOOTTEE::  If  you  specify  the [Q]guide-file option and you
              also specify option [Q]guide-file-append, the last option
              specified on the command line takes precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--ffiillee--aappppeenndd[[==ffiilleennaammee]]

              Causes  the  results  of  guided  auto  parallelism to be
              appended to a file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is  the name of the file to be appended
                                to. It can include a path.

              DDeeffaauulltt::

              OFF               Messages that are generated  by  guided
                                auto  parallelism are output to stderr.

              DDeessccrriippttiioonn::

              This option causes the results of guided auto parallelism
              to be appended to a file.

              This  option  is  ignored  unless you also specify one or
              more of the following options:

              · [Q]guide

              · [Q]guide-vec

              · [Q]guide-data-trans

              · [Q]guide-par

              If you do not specify a  path,  the  compiler  looks  for
              _f_i_l_e_n_a_m_e in the current working directory.

              If  _f_i_l_e_n_a_m_e is not found, then a new file with that name
              is created in the current working directory.

              If you do not specify a file extension, the name  of  the
              file is _f_i_l_e_n_a_m_e_._g_u_i_d_e.

              If  the  name  specified  for  _f_i_l_e_n_a_m_e  conflicts with a
              source file name provided in the command line,  the  name
              of the file is _n_a_m_e_-_o_f_-_t_h_e_-_f_i_r_s_t_-_s_o_u_r_c_e_-_f_i_l_e_._g_u_i_d_e.

              NNOOTTEE::  If you specify the [Q]guide-file-append option and
              you also specify option  [Q]guide-file, the  last  option
              specified on the command line takes precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       gguuiiddee--ooppttss==ssttrriinngg

              Tells  the  compiler to analyze certain code and generate
              recommendations that may improve optimizations.

              AArrgguummeennttss::

              _s_t_r_i_n_g            Is  the  text denoting the code to ana-
                                lyze. The  string  must  appear  within
                                quotes.  It can take one or more of the
                                following forms: _f_i_l_e_n_a_m_e_f_i_l_e_n_a_m_e, _r_o_u_-
                                _t_i_n_e_f_i_l_e_n_a_m_e, _r_a_n_g_e [, _r_a_n_g_e]...  _f_i_l_e_-
                                _n_a_m_e, _r_o_u_t_i_n_e, _r_a_n_g_e [, _r_a_n_g_e]...

                                If you specify more  than  one  of  the
                                above  forms  in  a string, a semicolon
                                must appear between each form.  If  you
                                specify   more  than  one  _r_a_n_g_e  in  a
                                string, a  comma  must  appear  between
                                each  _r_a_n_g_e. Optional blanks can follow
                                each parameter in the forms  above  and
                                they  can  also  follow  each form in a
                                string.

                                _f_i_l_e_n_a_m_e       Specifies the name of  a
                                               file  to be analyzed. It
                                               can include a path.

                                               If you do not specify  a
                                               path, the compiler looks
                                               for filename in the cur-
                                               rent  working directory.

                                _r_o_u_t_i_n_e        Specifies the name of  a
                                               routine  to be analyzed.
                                               You can include an iden-
                                               tifying parameter.

                                               The  name, including any
                                               parameter,    must    be
                                               enclosed    in    single
                                               quotes.

                                               The  compiler  tries  to
                                               uniquely   identify  the
                                               routine that corresponds
                                               to the specified routine
                                               name. It may select mul-
                                               tiple  routines  to ana-
                                               lyze, especially if  the
                                               following is true:

                                               · More  than one routine
                                                 has the specified rou-
                                                 tine name, so the rou-
                                                 tine     cannot     be
                                                 uniquely identified.

                                               · No  parameter informa-
                                                 tion has  been  speci-
                                                 fied   to  narrow  the
                                                 number   of   routines
                                                 selected as matches.

                                _r_a_n_g_e          Specifies   a  range  of
                                               line numbers to  analyze
                                               in  the  file or routine
                                               specified.   The   _r_a_n_g_e
                                               must   be  specified  in
                                               integers in the form:

                                               _f_i_r_s_t___l_i_n_e___n_u_m_-
                                               _b_e_r_-_l_a_s_t___l_i_n_e___n_u_m_b_e_r

                                               The  hyphen  between the
                                               line     numbers      is
                                               required.

              DDeeffaauulltt::

              OFF               You  do  not receive guidance on how to
                                improve optimizations.  However, if you
                                specify  the  [Q]guide option, the com-
                                piler analyzes and generates  recommen-
                                dations for all the code in an applica-
                                tion

              DDeessccrriippttiioonn::

              This option tells the compiler to  analyze  certain  code
              and  generate  recommendations that may improve optimiza-
              tions.

              This option is ignored unless you  also  specify  one  or
              more of the following options:

              · [Q]guide

              · [Q]guide-vec

              · [Q]guide-data-trans

              · [Q]guide-par

              When  the  [Q]guide-opt option is specified, a message is
              output that includes which parts of the input  files  are
              being  analyzed. If a routine is selected to be analyzed,
              the complete routine name will appear  in  the  generated
              message.

              When inlining is involved, you should specify callee line
              numbers. Generated messages also use callee line numbers.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--ppaarr[[==nn]]

              Lets you set a level of guidance for auto parallelism.

              AArrgguummeennttss::

              _n                 Is  an  optional  value  specifying the
                                level of guidance to be provided.

                                The values available are 1  through  4.
                                Value  1  indicates a standard level of
                                guidance. Value 4  indicates  the  most
                                advanced  level  of  guidance.  If _n is
                                omitted, the default is 4.

              DDeeffaauulltt::

              OFF               You do not receive guidance  about  how
                                to  improve  optimizations  for  paral-
                                lelism.

              DDeessccrriippttiioonn::

              This option lets you set a level  of  guidance  for  auto
              parallelism.  It causes the compiler to generate messages
              suggesting ways to improve that optimization.

              You must also specify the [Q]parallel option  to  receive
              auto parallelism guidance.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--pprrooffiillee==ffiilleennaammee||ddiirr [[,, [[ffiilleennaammee||ddiirr]]......]]

              Specifies  a  loop profiler data file (or a set of files)
              when used with option -guide or /Qguide.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is  an  .xml  file  created from a loop
                                profiler run.

              _d_i_r               Is a directory  that  contains  one  or
                                more  .xml  files  from a loop profiler
                                run.

              DDeeffaauulltt::

              OFF               When the [Q]guide option is  specified,
                                the  guide  region is the whole file or
                                the   region   specified   by    option
                                [Q]guide-opts.

              DDeessccrriippttiioonn::

              This option specifies a loop profiler data file (or a set
              of files) when used with the [Q]guide option.

              This option has no effect unless the [Q]guide option  has
              been  specified.  Option  [Q]guide-profile helps you take
              advantage of the  [Q]guide  option  to  more  efficiently
              optimize  your  applications  for auto parallelism and/or
              vectorization.

              The loop profile data file can be collected by using  one
              of the following options:

              · [Q]profile-loops

              · [Q]profile-functions

              When  the  data  is from [Q]profile-loops, the setting of
              the guide regions will be based upon the hottest loops.

              When the data is  from  [Q]profile-functions,  the  guide
              region will be the entire function containing the hottest
              functions.

              If you specify options  [Q]guide-opts  and  [Q]guide-pro-
              file, the compiler issues an error message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --gguuiiddee--vveecc[[==nn]]

              Lets  you set a level of guidance for auto-vectorization.

              AArrgguummeennttss::

              _n                 Is  an  optional  value  specifying the
                                level of guidance to be provided.

                                The values available are 1  through  4.
                                Value  1  indicates a standard level of
                                guidance. Value 4  indicates  the  most
                                advanced  level  of  guidance.  If _n is
                                omitted, the default is 4.

              DDeeffaauulltt::

              OFF               You do not receive guidance  about  how
                                to improve optimizations for vectoriza-
                                tion.

              DDeessccrriippttiioonn::

              This  option  lets  you  set  a  level  of  guidance  for
              auto-vectorization.  It  causes  the compiler to generate
              messages suggesting ways to improve that optimization.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ggxxxx--nnaammee==nnaammee ((LL**XX oonnllyy))

              Specifies the name of the g++  compiler  that  should  be
              used to set up the environment for C++ compilations.

              AArrgguummeennttss::

              _n_a_m_e              Is the name of the g++ compiler to use.
                                It  can  include the path where the g++
                                compiler is located.

              DDeeffaauulltt::

              OFF               The compiler uses the PATH  setting  to
                                find the g++ compiler and resolve envi-
                                ronment settings.

              DDeessccrriippttiioonn::

              This option specifies the name of the g++  compiler  that
              should be used to set up the environment for C++ compila-
              tions.  If you do not specify a path, the  compiler  will
              search  the  PATH settings for the compiler name you pro-
              vide.

              The C equivalent to option -gxx-name is -gcc-name.

              NNOOTTEE:: When compiling a C++ file with icc, g++ is used  to
              get the environment.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --HH

              Tells  the compiler to display the include file order and
              continue compilation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Compilation occurs as usual.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler to display the include
              file order and continue compilation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --hheellpp[[ccaatteeggoorryy]]

              Displays all available compiler options or a category  of
              compiler options.

              AArrgguummeennttss::

              _c_a_t_e_g_o_r_y          Is a category or class  of  options  to
                                display. Possible values are:

                                advanced       Displays  advanced opti-
                                               mization  options   that
                                               allow   fine  tuning  of
                                               compilation   or   allow
                                               control   over  advanced
                                               features  of  the   com-
                                               piler.

                                codegen        Displays Code Generation
                                               options.

                                compatibility  Displays options affect-
                                               ing language compatibil-
                                               ity.

                                component      Displays   options   for
                                               component control.

                                data           Displays options related
                                               to   interpretation   of
                                               data  in programs or the
                                               storage of data.

                                deprecated     Displays  options   that
                                               have been deprecated.

                                diagnostics    Displays   options  that
                                               affect  diagnostic  mes-
                                               sages  displayed  by the
                                               compiler.

                                float          Displays  options   that
                                               affect    floating-point
                                               operations.

                                help           Displays all the  avail-
                                               able help categories.

                                inline         Displays   options  that
                                               affect inlining.

                                ipo            Displays Interprocedural
                                               Optimization       (IPO)
                                               options

                                language       Displays options affect-
                                               ing  the behavior of the
                                               compiler  language  fea-
                                               tures.

                                link           Displays    linking   or
                                               linker options.

                                misc           Displays   miscellaneous
                                               options  that do not fit
                                               within other categories.

                                openmp         Displays OpenMP and par-
                                               allel         processing
                                               options.

                                opt            Displays   options  that
                                               help you optimize  code.

                                output         Displays   options  that
                                               provide   control   over
                                               compiler output.

                                pgo            Displays  Profile Guided
                                               Optimization       (PGO)
                                               options.

                                preproc        Displays   options  that
                                               affect     preprocessing
                                               operations.

                                reports        Displays   options   for
                                               optimization reports.

              DDeeffaauulltt::

              OFF               No list is displayed unless  this  com-
                                piler option is specified.

              DDeessccrriippttiioonn::

              This  option displays all available compiler options or a
              category of compiler options. If category is  not  speci-
              fied,  all  available  compiler options are displayed. On
              Linux* systems, this option  can  also  be  specified  as
              --help.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --hheellpp--pprraaggmmaa

              Displays all supported pragmas.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  list  is displayed unless this com-
                                piler option is specified.

              DDeessccrriippttiioonn::

              This option displays  all  supported  pragmas  and  shows
              their syntaxes.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --IIddiirr

              Specifies  an  additional directory to search for include
              files.

              AArrgguummeennttss::

              _d_i_r               Is  the  additional  directory  for the
                                search.

              DDeeffaauulltt::

              OFF               The default directory is  searched  for
                                include files.

              DDeessccrriippttiioonn::

              This  option  specifies an additional directory to search
              for include files. To specify multiple directories on the
              command  line,  repeat the include option for each direc-
              tory.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iicccc

       --nnoo--iicccc

              Determines whether  certain  Intel  compiler  macros  are
              defined or undefined.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -icc or /Qicl     The __INTEL_COMPILER macros are set  to
                                represent  the  current  version of the
                                compiler.

              DDeessccrriippttiioonn::

              This option determines  whether  certain  Intel  compiler
              macros are defined or undefined.

              If  you  specify  option -no-icc or /Qicl- , the compiler
              undefines the __INTEL_COMPILER macros. These  macros  are
              defined by default or by specifying -icc or /Qicl.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iiddiirraafftteerrddiirr

              Adds  a directory to the second include file search path.

              AArrgguummeennttss::

              _d_i_r               Is the name of the directory to add.

              DDeeffaauulltt::

              OFF               Include  file search paths include cer-
                                tain default directories.

              DDeessccrriippttiioonn::

              This option adds a directory to the second  include  file
              search path (after -I).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iimmaaccrrooss ffiilleennaammee

              Allows a header to be specified that is included in front
              of the other headers in the translation unit.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Name of header file.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Allows a header to be specified that is included in front
              of the other headers in the translation unit.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--ccaalllloocc

       --nnoo--iinnlliinnee--ccaalllloocc

              Tells the compiler to inline calls to calloc()  as  calls
              to malloc() and memset().

              AArrcchhiitteeccttuurreess:: All

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-inline-calloc The compiler inlines calls to  calloc()
                                as calls to calloc().

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to inline calls to cal-
              loc() as calls to malloc()  and  memset().  This  enables
              additional  memset()  optimizations.  For example, it can
              enable inlining as a sequence of  store  operations  when
              the size is a compile time constant.

              NNOOTTEE::  Many  routines  in the supplied libraries are more
              highly optimized for Intel(R)  microprocessors  than  for
              non-Intel microprocessors


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--ffaaccttoorr==nn

       --nnoo--iinnlliinnee--ffaaccttoorr

              Specifies   the  percentage  multiplier  that  should  be
              applied to all inlining options that define upper limits.

              AArrgguummeennttss::

              _n                 Is  a  positive  integer specifying the
                                percentage value. The default value  is
                                100 (a factor of 1).

              DDeeffaauulltt::

              -inline-factor=100
                                The  compiler  uses a percentage multi-
                                plier of 100.

              DDeessccrriippttiioonn::

              This option  specifies  the  percentage  multiplier  that
              should  be  applied  to  all inlining options that define
              upper limits:

              · [Q]inline-max-size

              · [Q]inline-max-total-size

              · [Q]inline-max-per-routine

              · [Q]inline-max-per-compile

              The  [Q]inline-factor option takes the default value  for
              each  of the above options and multiplies it by _n divided
              by 100. For example, if 200 is  specified,  all  inlining
              options that define upper limits are multiplied by a fac-
              tor of 2. This option is useful if you  do  not  want  to
              individually increase each option limit.

              If you specify -no-inline-factor (Linux* OS and OS X*) or
              /Qinline-factor- (Windows* OS), the following occurs:

              · Every function is considered to be a  small  or  medium
                function; there are no large functions.

              · There  is  no limit to the size a routine may grow when
                inline expansion is performed.

              · There is no limit to the number of times  some  routine
                may be inlined into a particular routine.

              · There  is  no limit to the number of times inlining can
                be applied to a compilation unit.

              To see compiler values  for  important  inlining  limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this  option  to  increase  default
              limits,  the  compiler may do so much additional inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--ffoorrcceeiinnlliinnee

              Instructs  the  compiler  to  force inlining of functions
              suggested for inlining whenever the compiler  is  capable
              doing so.

              DDeeffaauulltt::

              OFF               The  compiler  uses  default heuristics
                                for inline routine expansion.

              DDeessccrriippttiioonn::

              This option instructs the compiler to force  inlining  of
              functions suggested for inlining whenever the compiler is
              capable doing so.

              Without  this  option,  the  compiler  treats   functions
              declared  with  the inline keyword as merely being recom-
              mended for inlining. When this option is used, it  is  as
              if they were declared with the keyword __forceinline key-
              word.

              NNOOTTEE:: Because C++ member functions whose definitions  are
              included  in  the class declaration are considered inline
              functions by default, using this option  will  also  make
              these member functions "forceinline" functions.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN::  When  you use this option to change the meaning
              of inline to "forceinline", the compiler may do  so  much
              additional inlining that it runs out of memory and termi-
              nates with an "out of memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--lleevveell==nn

              Specifies the level of inline function expansion.

              AArrgguummeennttss::

              _n                 Is the inline function expansion level.
                                Possible values are 0, 1, and 2.

              DDeeffaauulltt::

              -inline-level=2   This  is  the  default  if option O2 is
                                specified or is in effect  by  default.
                                On  Windows*  systems, this is also the
                                default if option O3 is specified.

              -inline-level=0   This  is  the  default  if  option  -O0
                                (Linux* OS and OS X*) is specified.

              DDeessccrriippttiioonn::

              This option specifies the level of inline function expan-
              sion.  Inlining  procedures  can  greatly   improve   the
              run-time performance of certain programs.

              OOppttiioonn            DDeessccrriippttiioonn

              -inline-level=0 or /Ob0
                                Disables inlining of user-defined func-
                                tions. Note  that  statement  functions
                                are always inlined.

              -inline-level=1  or /Ob1
                                Enables inlining when an inline keyword
                                or an inline  attribute  is  specified.
                                Also  enables inlining according to the
                                C++ language.

              -inline-level=2  or /Ob2
                                Enables inlining of any function at the
                                compiler's discretion.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--mmaaxx--ppeerr--ccoommppiillee==nn

       --nnoo--iinnlliinnee--mmaaxx--ppeerr--ccoommppiillee

              Specifies  the  maximum  number  of times inlining may be
              applied to an entire compilation unit.

              AArrgguummeennttss::

              _n                 Is  a  positive  integer that specifies
                                the number of  times  inlining  may  be
                                applied.

              DDeeffaauulltt::

              -no-inline-max-per-compile
                                The  compiler  uses  default heuristics
                                for inline routine expansion.

              DDeessccrriippttiioonn::

              This option the maximum number of times inlining  may  be
              applied to an entire compilation unit. It limits the num-
              ber of times that inlining can be applied.

              For  compilations  using  Interprocedural   Optimizations
              (IPO),  the entire compilation is a compilation unit. For
              other compilations, a compilation unit is a file.

              If you specify -no-inline-max-per-compile (Linux* OS  and
              OS  X*) or /Qinline-max-per-compile- (Windows* OS), there
              is no limit to  the  number  of  times  inlining  may  be
              applied to a compilation unit.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this option to increase the default
              limit, the compiler may do so  much  additional  inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--mmaaxx--ppeerr--rroouuttiinnee==nn

       --nnoo--iinnlliinnee--mmaaxx--ppeerr--rroouuttiinnee

              Specifies the maximum number of  times  the  inliner  may
              inline into a particular routine.

              AArrgguummeennttss::

              _n                 Is a positive  integer  that  specifies
                                the maximum number of times the inliner
                                may inline into a particular routine.

              DDeeffaauulltt::

              -no-inline-max-per-routine
                                The compiler  uses  default  heuristics
                                for inline routine expansion.

              DDeessccrriippttiioonn::

              This  option  specifies  the  maximum number of times the
              inliner may inline into a particular routine.  It  limits
              the  number  of times that inlining can be applied to any
              routine.

              If you specify -no-inline-max-per-routine (Linux* OS  and
              OS  X*) or /Qinline-max-per-routine- (Windows* OS), there
              is no limit to the number of times some  routine  may  be
              inlined into a particular routine.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this option to increase the default
              limit, the compiler may do so  much  additional  inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--mmaaxx--ssiizzee==nn

       --nnoo--iinnlliinnee--mmaaxx--ssiizzee

              Specifies the lower  limit  for  the  size  of  what  the
              inliner considers to be a large routine.

              AArrgguummeennttss::

              _n                 Is a positive  integer  that  specifies
                                the  minimum  size  of what the inliner
                                considers to be a large routine.

              DDeeffaauulltt::

              -inline-max-size  The compiler sets the maximum size  (_n)
                                dynamically, based on the platform.

              DDeessccrriippttiioonn::

              This  option  specifies  the  lower limit for the size of
              what the inliner considers to be a large routine (a func-
              tion).  The inliner classifies routines as small, medium,
              or large. This option specifies the boundary between what
              the  inliner  considers  to be medium and large-size rou-
              tines.

              The inliner prefers to inline small routines.  It  has  a
              preference against inlining large routines. So, any large
              routine is highly unlikely to be inlined.

              If you specify -no-inline-max-size (Linux* OS and OS  X*)
              or  /Qinline-max-size-  (Windows* OS), there are no large
              routines. Every routine is either a small or medium  rou-
              tine.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this option to increase the default
              limit, the compiler may do so  much  additional  inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--mmaaxx--ttoottaall--ssiizzee==nn

       --nnoo--iinnlliinnee--mmaaxx--ttoottaall--ssiizzee

              Specifies how much larger a  routine  can  normally  grow
              when inline expansion is performed.

              AArrgguummeennttss::

              _n                 Is a positive  integer  that  specifies
                                the permitted increase in the routine's
                                size  when  inline  expansion  is  per-
                                formed.

              DDeeffaauulltt::

              -no-inline-max-total-size
                                The  compiler  uses  default heuristics
                                for inline routine expansion.

              DDeessccrriippttiioonn::

              This option specifies how much larger a routine can  nor-
              mally  grow when inline expansion is performed. It limits
              the potential size of the routine. For example,  if  2000
              is specified for _n, the size of any routine will normally
              not increase by more than 2000.

              If you specify -no-inline-max-total-size (Linux*  OS  and
              OS  X*)  or /Qinline-max-total-size- (Windows* OS), there
              is no limit to the size a routine may  grow  when  inline
              expansion is performed.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this option to increase the default
              limit, the compiler may do so  much  additional  inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinnlliinnee--mmiinn--ssiizzee==nn

       --nnoo--iinnlliinnee--mmiinn--ssiizzee

              Specifies the upper  limit  for  the  size  of  what  the
              inliner considers to be a small routine.

              AArrgguummeennttss::

              _n                 Is a positive  integer  that  specifies
                                the  maximum  size  of what the inliner
                                considers to be a small routine.

              DDeeffaauulltt::

              -no-inline-min-size
                                The compiler  uses  default  heuristics
                                for inline routine expansion.

              DDeessccrriippttiioonn::

              This  option  specifies  the  upper limit for the size of
              what the inliner considers to be a small routine (a func-
              tion).  The inliner classifies routines as small, medium,
              or large. This option specifies the boundary between what
              the  inliner  considers  to be small and medium-size rou-
              tines.

              The inliner has a preference to  inline  small  routines.
              So, when a routine is smaller than or equal to the speci-
              fied size, it is very likely to be inlined.

              If you specify -no-inline-min-size (Linux* OS and OS  X*)
              or /Qinline-min-size- (Windows* OS), there is no limit to
              the size of small routines. Every routine is a small rou-
              tine; there are no medium or large routines.

              To  see  compiler  values  for important inlining limits,
              specify  the  -qopt-report  (Linux*  OS  and  OS  X*)  or
              /Qopt-report (Windows) option.

              CCAAUUTTIIOONN:: When you use this option to increase the default
              limit, the compiler may do so  much  additional  inlining
              that it runs out of memory and terminates with an "out of
              memory" message.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iinntteell--eexxtteennssiioonnss

       --nnoo--iinntteell--eexxtteennssiioonnss

              Enables or disables all Intel(R) C and Intel(R) C++  lan-
              guage extensions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The Intel(R) C and  Intel(R)  C++  lan-
                                guage extensions are enabled.

              DDeessccrriippttiioonn::

              This  option  enables  or  disables  all  Intel(R)  C and
              Intel(R) C++ language extensions.

              If you specify the  negative  form  of  the  option  (see
              above),  it disables all Intel(R) C and Intel(R) C++ lan-
              guage extensions. For example, it disables  the  Intel(R)
              Cilk(TM)  Plus  language  extensions, which include array
              notation, and it disables support for the decimal  float-
              ing-point types.

              Note that certain settings for the [Q]std compiler option
              can enable or disable decimal floating-point support:

              · The following [Q]std  settings  enable  decimal  float-
                ing-point  support:  c89,  gnu89  (Linux*  only), gnu99
                (Linux* only)

              · The following [Q]std settings  disable  decimal  float-
                ing-point support: c99, c9x

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipp

       --nnoo--iipp

              Determines  whether  additional interprocedural optimiza-
              tions for single-file compilation are enabled.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Some  limited interprocedural optimiza-
                                tions occur, including inline  function
                                expansion   for   calls   to  functions
                                defined within the current source file.
                                These  optimizations  are  a  subset of
                                full intra-file  interprocedural  opti-
                                mizations.  Note  that  this setting is
                                not the same as -no-ip (Linux*  OS  and
                                OS X*).

              DDeessccrriippttiioonn::

              This option determines whether additional interprocedural
              optimizations for single-file compilation are enabled.

              The [Q]ip option enables additional interprocedural opti-
              mizations for single-file compilation.

              Options -no-ip (Linux OS and OS X) and /Qip- (Windows OS)
              may not disable inlining.  To  ensure  that  inlining  of
              user-defined     functions     is    disabled,    specify
              -inline-level=0or -fno-inline (Linux OS  and  OS  X),  or
              specify /Ob0 (Windows OS). To ensure that inliningof com-
              piler   intrinsic   functions   is   disabled,    specify
              -fno-builtin (Linux OS and OS X) or /Oi- (Windows OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipp--nnoo--iinnlliinniinngg

              Disables full and partial inlining enabled by interproce-
              dural optimization options.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Inlining   enabled  by  interprocedural
                                optimization options is performed.

              DDeessccrriippttiioonn::

              This option disables full and partial inlining enabled by
              the following interprocedural optimization options:

              · On Linux* and OS X* systems: -ip or -ipo

              · On Windows* systems: /Qip, /Qipo, or /Ob2

              It  has no effect on other interprocedural optimizations.

              On Windows systems, this option also  has  no  effect  on
              user-directed inlining specified by option /Ob1.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipp--nnoo--ppiinnlliinniinngg

              Disables  partial  inlining  enabled  by  interprocedural
              optimization options.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Inlining   enabled  by  interprocedural
                                optimization options is performed.

              DDeessccrriippttiioonn::

              This option disables partial inlining enabled by the fol-
              lowing interprocedural optimization options:

              · On Linux* and OS X* systems: -ip or -ipo

              · On Windows* systems: /Qip or /Qipo

              It  has no effect on other interprocedural optimizations.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iippoo[[nn]]

       --nnoo--iippoo

              Enables interprocedural optimization between files.

              AArrgguummeennttss::

              _n                 Is an optional integer  that  specifies
                                the number of object files the compiler
                                should  create.  The  integer  must  be
                                greater than or equal to 0.

              DDeeffaauulltt::

              -no-ipo or /Qipo- Multifile  interprocedural optimization
                                is not enabled.

              DDeessccrriippttiioonn::

              This option enables interprocedural optimization  between
              files.  This  is  also  called  multifile interprocedural
              optimization (multifile IPO) or Whole  Program  Optimiza-
              tion (WPO).

              When  you  specify  this  option,  the  compiler performs
              inline function expansion for calls to functions  defined
              in separate files.

              You  cannot specify the names for the files that are cre-
              ated.

              If _n is 0, the compiler decides whether to create one  or
              more object files based on an estimate of the size of the
              application. It  generates  one  object  file  for  small
              applications,  and  two  or  more  object files for large
              applications.

              If _n is greater than 0, the compiler generates  _n  object
              files,  unless  _n exceeds the number of source files (_m),
              in which case the compiler generates only _m object files.

              If you do not specify _n, the default is 0.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iippoo--cc

              Tells  the compiler to optimize across multiple files and
              generate a single object file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate a multi-
                                file object file.

              DDeessccrriippttiioonn::

              This option tells the compiler to optimize across  multi-
              ple  files  and  generate  a  single  object  file (named
              ipo_out.o on Linux* and OS  X*  systems;  ipo_out.obj  on
              Windows* systems).

              It  performs the same optimizations as the [Q]ipo option,
              but compilation stops before the final link stage,  leav-
              ing  an optimized object file that can be used in further
              link steps.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iippoo--jjoobbssnn

              Specifies the number of commands (jobs)  to  be  executed
              simultaneously  during  the link phase of Interprocedural
              Optimization (IPO).

              AArrgguummeennttss::

              _n                 Is the number of commands (jobs) to run
                                simultaneously.   The  number  must  be
                                greater than or equal to 1.

              DDeeffaauulltt::

              -ipo-jobs1        One command (job)  is  executed  in  an
                                interprocedural  optimization  parallel
                                build.

              DDeessccrriippttiioonn::

              This option specifies the number of commands (jobs) to be
              executed  simultaneously  during the link phase of Inter-
              procedural Optimization (IPO). It should only be used  if
              the  link-time  compilation  is  generating more than one
              object. In this case, each object is generated by a sepa-
              rate compilation, which can be done in parallel.

              This  option  can  be  affected by the following compiler
              options:

              · [Q]ipo when applications are large enough that the com-
                piler decides to generate multiple object files.

              · [Q]ipo_n when _n is greater than 1.

              · [Q]ipo-separate

              CCAAUUTTIIOONN::   Be  careful  when  using  this  option.  On  a
              multi-processor system with lots of memory, it can  speed
              application build time. However, if _n is greater than the
              number of processors, or if there is not enough memory to
              avoid  thrashing,  this  option  can increase application
              build time.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iippoo--SS

              Tells the compiler to optimize across multiple files  and
              generate a single assembly file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate a multi-
                                file assembly file.

              DDeessccrriippttiioonn::

              This  option tells the compiler to optimize across multi-
              ple files and generate  a  single  assembly  file  (named
              ipo_out.s  on  Linux*  and  OS X* systems; ipo_out.asm on
              Windows* systems).

              It performs the same optimizations as the [Q]ipo  option,
              but  compilation stops before the final link stage, leav-
              ing an optimized assembly file that can be used  in  fur-
              ther link steps.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iippoo--sseeppaarraattee ((LL**XX oonnllyy))

              Tells  the compiler to generate one object file for every
              source file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler decides whether to create
                                one or more object files.

              DDeessccrriippttiioonn::

              This option tells the compiler  to  generate  one  object
              file  for  every  source  file.  It  overrides any [Q]ipo
              option  specification.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipppp[[==lliibb]]

              Tells the compiler to link to the  some  or  all  of  the
              Intel(R) Integrated Performance Primitives (Intel(R) IPP)
              libraries.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _l_i_b               Indicates the  Intel(R)  IPP  libraries
                                that  the compiler should link to. Pos-
                                sible values are:

                                common         Tells  the  compiler  to
                                               link   using   the  main
                                               libraries set.  This  is
                                               the   default   if   the
                                               option is specified with
                                               no _l_i_b.

                                crypto         Tells  the  compiler  to
                                               link  using   the   main
                                               libraries  set  and  the
                                               crypto library.

                                nonpic (Linux only)
                                               Tells  the  compiler  to
                                               link  using  the version
                                               of the libraries that do
                                               not  have position-inde-
                                               pendent code. This value
                                               is   not   available  on
                                               Intel(R)  MIC  Architec-
                                               ture.

                                nonpic_crypto (Linux only)
                                               Tells  the  compiler  to
                                               link  using  the  crypto
                                               library  and the version
                                               of the libraries that do
                                               not  have position-inde-
                                               pendent   code.     This
                                               value  is  not available
                                               on Intel(R)  MIC  Archi-
                                               tecture.

              DDeeffaauulltt::

              OFF               The  compiler  does  not  link  to  the
                                Intel(R) IPP libraries.

              DDeessccrriippttiioonn::

              The option tells the compiler to link to the some or  all
              of   the   Intel(R)   Integrated  Performance  Primitives
              (Intel(R) IPP) libraries and  include  the  Intel(R)  IPP
              headers.

              The  [Q]ipp-link  option  controls  whether  the compiler
              links to static, dynamic  threaded,  or  static  threaded
              Intel(R) IPP run-time libraries.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipppp--lliinnkk[[==lliibb]]

              Controls  whether the compiler links to static or dynamic
              threaded  Intel(R)  Integrated   Performance   Primitives
              (Intel(R) IPP) run-time libraries.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _l_i_b               Specifies  the  Intel(R) IPP library to
                                use. Possible values are:

                                static         Tells  the  compiler  to
                                               link   to   the  set  of
                                               static          run-time
                                               libraries.

                                dynamic        Tells  the  compiler  to
                                               link  to  the   set   of
                                               dynamic         threaded
                                               run-time libraries.

              DDeeffaauulltt::

              dynamic           The compiler links to the Intel(R)  IPP
                                set of dynamic run-time libraries. How-
                                ever, if Linux* OS  option  -static  is
                                specified,  the  compiler  links to the
                                set of static run-time libraries.

              DDeessccrriippttiioonn::

              This option controls whether the compiler links to static
              or dynamic threaded Intel(R) Integrated Performance Prim-
              itives (Intel(R) IPP) run-time libraries.

              To use this option, you  must  also  specify  the  [Q]ipp
              option.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iipprreeffiixx pprreeffiixx

              Option for indicating the prefix for referencing directo-
              ries containing header files.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not   available on Intel(R) 64
              architecture, targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _p_r_e_f_i_x            Is the prefix to use.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Options  for indicating the prefix for referencing direc-
              tories containing header files. Use  _p_r_e_f_i_x  with  option
              -iwithprefix as a prefix.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iiqquuoottee ddiirr

              Add  directory  to  the  front of the include file search
              path for files included with quotes but not brackets.

              AArrgguummeennttss::

              _d_i_r               Is the name of the directory to add.

              DDeeffaauulltt::

              OFF               The  compiler  does not add a directory
                                to the front of the include file search
                                path.

              DDeessccrriippttiioonn::

              Add  directory  to  the  front of the include file search
              path for files included with quotes but not brackets.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iissyysstteemmddiirr

              Specifies a directory to add to the start of  the  system
              include path.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss::  Not available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _d_i_r               Is the directory to add to  the  system
                                include path.

              DDeeffaauulltt::

              OFF               The  default  system  include  path  is
                                used.

              DDeessccrriippttiioonn::

              This option specifies a directory to add  to  the  system
              include  path. The compiler searches the specified direc-
              tory for include files after it searches all  directories
              specified  by  the  -I  compiler  option  but  before  it
              searches the standard system directories.

              On Linux* systems, this option is provided  for  compati-
              bility with gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iiwwiitthhpprreeffiixxddiirr

              Appends  a  directory to the prefix passed in by -iprefix
              and puts it on the include search path at the end of  the
              include directories.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Not  available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _d_i_r               Is the include directory.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              This  option  appends a directory to the prefix passed in
              by -iprefix and puts it on the include search path at the
              end of the include directories.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --iiwwiitthhpprreeffiixxbbeeffoorreeddiirr

              Similar  to  -iwithprefix except the include directory is
              placed in the same  place  as  -I  command  line  include
              directories.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Not  available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _d_i_r               Is the include directory.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Similar  to  -iwithprefix except the include directory is
              placed in the same  place  as  -I  command  line  include
              directories.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --llssttrriinngg

              Tells  the  linker to search for a specified library when
              linking.

              AArrgguummeennttss::

              _s_t_r_i_n_g            Specifies  the library (lib_s_t_r_i_n_g) that
                                the linker should search.

              DDeeffaauulltt::

              OFF               The  linker   searches   for   standard
                                libraries in standard directories.

              DDeessccrriippttiioonn::

              This  option  tells  the linker to search for a specified
              library when linking.

              When resolving references, the linker  normally  searches
              for  libraries in several standard directories, in direc-
              tories specified by the L option,  then  in  the  library
              specified by the l option.

              The  linker  searches  and processes libraries and object
              files in the order they are  specified.  So,  you  should
              specify  this  option  following  the last object file it
              applies to.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --LLddiirr

              Tells the linker to search for libraries in  a  specified
              directory before searching the standard directories.

              AArrgguummeennttss::

              _d_i_r               Is the name of the directory to  search
                                for libraries.

              DDeeffaauulltt::

              OFF               The linker searches the standard direc-
                                tories for libraries.

              DDeessccrriippttiioonn::

              This option tells the linker to search for libraries in a
              specified  directory  before  searching  for  them in the
              standard directories.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmccooddee

              Tells the compiler which features it may target,  includ-
              ing which instruction sets it may generate.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss::  Not available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _c_o_d_e              Indicates to the compiler a feature set
                                that  it  may  target,  including which
                                instruction sets it may generate.  Many
                                of  the following descriptions refer to
                                Intel(R)  Streaming   SIMD   Extensions
                                (Intel(R) SSE) and Supplemental Stream-
                                ing SIMD  Extensions  (SSSE).  Possible
                                values are:

                                avx            May   generate  Intel(R)
                                               Advanced  Vector  Exten-
                                               sions   (Intel(R)  AVX),
                                               SSE4.2,  SSE4.1,   SSE3,
                                               SSE2,   SSE,  and  SSSE3
                                               instructions.

                                sse4.2         May  generate   Intel(R)
                                               SSE4.2,   SSE4.1,  SSE3,
                                               SSE2,  SSE,  and   SSSE3
                                               instructions.

                                sse4.1         May   generate  Intel(R)
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3 instructions.

                                ssse3          May    generate    SSSE3
                                               instructions         and
                                               Intel(R) SSE3, SSE2, and
                                               SSE instructions.

                                sse3           May   generate  Intel(R)
                                               SSE3,  SSE2,   and   SSE
                                               instructions.

                                sse2           May   generate  Intel(R)
                                               SSE2  and  SSE  instruc-
                                               tions.   This  value  is
                                               only available on  Linux
                                               systems.

                                sse            This   option  has  been
                                               deprecated;  it  is  now
                                               the  same  as specifying
                                               ia32.

                                ia32           Generates        x86/x87
                                               generic   code  that  is
                                               compatible  with   IA-32
                                               architecture.   Disables
                                               any   default   extended
                                               instruction    settings,
                                               and any  previously  set
                                               extended     instruction
                                               settings.  It also  dis-
                                               ables  all  feature-spe-
                                               cific optimizations  and
                                               instructions. This value
                                               is  only  available   on
                                               Linux*   systems   using
                                               IA-32 architecture.

              DDeeffaauulltt::

              Linux* systems: -msse2 OS X* systems using  IA-32  archi-
              tecture: -msse3 OS X* systems using Intel(R) 64 architec-
              ture: -mssse3
                                For more  information  on  the  default
                                values, see Arguments above.

              DDeessccrriippttiioonn::

              This option tells the compiler which features it may tar-
              get, including which instruction sets it may generate.

              Code generated with these options should execute  on  any
              compatible, non-Intel processor with support for the cor-
              responding instruction set.

              Options -x and -m are mutually  exclusive.  If  both  are
              specified,  the  compiler uses the last one specified and
              generates a warning.

              Linux* systems:  For compatibility with gcc, the compiler
              allows the following options but they have no effect. You
              will get a warning error, but the instructions associated
              with  the  name will not be generated. You should use the
              suggested replacement options.

              gcc Compatibility Option (Linux* OS)
                                Suggested Replacement Option

              -mfma             -march=core-avx2

              -mbmi, -mavx2, -mlzcnt
                                -march=core-avx2

              -mmovbe           -march=atom -minstruction=movbe

              -mcrc32, -maes, -mpclmul, -mpopcnt
                                -march=corei7

              -mvzeroupper      -march=corei7-avx

              -mfsgsbase, -mrdrnd, -mf16c
                                -march=core-avx-i

              Many of the  above  gcc  options  are  not  available  on
              Intel(R) MIC Architecture.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --MM

              Tells  the compiler to generate makefile dependency lines
              for each source file.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate makefile
                                dependency lines for each source  file.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  to  generate makefile
              dependency lines for  each  source  file,  based  on  the
              #include lines found in the source file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mm3322

       --mm6644

              Tells the compiler to generate code for a specific archi-
              tecture.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler's behavior depends on the
                                host system.

              DDeessccrriippttiioonn::

              These options tell the compiler to generate  code  for  a
              specific architecture.

              OOppttiioonn            DDeessccrriippttiioonn

              -m32              Tells the compiler to generate code for
                                IA-32 architecture.

              -m64              Tells the compiler to generate code for
                                Intel(R) 64 architecture.

              The  -m32  and -m64 options are the same as OS X* options
              -arch i386 and -arch x86_64, respectively.  These options
              are  not  related  to  the  Intel(R) C++  Compiler option
              arch.

              On Linux* systems,  these options are provided  for  com-
              patibility with gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmaalliiggnn--ddoouubbllee

       --mmnnoo--aalliiggnn--ddoouubbllee

              Determines  whether  double,  long  double, and long long
              types are naturally aligned.  This option  is  equivalent
              to specifying option align.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -mno-align-double Types  are aligned according to the gcc
                                model, which means they are aligned  to
                                4-byte boundaries.

              DDeessccrriippttiioonn::

              For details, see the _a_l_i_g_n option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmaapp--ooppttss ((LL**XX oonnllyy))

              Maps  one or more compiler options to their equivalent on
              a different operating system.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No platform mappings are performed.

              DDeessccrriippttiioonn::

              This  option  maps  one or more compiler options to their
              equivalent on a different operating system. The result is
              output to stdout.

              On  Windows systems, the options you provide are presumed
              to be Windows options, so the options that are output  to
              stdout will be Linux equivalents.

              On Linux systems, the options you provide are presumed to
              be Linux options, so the options that are output to  std-
              out will be Windows equivalents.

              The tool can be invoked from the compiler command line or
              it can be used directly.

              No compilation is performed when the option mapping  tool
              is used.

              This option is useful if you have both compilers and want
              to convert scripts or makefiles.

              NNOOTTEE:: Compiler options are mapped to their equivalent  on
              the  architecture  you are using. For example, if you are
              using a processor with IA-32 architecture, you will  only
              see  equivalent  options that are available on processors
              with IA-32 architecture.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmaarrcchh==pprroocceessssoorr

              Tells the compiler to generate code for  processors  that
              support certain features.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _p_r_o_c_e_s_s_o_r         Indicates to the compiler the  code  it
                                may generate. Possible values are:

                                generic        Generates  code  for the
                                               compiler's       default
                                               behavior.

                                core-avx2      Generates  code for pro-
                                               cessors   that   support
                                               Intel(R) Advanced Vector
                                               Extensions  2  (Intel(R)
                                               AVX2),   Intel(R)   AVX,
                                               SSE4.2,  SSE4.1,   SSE3,
                                               SSE2,   SSE,  and  SSSE3
                                               instructions.

                                core-avx-i     Generates code for  pro-
                                               cessors   that   support
                                               Float-16      conversion
                                               instructions   and   the
                                               RDRND       instruction,
                                               Intel(R) Advanced Vector
                                               Extensions     (Intel(R)
                                               AVX),  Intel(R)  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3 instructions.

                                corei7-avx     Generates code for  pro-
                                               cessors   that   support
                                               Intel(R) Advanced Vector
                                               Extensions     (Intel(R)
                                               AVX),  Intel(R)  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and SSSE3  instructions.

                                corei7         Generates  code for pro-
                                               cessors   that   support
                                               Intel(R)  SSE4 Efficient
                                               Accelerated  String  and
                                               Text Processing instruc-
                                               tions. May also generate
                                               code  for  Intel(R) SSE4
                                               Vectorizing Compiler and
                                               Media       Accelerator,
                                               Intel(R)   SSE3,   SSE2,
                                               SSE,  and SSSE3 instruc-
                                               tions.

                                atom           Generates code for  pro-
                                               cessors   that   support
                                               MOVBE      instructions,
                                               depending on the setting
                                               of option  -minstruction
                                               (Linux* OS and OS X*) or
                                               /Qinstruction  (Windows*
                                               OS).  May  also generate
                                               code for SSSE3  instruc-
                                               tions    and    Intel(R)
                                               SSE3,  SSE2,   and   SSE
                                               instructions.

                                core2          Generates  code  for the
                                               Intel(R) Core(TM) 2 pro-
                                               cessor family.

                                pentium-mmx    Generates  for  Intel(R)
                                               Pentium(R)   with    MMX
                                               technology.

                                pentiumpro     Generates  for  Intel(R)
                                               Pentium(R)  Pro,   Intel
                                               Pentium  II,  and  Intel
                                               Pentium III  processors.

                                pentium4m      Generates  for  Intel(R)
                                               Pentium(R) 4  processors
                                               with MMX technology.

                                pentium-m pentium4 pentium3 pentium
                                               Generates    code    for
                                               Intel(R) Pentium(R) pro-
                                               cessors.  Value pentium3
                                               is  only  available   on
                                               Linux* OS.

              DDeeffaauulltt::

              pentium4          If no architecture option is specified,
                                value pentium4 is used by the  compiler
                                to generate code.

              DDeessccrriippttiioonn::

              This  option tells the compiler to generate code for pro-
              cessors that support certain features.

              If you specify both the -ax and -march options, the  com-
              piler will not generate Intel-specific instructions.

              Specifying -march=pentium4 sets -mtune=pentium4.

              For  compatibility, a number of historical _p_r_o_c_e_s_s_o_r val-
              ues are also supported, but the generated code  will  not
              differ from the default.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              -march=pentium3   Linux: -xSSE

                                OS X: None

              -march=pentium4 -march=pentium-m
                                Linux: -xSSE2

                                OS X: None

              -march=core2      Linux: -xSSSE3

                                OS X: None

       --mmaassmm==ddiiaalleecctt ((LL**XX oonnllyy))

              Tells  the compiler to generate the assembler output file
              using a selected dialect.

              AArrgguummeennttss::

              _d_i_a_l_e_c_t           Is the dialect to use for the assembler
                                output file.  Possible values are:

                                att            Tells  the  compiler  to
                                               generate  the  assembler
                                               output file using  AT&T*
                                               syntax.

                                intel          Tells  the  compiler  to
                                               generate  the  assembler
                                               output  file using Intel
                                               syntax.

              DDeeffaauulltt::

              -masm=att         The compiler  generates  the  assembler
                                output file using AT&T* syntax.

              DDeessccrriippttiioonn::

              This  option tells the compiler to generate the assembler
              output file using a selected dialect.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmccmmooddeell==mmeemm__mmooddeell ((LL**XX oonnllyy))

              Tells the compiler to use a specific memory model to gen-
              erate code and store data.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture

              AArrgguummeennttss::

              _m_e_m___m_o_d_e_l         Is the memory model  to  use.  Possible
                                values are:

                                small          Tells  the  compiler  to
                                               restrict code  and  data
                                               to   the  first  2GB  of
                                               address    space.    All
                                               accesses   of  code  and
                                               data can  be  done  with
                                               Instruction      Pointer
                                               (IP)-relative   address-
                                               ing.

                                medium         Tells  the  compiler  to
                                               restrict  code  to   the
                                               first  2GB; it places no
                                               memory  restriction   on
                                               data.  Accesses  of code
                                               can be done with IP-rel-
                                               ative   addressing,  but
                                               accesses of data must be
                                               done    with    absolute
                                               addressing.

                                large          Places     no     memory
                                               restriction  on  code or
                                               data.  All  accesses  of
                                               code  and  data  must be
                                               done    with    absolute
                                               addressing.

              DDeeffaauulltt::

              -mcmodel=small    On  systems using Intel(R) 64 architec-
                                ture, the compiler restricts  code  and
                                data to the first 2GB of address space.
                                Instruction    Pointer    (IP)-relative
                                addressing  can  be used to access code
                                and data.

              DDeessccrriippttiioonn::

              This option tells the compiler to use a  specific  memory
              model to generate code and store data. It can affect code
              size and performance. If  your  program  has  global  and
              static   data   with  a  total  size  smaller  than  2GB,
              -mcmodel=small is  sufficient.  Global  and  static  data
              larger     than     2GB     requires-mcmodel=medium    or
              -mcmodel=large.  Allocation of memory larger than 2GB can
              be done with any setting of -mcmodel.

              IP-relative  addressing  requires  only  32 bits, whereas
              absolute   addressing   requires   64-bits.   IP-relative
              addressing is somewhat faster. So, the small memory model
              has the least impact on performance.

              NNOOTTEE::  When  you  specify   option   -mcmodel=medium   or
              -mcmodel=large,   it   sets  option  -shared-intel.  This
              ensures that the correct dynamic versions  of  the  Intel
              run-time libraries are used.

              If you specify option -static-intel while -mcmodel=medium
              or -mcmodel=large is set, an error will be displayed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMDD

              Preprocess and compile, generating output file containing
              dependency information ending with extension .d.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not  generate  depen-
                                dency information.

              DDeessccrriippttiioonn::

              Preprocess and compile, generating output file containing
              dependency information ending with extension .d.

              AAlltteerrnnaattee OOppttiioonnss::

              None

              Tells the linker to search for unresolved references in a
              multithreaded, dynamic-link run-time library.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The linker searches for unresolved ref-
                                erences  in  a  single-threaded, static
                                run-time library.

              DDeessccrriippttiioonn::

              This option tells the linker  to  search  for  unresolved
              references   in   a   multithreaded,  dynamic-link  (DLL)
              run-time library.  You can also  specify  /MDd,  where  d
              indicates a debug version.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmddyynnaammiicc--nnoo--ppiicc ((MM**XX oonnllyy))

              Generates  code  that is not position-independent but has
              position-independent external references.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               All  references  are generated as posi-
                                tion independent.

              DDeessccrriippttiioonn::

              This option generates code that is not  position-indepen-
              dent but has position-independent external references.

              The  generated code is suitable for building executables,
              but it is not suitable for building shared libraries.

              This option may reduce code size and produce  more  effi-
              cient code. It overrides the -fpic compiler option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMFFffiilleennaammee

              Tells the compiler to generate makefile dependency infor-
              mation in a file.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of the file where the make-
                                file dependency information  should  be
                                placed.

              DDeeffaauulltt::

              OFF               The compiler does not generate makefile
                                dependency information in files.

              DDeessccrriippttiioonn::

              This option  tells  the  compiler  to  generate  makefile
              dependency information in a file. To use this option, you
              must also specify /QM or /QMM.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMGG

              Tells the compiler to generate makefile dependency  lines
              for each source file.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate makefile
                                dependency information in files.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  to  generate makefile
              dependency lines for each source file. It is  similar  to
              /QM,  but  it  treats  missing  header files as generated
              files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmggppuu--aarrcchh==aarrcchh ((LL**XX oonnllyy))

              Builds the offload code for graphics to run on a particu-
              lar  graphics processor as specified by the option value.
              It causes the linker to invoke a compiler that translates
              the  virtual  Instruction  Set  Architecture (ISA) of the
              offload executable into the native ISA for  the  graphics
              processor specified. This option only applies to Intel(R)
              Graphics Technology.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::   Only  available  on   IA-32
              architecture  targeting Intel(R) Graphics Technology, and
              on Intel(R) 64 architecture targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              arch              Indicates to the  compiler  the  target
                                ISA  for the compilation. Possible val-
                                ues are:

                                ivybridge      May  generate   instruc-
                                               tions  for  the graphics
                                               processor  that  is   on
                                               Intel(R)  microarchitec-
                                               ture   code   name   Ivy
                                               Bridge.

                                haswell        May   generate  instruc-
                                               tions for  the  graphics
                                               processor   that  is  on
                                               Intel(R)  microarchitec-
                                               ture  code name Haswell.

              DDeeffaauulltt::

              OFF               The  compiler  generates  virtual   ISA
                                instructions.  At  runtime, the virtual
                                instructions  must  be  compiled   into
                                native  ISA  code  for  the platform on
                                which the executable is to run.

              DDeessccrriippttiioonn::

              This option builds the offload code for graphics  to  run
              on  a  particular  graphics processor as specified by the
              option value. It causes the linker to invoke  a  compiler
              that  translates the virtual Instruction Set Architecture
              (ISA) of the offload executable into the native  ISA  for
              the  graphics  processor specified. For information about
              applicable operating systems for Intel(R) Graphics  Tech-
              nology, see Overview: Intel(R) Graphics Technology.

              When  this option is not used, the executable is based on
              the virtual ISA, which is portable across  platforms.  In
              this  case,  the  virtual  ISA  is compiled at runtime by
              invoking the "Just-In-Time" compiler.

              This option should improve  performance  of  native  code
              generation for graphics applications because the compila-
              tion will be performed at link time instead  of  at  run-
              time.  It  may  also  help  you avoid some overhead costs
              associated with compiling virtual ISA code at runtime.

              The following shows the current  mapping  table  for  the
              possible ISA target values:

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmiinnssttrruuccttiioonn==[[nnoo]]mmoovvbbee

              Determines  whether  MOVBE instructions are generated for
              certain Intel processors.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              –minstruction=nomovbe
                                The  compiler  does  not generate MOVBE
                                instructions for Intel(R) Atom(TM) pro-
                                cessors.

              DDeessccrriippttiioonn::

              This  option  determines  whether  MOVBE instructions are
              generated for Intel(R) Atom(TM)  processors. To use  this
              option,   you   must   also  specify  [Q]xATOM_SSSE3   or
              [Q]xATOM_SSE4.2.

              If -minstruction=movbe or /Qinstruction:movbe  is  speci-
              fied, the following occurs:

              · MOVBE  instructions  are generated that are specific to
                the Intel(R) Atom(TM) processor.

              · Generated executables  can  only  be  run  on  Intel(R)
                Atom(TM)  processors or processors that support Supple-
                mental Streaming SIMD Extensions 3 (Intel(R) SSSE3)  or
                Intel(R)   Streaming   SIMD  Extensions  4.2  (Intel(R)
                SSE4.2) and MOVBE.

              If  -minstruction=nomovbe  or  /Qinstruction:nomovbe   is
              specified, the following occurs:

              · The  compiler  optimizes code for the Intel(R) Atom(TM)
                processor, but it does not generate MOVBE instructions.

              · Generated   executables  can  be  run  on  non-Intel(R)
                Atom(TM)  processors  that  support  Intel(R)  SSE3  or
                Intel(R) SSE4.2.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmkkll[[==lliibb]]

              Tells  the  compiler  to link to certain libraries in the
              Intel(R) Math Kernel Library (Intel(R) MKL).

              AArrgguummeennttss::

              _l_i_b               Indicates  which  Intel(R)  MKL library
                                files should be linked. Possible values
                                are:

                                parallel       Tells  the  compiler  to
                                               link using the  threaded
                                               libraries     in     the
                                               Intel(R)  MKL.  This  is
                                               the   default   if   the
                                               option is specified with
                                               no _l_i_b.

                                sequential     Tells  the  compiler  to
                                               link using  the  sequen-
                                               tial  libraries  in  the
                                               Intel(R) MKL.

                                cluster        Tells  the  compiler  to
                                               link   using  the  clus-
                                               ter-specific   libraries
                                               and    the    sequential
                                               libraries     in     the
                                               Intel(R)    MKL.   Clus-
                                               ter-specific   libraries
                                               are not available for OS
                                               X*.

              DDeeffaauulltt::

              OFF               The  compiler  does  not  link  to  the
                                Intel(R) MKL.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  to  link  to  certain
              libraries in the Intel(R) Math Kernel  Library  (Intel(R)
              MKL).

              NNOOTTEE::  On Windows* OS, this option adds directives to the
              compiled code, which the linker then reads  without  fur-
              ther  input  from  the driver. On Linux* OS and OS X, the
              driver must add the library names explicitly to the  link
              command.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmlloonngg--ddoouubbllee--nn ((LL**XX oonnllyy))

              Lets  you  override the default configuration of the long
              double data type.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n                 Specifies  the  size of the long double
                                data type. Possible values are:

                                64             Specifies that the  size
                                               of  the long double data
                                               type is 64 bits.

                                80             Specifies that the  size
                                               of  the long double data
                                               type is 80 bits. This is
                                               the default.

              DDeeffaauulltt::

              -mlong-double-80  Specifies  that  the  size  of the long
                                double data type is 80 bits.

              DDeessccrriippttiioonn::

              This option lets you override the  default  configuration
              of the long double data type.

              When  you  specify -mlong-double-64, the size of the long
              double data type is 8 bytes  and  the  macro  __LONG_DOU-
              BLE_64__ is defined.

              When  you  specify -mlong-double-80, the size of the long
              double data type is 12 bytes on IA-32 architecture and 16
              bytes on Intel(R) 64 architecture.

              This  option  has no effect on floating-point significand
              precision. That must be specified by using the  -pc64  or
              -pc80 option.

              Note  that  this option has no effect when you pass argu-
              ments.  When you pass arguments, the 64-bit  long  double
              data  type  is  treated as the double data type and it is
              always 64-bit.

              Remember to include the math.h and complex.h header files
              when you use this option.

              The following restrictions apply to this option:

              · __bultin_*  functions using the long double type should
                not be used in the non-default mode with Intel compiler
                libraries.

              · long  double  functions from the 'std' namespace should
                not be called from C++  sources  when  the  non-default
                mode is set.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

              Windows: /Qlong-double

       --MMMM

              Tells  the compiler to generate makefile dependency lines
              for each source file.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate makefile
                                dependency information in files.

              DDeessccrriippttiioonn::

              This option  tells  the  compiler  to  generate  makefile
              dependency  lines  for each source file. It is similar to
              /QM, but it does not include system header files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMMMDD

              Tells the compiler to generate an output file  containing
              dependency information.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not generate an  out-
                                put file containing dependency informa-
                                tion.

              DDeessccrriippttiioonn::

              This option tells the compiler to preprocess and  compile
              a  file, then generate an output file (with extension .d)
              containing dependency information.

              It is similar to /QMD, but it  does  not  include  system
              header files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmmmiicc  (L*X only)

              Builds  an application that runs natively on Intel(R) MIC
              Architecture. This option only applies  to  Intel(R)  MIC
              Architecture.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Only available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  builds  a  heterogeneous
                                application.  You  must  specify   this
                                option  to  build  an  application that
                                runs natively on Intel(R) MIC Architec-
                                ture.

              DDeessccrriippttiioonn::

              This  option  enables  the  cross  compiler to build   an
              application that runs natively on Intel(R) MIC  Architec-
              ture. It is only available on the command line.

              When  you use this option, the compiler defines the macro
              __MIC__.

              NNOOTTEE:: When you specify Windows* option  /Qmic,  you  must
              specify  any  other  options  on  the command line in the
              Linux* form. This is because all other options are passed
              directly  to  the  native  Intel(R) MIC Architecture com-
              piler, which is a Windows*-hosted Linux* compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMPP

              Tells the compiler to add a phony target for each  depen-
              dency.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not  generate  depen-
                                dency  information unless it is told to
                                do so.

              DDeessccrriippttiioonn::

              This option tells the compiler to add a phony target  for
              each dependency.

              Note  that  this option is not related to Windows* option
              _/_M_P.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmpp11

              Improves floating-point precision and consistency.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler provides good accuracy and
                                run-time  performance at the expense of
                                less consistent floating-point results.

              DDeessccrriippttiioonn::

              This   option  improves  floating-point  consistency.  It
              ensures the out-of-range check of operands  of  transcen-
              dental  functions  and  improves  the  accuracy of float-
              ing-point compares.

              This option prevents the compiler from  performing  opti-
              mizations that change NaN comparison semantics and causes
              all values to be truncated to declared  precision  before
              they are used in comparisons. It also causes the compiler
              to  use  library  routines  that  give  better  precision
              results  compared to the X87 transcendental instructions.

              This option disables fewer  optimizations  and  has  less
              impact  on  performance  than  option  -fp-model  precise
              (Linux* OS and OS X*)  or  option  /fp:precise  (Windows*
              OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMQQttaarrggeett

              Changes  the  default  target rule for dependency genera-
              tion.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _t_a_r_g_e_t            Is the target rule to use.

              DDeeffaauulltt::

              OFF               The  default  target  rule  applies  to
                                dependency generation.

              DDeessccrriippttiioonn::

              This option changes the default target  rule  for  depen-
              dency  generation.  It is similar to -MT, but quotes spe-
              cial Make characters.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmrreeggppaarrmm==vvaalluuee

              Control the number registers used to pass  integer  argu-
              ments.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not use registers  to
                                pass arguments.

              DDeessccrriippttiioonn::

              Control  the  number registers used to pass integer argu-
              ments.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --MMTTttaarrggeett

              Changes the default target rule  for  dependency  genera-
              tion.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _t_a_r_g_e_t            Is the target rule to use.

              DDeeffaauulltt::

              OFF               The  default  target  rule  applies  to
                                dependency generation.

              DDeessccrriippttiioonn::

              This  option  changes  the default target rule for depen-
              dency generation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmttuunnee==pprroocceessssoorr

              Performs optimizations for specific processors.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _p_r_o_c_e_s_s_o_r         Is the processor for which the compiler
                                should perform optimizations.    Possi-
                                ble values are:

                                generic        Optimizes code  for  the
                                               compiler's       default
                                               behavior.

                                core-avx2      Optimizes code for  pro-
                                               cessors   that   support
                                               Intel(R) Advanced Vector
                                               Extensions  2  (Intel(R)
                                               AVX2),   Intel(R)   AVX,
                                               SSE4.2,   SSE4.1,  SSE3,
                                               SSE2,  SSE,  and   SSSE3
                                               instructions.

                                core-avx-i     Optimizes  code for pro-
                                               cessors   that   support
                                               Float-16      conversion
                                               instructions   and   the
                                               RDRND       instruction,
                                               Intel(R) Advanced Vector
                                               Extensions     (Intel(R)
                                               AVX),  Intel(R)  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and SSSE3  instructions.

                                corei7-avx     Optimizes  code for pro-
                                               cessors   that   support
                                               Intel(R) Advanced Vector
                                               Extensions     (Intel(R)
                                               AVX),  Intel(R)  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3 instructions.

                                corei7         Optimizes code for  pro-
                                               cessors   that   support
                                               Intel(R) SSE4  Efficient
                                               Accelerated  String  and
                                               Text Processing instruc-
                                               tions. May also generate
                                               code for  Intel(R)  SSE4
                                               Vectorizing Compiler and
                                               Media       Accelerator,
                                               Intel(R)   SSE3,   SSE2,
                                               SSE, and SSSE3  instruc-
                                               tions.

                                atom           Optimizes  code for pro-
                                               cessors   that   support
                                               MOVBE      instructions,
                                               depending on the setting
                                               of  option -minstruction
                                               (Linux* OS and OS X*) or
                                               /Qinstruction  (Windows*
                                               OS). May  also  generate
                                               code  for SSSE3 instruc-
                                               tions   and     Intel(R)
                                               SSE3,   SSE2,   and  SSE
                                               instructions.

                                core2          Optimizes    for     the
                                               Intel(R) Core(TM) 2 pro-
                                               cessor family, including
                                               support   for   MMX(TM),
                                               Intel(R) SSE, SSE2, SSE3
                                               and   SSSE3  instruction
                                               sets.

                                pentium-mmx    Optimizes  for  Intel(R)
                                               Pentium(R)    with   MMX
                                               technology.

                                pentiumpro     Optimizes  for  Intel(R)
                                               Pentium(R)   Pro,  Intel
                                               Pentium  II,  and  Intel
                                               Pentium  III processors.

                                pentium4m      Optimizes  for  Intel(R)
                                               Pentium(R)  4 processors
                                               with MMX technology.

                                pentium-m pentium4 pentium3 pentium
                                               Optimizes    code    for
                                               Intel(R) Pentium(R) pro-
                                               cessors. Value  pentium3
                                               is   only  available  on
                                               Linux* OS.

              DDeeffaauulltt::

              generic           Code is generated  for  the  compiler's
                                default behavior.

              DDeessccrriippttiioonn::

              This  option  performs optimizations for specific proces-
              sors.

              The resulting executable is backwards compatible and gen-
              erated  code  is  optimized  for specific processors. For
              example, code generated  with  -mtune=pentium4  will  run
              correctly  on  Core2  processors, but it might not run as
              fast as if it had been generated using -mtune=core2.

              The following table shows on which architecture  you  can
              use each value.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              -mtune            Linux:  -mcpu  (this  is  a  deprecated
                                option)

                                OS X: None

       --mmuullttiibbyyttee--cchhaarrss

       --nnoo--mmuullttiibbyyttee--cchhaarrss

              Determines whether multi-byte characters are supported.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -multibyte-chars  Multi-byte characters are supported.

              DDeessccrriippttiioonn::

              This option determines whether multi-byte characters  are
              supported.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --mmuullttiippllee--pprroocceesssseess[[==nn]]

              Creates  multiple  processes  that can be used to compile
              large numbers of source files at the same time.

              AArrgguummeennttss::

              _n                 Is the maximum number of processes that
                                the compiler should create.

              DDeeffaauulltt::

              OFF               A single process  is  used  to  compile
                                source files.

              DDeessccrriippttiioonn::

              This  option  creates multiple processes that can be used
              to compile large numbers of  source  files  at  the  same
              time.  It can improve performance by reducing the time it
              takes to compile source files on the command line.

              This option causes the compiler to  create  one  or  more
              copies  of  itself,  each  in  a  separate process. These
              copies simultaneously compile the source files.

              If _n is not specified for this option, the default  value
              is as follows:

              · On  Windows*  OS,  the value is based on the setting of
                the NUMBER_OF_PROCESSORS environment variable.

              · On Linux* OS and OS X*, the value is 2.

              This option applies to compilations, but not  to  linking
              or link-time code generation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoo--bbssss--iinniitt

              Tells  the  compiler  to  place  in  the DATA section any
              uninitialized variables and  explicitly  zero-initialized
              variables.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Uninitialized  variables and explicitly
                                zero-initialized variables  are  placed
                                in the BSS section.

              DDeessccrriippttiioonn::

              This  option tells the compiler to place in the DATA sec-
              tion any uninitialized variables and explicitly zero-ini-
              tialized variables.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoo--lliibbggcccc ((LL**XX oonnllyy))

              Prevents  the linking of  certain gcc-specific libraries.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              This option prevents the linking of  certain gcc-specific
              libraries.

              This option is not recommended for general use.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnooddeeffaauullttlliibbss

              Prevents the compiler from using standard libraries  when
              linking.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The standard libraries are linked.

              DDeessccrriippttiioonn::

              This option prevents the  compiler  from  using  standard
              libraries when linking.On Linux* systems,  it is provided
              for GNU compatibility.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoolliibb--iinnlliinnee

              Disables inline expansion of standard library or  intrin-
              sic functions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  inlines  many   standard
                                library and intrinsic functions.

              DDeessccrriippttiioonn::

              This option disables inline expansion of standard library
              or  intrinsic  functions.  It  prevents  the   unexpected
              results  that  can  arise  from inline expansion of these
              functions.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoossttaarrttffiilleess

              Prevents the compiler from using standard  startup  files
              when linking.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  uses  standard   startup
                                files when linking.

              DDeessccrriippttiioonn::

              This  option  prevents  the  compiler from using standard
              startup files when linking.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoossttddiinncc++++

              Do not search for header files in the  standard  directo-
              ries  for C++, but search the other standard directories.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Do not search for header files in the  standard  directo-
              ries  for C++, but search the other standard directories.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --nnoossttddlliibb

              Prevents the compiler from using standard  libraries  and
              startup files when linking.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  uses  standard   startup
                                files and standard libraries when link-
                                ing.

              DDeessccrriippttiioonn::

              This option prevents the  compiler  from  using  standard
              libraries  and startup files when linking. On Linux* sys-
              tems, it is provided for GNU compatibility.

              This option is not related to option -stdlib.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --oo ffiilleennaammee

              Specifies the name for an output file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name for the  output  file.  The
                                space before _f_i_l_e_n_a_m_e is optional.

              DDeeffaauulltt::

              OFF               The compiler uses the default file name
                                for an output file.

              DDeessccrriippttiioonn::

              This option specifies the name for an output file as fol-
              lows:

              · If -c is specified, it specifies the name of the gener-
                ated object file.

              · If -S is specified, it specifies the name of the gener-
                ated assembly listing file.

              · If -P is specified, it specifies the name of the gener-
                ated preprocessor file.

              Otherwise, it specifies the name of the executable  file.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

              Windows: /Fe

       --OO[[nn]]

              Specifies the code optimization for applications.

              AArrgguummeennttss::

              _n                 Is  the  optimization  level.  Possible
                                values are 1, 2, or 3. On Linux* and OS
                                X* systems, you can also specify 0.

              DDeeffaauulltt::

              O2                Optimizes  for code speed. This default
                                may change  depending  on  which  other
                                compiler  options  are  specified.  For
                                details, see below.

              DDeessccrriippttiioonn::

              This option specifies the code optimization for  applica-
              tions.

              OOppttiioonn            DDeessccrriippttiioonn

              O (Linux* OS and OS X*)
                                This is the same as specifying O2.

              O0 (Linux OS and OS X)
                                Disables all optimizations.

              This  option may set other options. This is determined by
              the compiler, depending on  which  operating  system  and
              architecture  you are using. The options that are set may
              change from release to release.

              O1                Enables  optimizations  for  speed  and
                                disables   some   optimizations    that
                                increase code size and affect speed. To
                                limit code size, this option:

                                · Enables  global  optimization;   this
                                  includes   data-flow  analysis,  code
                                  motion, strength reduction  and  test
                                  replacement, split-lifetime analysis,
                                  and instruction scheduling.

                                · Disables inlining of some intrinsics.

              This  option may set other options. This is determined by
              the compiler, depending on  which  operating  system  and
              architecture  you are using. The options that are set may
              change from release to release.

              The  O1  option  may improve performance for applications
              with very large code size, many branches,  and  execution
              time not dominated by code within loops.

              O2                Enables  optimizations  for speed. This
                                is the generally recommended  optimiza-
                                tion  level.   Vectorization is enabled
                                at O2 and higher levels.

              On systems using  IA-32  architecture:  Some  basic  loop
              optimizations such as Distribution, Predicate Opt, Inter-
              change, multi-versioning,  and  scalar  replacements  are
              performed.

              This option also enables:

                                · Inlining of intrinsics

                                · Intra-file interprocedural  optimiza-
                                  tion, which includes:

                                  · inlining

                                  · constant propagation

                                  · forward substitution

                                  · routine attribute propagation

                                  · variable address-taken analysis

                                  · dead static function elimination

                                  · removal of unreferenced variables

                                · The  following  capabilities for per-
                                  formance gain:

                                  · constant propagation

                                  · copy propagation

                                  · dead-code elimination

                                  · global register allocation

                                  · global instruction  scheduling  and
                                    control speculation

                                  · loop unrolling

                                  · optimized code selection

                                  · partial redundancy elimination

                                  · strength  reduction/induction vari-
                                    able simplification

                                  · variable renaming

                                  · exception handling optimizations

                                  · tail recursions

                                  · peephole optimizations

                                  · structure assignment  lowering  and
                                    optimizations

                                  · dead store elimination

              This  option  may  set other options,  especially options
              that optimize for code speed. This is determined  by  the
              compiler,  depending on which operating system and archi-
              tecture you are using.  The  options  that  are  set  may
              change from release to release.

              On  Linux  systems,  the  -debug inline-debug-info option
              will be enabled by default if you compile with  optimiza-
              tions  (option  -O2  or  higher) and debugging is enabled
              (option -g).

              Many  routines  in  the  shared libraries are more highly
              optimized for Intel(R) microprocessors than for non-Intel
              microprocessors.

              O3                Performs  O2  optimizations and enables
                                more  aggressive  loop  transformations
                                such  as  Fusion, Block-Unroll-and-Jam,
                                and collapsing IF statements.

              This option may set other options. This is determined  by
              the  compiler,  depending  on  which operating system and
              architecture you are using. The options that are set  may
              change from release to release.

              When O3 is used with options -ax or -x (Linux OS) or with
              options  /Qax  or /Qx (Windows OS), the compiler performs
              more aggressive data dependency  analysis  than  for  O2,
              which may result in longer compilation times.

              The O3 optimizations may  not  cause  higher  performance
              unless loop and memory access transformations take place.
              The optimizations may slow down code in some  cases  com-
              pared to O2 optimizations.

              The O3 option is recommended for applications  that  have
              loops  that  heavily  use floating-point calculations and
              process large data sets.

              Many routines in the shared  libraries  are  more  highly
              optimized for Intel(R) microprocessors than for non-Intel
              microprocessors.

              The last O option specified on  the  command  line  takes
              precedence over any others.

       --OOffaasstt

              Sets  certain  aggressive options to improve the speed of
              your application.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The   aggressive   optimizations   that
                                improve speed are not enabled.

              DDeessccrriippttiioonn::

              This option improves the speed  of your application.

              It sets compiler options -O3, -no-prec-div, and -fp-model
              fast=2.

              On  Linux*  systems, this option is provided for compati-
              bility with gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --OOss

              Enables optimizations that do not increase code size  and
              produces smaller code size than O2.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Optimizations are made for code  speed.
                                However,  if O1 is specified, Os is the
                                default.

              DDeessccrriippttiioonn::

              This option enables optimizations that  do  not  increase
              code size and produces smaller code size than O2. It dis-
              ables some optimizations that increase code  size  for  a
              small speed benefit.

              This  option  tells the compiler to favor transformations
              that reduce code size over transformations  that  produce
              maximum performance.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pp

              Compiles  and links for function profiling with gprof(1).

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Files  are  compiled and linked without
                                profiling.

              DDeessccrriippttiioonn::

              This option compiles and  links  for  function  profiling
              with gprof(1).

              When  you specify this option, inlining is disabled. How-
              ever, you can override this by specifying pragma forcein-
              line,   declspec  forceinline  (Windows*  OS),  attribute
              always_inline (Linux* OS and OS X*), or a compiler option
              such as [Q]inline-forceinline.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -qp (this is a deprecated option)

       --PP

              Tells  the  compiler  to stop the compilation process and
              write the results to a file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Normal compilation is performed.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to stop the compilation
              process after C or C++ source  files  have  been  prepro-
              cessed  and write the results to files named according to
              the compiler's default file-naming conventions.

              On Linux systems, this option causes the preprocessor  to
              expand  your  source module and direct the output to a .i
              file instead of stdout. Unlike the -E option, the  output
              from  -P  on  Linux  does not include #line number direc-
              tives. By default, the preprocessor creates the  name  of
              the  output file using the prefix of the source file name
              with a .i extension. You can change this by using the  -o
              option.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -F

              Windows: None

       --ppaarraalllleell

              Tells  the  auto-parallelizer  to  generate multithreaded
              code for loops that can be safely executed in parallel.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Multithreaded code is not generated for
                                loops that can be  safely  executed  in
                                parallel.

              DDeessccrriippttiioonn::

              This  option tells the auto-parallelizer to generate mul-
              tithreaded code for loops that can be safely executed  in
              parallel.

              To  use  this  option, you must also specify option O2 or
              O3.

              This option sets option -qopt-matmul on  Linux*  OS,  and
              option  /Qopt-matmul on Windows* OS, if option O3 is also
              specified.

              NNOOTTEE:: On OS X* systems, when you enable automatic  paral-
              lelization, you must also set the DYLD_LIBRARY_PATH envi-
              ronment variable within Xcode* or an error will  be  dis-
              played.

              NNOOTTEE::  Using this option enables parallelization for both
              Intel(R) microprocessors and  non-Intel  microprocessors.
              The  resulting  executable may get additional performance
              gain on Intel microprocessors than on non-Intel micropro-
              cessors. The parallelization can also be affected by cer-
              tain options, such as /arch or /Qx (Windows OS) or -m  or
              -x (Linux OS and OS X).


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarraalllleell--ssoouurrccee--iinnffoo[[==nn]]

       --nnoo--ppaarraalllleell--ssoouurrccee--iinnffoo

              Enables or disables source location emission when OpenMP*
              or auto-parallelism code is generated.

              AArrgguummeennttss::

              _n                 Is  the  level of source location emis-
                                sion. Possible values are:

                                0              Disables the emission of
                                               source location informa-
                                               tion when  OpenMP*  code
                                               or auto-parallelism code
                                               is  generated.  This  is
                                               the  same  as specifying
                                               -no-parallel-source-info
                                               (Linux* OS and OS X*) or
                                               /Qparallel-source-info-
                                               (Windows* OS).

                                1              Tells  the  compiler  to
                                               emit  routine  name  and
                                               line  information.  This
                                               is the same as  specify-
                                               ing            [Q]paral-
                                               lel-source-info  with no
                                               _n.

                                2              Tells  the  compiler  to
                                               emit path, file, routine
                                               name,  and line informa-
                                               tion.

              DDeeffaauulltt::

              -parallel-source-info=1
                                When OpenMP* code  or  auto-parallelism
                                code is generated, the routine name and
                                line information is emitted.

              DDeessccrriippttiioonn::

              This option enables or disables source location  emission
              when  OpenMP  code or auto-parallelism code is generated.
              It also lets you set the level of emission.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--aaffffiinniittyy==[[mmooddiiffiieerr,,......]]ttyyppee[[,,ppeerrmmuuttee]][[,,ooffffsseett]] ((LL**XX oonnllyy))

              Specifies thread affinity.

              AArrgguummeennttss::

              _m_o_d_i_f_i_e_r          Is one of the following values:  granu-
                                larity={fine|thread|core}, [no]respect,
                                [no]verbose,     [no]warnings,     pro-
                                clist=proc_list.  The default is granu-
                                larity=core, respect, and noverbose.

              _t_y_p_e              Indicates  the  thread  affinity.  This
                                argument is required and must be one of
                                the  following  values:  compact,  dis-
                                abled,  explicit,  none, scatter, logi-
                                cal, physical.  The  default  is  none.
                                Values  logical and physical are depre-
                                cated. Use compact and scatter, respec-
                                tively, with no _p_e_r_m_u_t_e value.

              _p_e_r_m_u_t_e           Is  a  positive integer. You cannot use
                                this   argument   with   _t_y_p_e   setting
                                explicit,   none,   or   disabled.  The
                                default is 0.

              _o_f_f_s_e_t            Is a positive integer. You  cannot  use
                                this   argument   with   _t_y_p_e   setting
                                explicit,  none,   or   disabled.   The
                                default is 0.

              DDeeffaauulltt::

              OFF               The  thread  affinity  is determined by
                                the run-time environment.

              DDeessccrriippttiioonn::

              This  option  specifies  thread  affinity,  which   binds
              threads  to  physical  processing  units. It has the same
              effect as environment variable KMP_AFFINITY.

              This option overrides the environment variable when  both
              are specified.

              This option only has an effect if the following is true:

              · Linux*  OS:  You  have  specified  option  -parallel or
                -qopenmp (or both).  Windows* OS:  You  have  specified
                option /Qparallel or /Qopenmp (or both).

              · You are compiling the main program.

              NNOOTTEE::  This  option  may  behave  differently on Intel(R)
              microprocessors than on non-Intel microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--nnuumm--tthhrreeaaddss==nn

              Specifies the number of threads  to  use  in  a  parallel
              region.

              AArrgguummeennttss::

              _n                 Is the number of  threads  to  use.  It
                                must be a positive integer.

              DDeeffaauulltt::

              OFF               The  number of threads to use is deter-
                                mined by the run-time environment.

              DDeessccrriippttiioonn::

              This option specifies the number of threads to use  in  a
              parallel  region.  It  has the same effect as environment
              variable OMP_NUM_THREADS.

              This option overrides the environment variable when  both
              are specified.

              This option only has an effect if the following is true:

              · Linux*  OS and OS X*: You have specified option -paral-
                lel or -qopenmp (or both).  Windows* OS: You have spec-
                ified option /Qparallel or /Qopenmp (or both).

              · You are compiling the main program.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--rreeppoorrtt[[==nn]]

              Controls  the  diagnostic  information  reported  by  the
              auto-parallelizer.  This  is  a  deprecated  option.  The
              replacement   options   for   this  kind  of  report  are
              -qopt-report -qopt-report-phase=par (Linux* OS and OS X*)
              or /Qopt-report /Qopt-report-phase:par (Windows* OS).

              AArrgguummeennttss::

              _n                 Is  a  value  denoting which diagnostic
                                messages  to  report.  Possible  values
                                are:

                                0              Tells   the  auto-paral-
                                               lelizer  to  report   no
                                               diagnostic  information.

                                1              Tells  the   auto-paral-
                                               lelizer  to report diag-
                                               nostic   messages    for
                                               loops       successfully
                                               auto-parallelized.   The
                                               compiler  also  issues a
                                               "LOOP AUTO-PARALLELIZED"
                                               message   for   parallel
                                               loops.

                                2              Tells  the   auto-paral-
                                               lelizer  to report diag-
                                               nostic   messages    for
                                               loops  successfully  and
                                               unsuccessfully auto-par-
                                               allelized.  This  is the
                                               default  if  _n  is   not
                                               specified.

                                3              Tells   the  auto-paral-
                                               lelizer  to  report  the
                                               same diagnostic messages
                                               specified  by   2   plus
                                               additional   information
                                               about  any   proven   or
                                               assumed     dependencies
                                               inhibiting   auto-paral-
                                               lelization  (reasons for
                                               not parallelizing).

                                4              Tells  the  compiler  to
                                               generate  a  report that
                                               includes the information
                                               in  level  3, but with a
                                               greater level of detail.

                                5              Tells  the  compiler  to
                                               generate a  report  that
                                               includes the information
                                               in level 4, but  with  a
                                               greater level of detail.

              DDeeffaauulltt::

              OFF               No auto-parallelizer messages are  dis-
                                played.

              DDeessccrriippttiioonn::

              This  option controls the diagnostic information reported
              by the auto-parallelizer  (parallel  optimizer).  To  use
              this option, you must also specify option [Q]parallel.

              If  this  option  is  specified  on the command line, the
              report is sent to stdout.

              NNOOTTEE:: When option  -qopt-report  or  /Qopt-report  is  in
              effect,  you  get reports for all optimizer phases.  When
              you specify -qopt-report or  /Qopt-report  along  with  a
              particular   setting  for  option  -qopt-report-phase  or
              /Qopt-report-phase, you suppress reports  for  the  other
              phases.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--rruunnttiimmee--ccoonnttrrooll[[nn]]

       --nnoo--ppaarr--rruunnttiimmee--ccoonnttrrooll

              Generates  code to perform run-time checks for loops that
              have symbolic loop bounds.

              AArrgguummeennttss::

              _n                 Is  a   a  value  denoting what kind of
                                runtime checking to  perform.  Possible
                                values are:

                                0              Performs    no   runtime
                                               check based on auto-par-
                                               allelization.   This  is
                                               the same  as  specifying
                                               -no-par-runtime-control
                                               (Linux* OS and OS X*) or
                                               /Qpar-runtime-control-
                                               (Windows* OS).

                                1              Generates runtime  check
                                               code  under conservative
                                               mode.   This   is    the
                                               default  if  you  do not
                                               specify _n.

                                2              Generates runtime  check
                                               code   under   heuristic
                                               mode.

                                3              Generates runtime  check
                                               code   under  aggressive
                                               mode.

              DDeeffaauulltt::

              -no-par-runtime-control
                                The compiler  uses  default  heuristics
                                when checking loops.

              DDeessccrriippttiioonn::

              This option generates code to perform run-time checks for
              loops that have symbolic loop bounds.

              If the granularity of a loop is greater than  the  paral-
              lelization threshold, the loop will be executed in paral-
              lel.

              If you do not specify this option, the compiler  may  not
              parallelize  loops  with symbolic loop bounds if the com-
              pile-time granularity estimation of a loop can not ensure
              it is beneficial to parallelize the loop.

              NNOOTTEE::  This  option  may  behave  differently on Intel(R)
              microprocessors than on non-Intel microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--sscchheedduullee--kkeeyywwoorrdd[[==nn]]

              Lets you specify a scheduling algorithm for  loop  itera-
              tions.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies the scheduling  algorithm  or
                                tuning method. Possible values are:

                                auto           Lets   the  compiler  or
                                               run-time          system
                                               determine the scheduling
                                               algorithm.

                                static         Divides iterations  into
                                               contiguous pieces.

                                static-balanced
                                               Divides  iterations into
                                               even-sized chunks.

                                static-steal   Divides iterations  into
                                               even-sized  chunks,  but
                                               allows threads to  steal
                                               parts   of  chunks  from
                                               neighboring threads.

                                dynamic        Gets a set of iterations
                                               dynamically.

                                guided         Specifies a minimum num-
                                               ber of iterations.

                                guided-analytical
                                               Divides  iterations   by
                                               using  exponential  dis-
                                               tribution   or   dynamic
                                               distribution.

                                runtime        Defers   the  scheduling
                                               decision until run time.

              _n                 Is  the size of the chunk or the number
                                of iterations for each chunk. This set-
                                ting  can only be specified for static,
                                dynamic, and guided. For more  informa-
                                tion, see the descriptions of each key-
                                word below.

              DDeeffaauulltt::

              static-balanced   Iterations are divided into  even-sized
                                chunks  and  the chunks are assigned to
                                the  threads   in   the   team   in   a
                                round-robin fashion in the order of the
                                thread number.

              DDeessccrriippttiioonn::

              This option lets you specify a scheduling  algorithm  for
              loop  iterations.   It specifies how iterations are to be
              divided among the threads of the team.

              This option is only useful  when  specified  with  option
              [Q]parallel.

              This  option  affects  performance tuning and can provide
              better performance during auto-parallelization.  It  does
              nothing if it is used with option -qopenmp (Linux* OS and
              OS X*) or /Qopenmp (Windows* OS).

              OOppttiioonn            DDeessccrriippttiioonn

              [Q]par-schedule-auto
                                Lets the compiler  or  run-time  system
                                determine the scheduling algorithm. Any
                                possible mapping may occur  for  itera-
                                tions to threads in the team.

              [Q]par-schedule-static
                                Divides   iterations   into  contiguous
                                pieces (chunks) of size _n.  The  chunks
                                are  assigned to threads in the team in
                                a round-robin fashion in the  order  of
                                the  thread number.  Note that the last
                                chunk to be assigned may have a smaller
                                number of iterations.

              If no _n is specified, the iteration space is divided into
              chunks that are approximately
                                equal  in  size,  and  each  thread  is
                                assigned at most one chunk.

              [Q]par-schedule-static-balanced
                                Divides  iterations   into   even-sized
                                chunks.  The chunks are assigned to the
                                threads in the team  in  a  round-robin
                                fashion in the order of the thread num-
                                ber.

              [Q]par-schedule-static-steal
                                Divides  iterations   into   even-sized
                                chunks, but when a thread completes its
                                chunk, it can  steal  parts  of  chunks
                                assigned to neighboring threads.

              Each thread keeps track
                                of  L  and U, which represent the lower
                                and upper bounds of its chunks  respec-
                                tively.  Iterations are executed start-
                                ing from the lower bound, and  simulta-
                                neously,  L is updated to represent the
                                new lower bound.

              [Q]par-schedule-dynamic
                                Can be used to get a set of  iterations
                                dynamically.   Assigns   iterations  to
                                threads  in  chunks  as   the   threads
                                request  them.  The thread executes the
                                chunk  of  iterations,  then   requests
                                another  chunk,  until no chunks remain
                                to be assigned.

              As each thread finishes a piece of the  iteration  space,
              it dynamically gets the next
                                set of iterations. Each chunk  contains
                                _n iterations, except for the last chunk
                                to be assigned, which  may  have  fewer
                                iterations.  If  no _n is specified, the
                                default is 1.

              [Q]par-schedule-guided
                                Can be used to specify a minimum number
                                of  iterations.  Assigns  iterations to
                                threads  in  chunks  as   the   threads
                                request  them.  The thread executes the
                                chunk  of  iterations,  then   requests
                                another  chunk,  until no chunks remain
                                to be assigned.

              For a chunk of size 1, the size of each chunk is  propor-
              tional to the number of unassigned
                                iterations divided  by  the  number  of
                                threads, decreasing to 1.

              For an _n with value
                                _k  (greater  than  1), the size of each
                                chunk is determined  in  the  same  way
                                with the restriction that the chunks do
                                not contain  fewer  than  _k  iterations
                                (except   for  the  last  chunk  to  be
                                assigned, which may have fewer  than  _k
                                iterations).  If no _n is specified, the
                                default is 1.

              [Q]par-schedule-guided-analytical
                                Divides iterations by using exponential
                                distribution  or  dynamic distribution.
                                The method depends on  run-time  imple-
                                mentation.  Loop  bounds are calculated
                                with faster synchronization and  chunks
                                are  dynamically dispatched at run time
                                by threads in the team.

              [Q]par-schedule-runtime
                                Defers the  scheduling  decision  until
                                run  time. The scheduling algorithm and
                                chunk size are then taken from the set-
                                ting of environment variable OMP_SCHED-
                                ULE.

              NNOOTTEE:: This option  may  behave  differently  on  Intel(R)
              microprocessors than on non-Intel microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppaarr--tthhrreesshhoolldd[[nn]]

              Sets a threshold for the auto-parallelization of loops.

              AArrgguummeennttss::

              _n                 Is   an  integer  whose  value  is  the
                                threshold for the  auto-parallelization
                                of loops. Possible values are 0 through
                                100.

                                If _n is 0, loops get  auto-parallelized
                                always,  regardless of computation work
                                volume.

                                If _n  is  100,  loops  get  auto-paral-
                                lelized when performance gains are pre-
                                dicted based on the  compiler  analysis
                                data.  Loops get auto-parallelized only
                                if  profitable  parallel  execution  is
                                almost certain.

                                The  intermediate 1 to 99 values repre-
                                sent  the  percentage  probability  for
                                profitable  speed-up. For example, _n=50
                                directs  the  compiler  to  parallelize
                                only  if  there is a 50% probability of
                                the code speeding  up  if  executed  in
                                parallel.

              DDeeffaauulltt::

              -par-threshold100 Loops  get  auto-parallelized  only  if
                                profitable parallel execution is almost
                                certain.  This  is  also the default if
                                you do not specify _n.

              DDeessccrriippttiioonn::

              This option sets a threshold for the auto-parallelization
              of loops based on the probability of profitable execution
              of the loop in parallel. To use  this  option,  you  must
              also specify option [Q]parallel.

              This  option  is  useful for loops whose computation work
              volume cannot be determined at compile-time. The  thresh-
              old  is  usually  relevant  when  the  loop trip count is
              unknown at compile-time.

              The compiler applies a heuristic that  tries  to  balance
              the  overhead  of  creating  multiple  threads versus the
              amount  of  work  available  to  be  shared  amongst  the
              threads.

              NNOOTTEE::  This  option  may  behave  differently on Intel(R)
              microprocessors than on non-Intel microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppccnn

              Enables control of floating-point significand  precision.

              AArrgguummeennttss::

              _n                 Is the floating-point significand  pre-
                                cision. Possible values are:

                                32             Rounds  the  significand
                                               to 24 bits (single  pre-
                                               cision).

                                64             Rounds  the  significand
                                               to 53 bits (double  pre-
                                               cision).

                                80             Rounds  the  significand
                                               to  64  bits   (extended
                                               precision).

              DDeeffaauulltt::

              -pc80             On Linux* and OS X* systems, the float-
                                ing-point significand is rounded to  64
                                bits.

              DDeessccrriippttiioonn::

              This option enables control of floating-point significand
              precision.

              Some floating-point algorithms are sensitive to the accu-
              racy of the significand, or fractional part of the float-
              ing-point value. For example, iterative  operations  like
              division  and  finding  the square root can run faster if
              you lower the precision with the this option.

              Note that a change of the default  precision  control  or
              rounding  mode,  for example, by using the [Q]pc32 option
              or by user intervention, may affect the results  returned
              by some of the mathematical functions.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppcchh

              Tells  the compiler to use appropriate precompiled header
              files.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  does  not  create or use
                                precompiled headers unless you tell  it
                                to do so.

              DDeessccrriippttiioonn::

              This option tells the compiler to use appropriate precom-
              piled header (PCH) files. If none are available, they are
              created  as sourcefile.pchi. This option is supported for
              multiple source files.

              The -pch option will use PCH  files  created  from  other
              sources  if  the headers files are the same. For example,
              if you compile source1.cpp using -pch, then  source1.pchi
              is  created.  If you then compile source2.cpp using -pch,
              the compiler will use source1.pchi if it detects the same
              headers.

              CCAAUUTTIIOONN::  Depending  on how you organize the header files
              listed in your sources, this option may increase  compile
              times.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppcchh--ccrreeaattee ffiilleennaammee

              Tells the compiler to create a precompiled header file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is  the name for the precompiled header
                                file. A space must  appear  before  the
                                file name. It can include a path.

              DDeeffaauulltt::

              OFF               The  compiler  does  not  create or use
                                precompiled headers unless you tell  it
                                to do so.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to create a precompiled
              header (PCH) file. It is supported only for single source
              file compilations.

              Note  that  the  .pchi  extension  is  not  automatically
              appended to the file name.

              This option cannot be used in the same compilation as the
              -pch-use option.

              On  Windows* OS*, option -pch-create is equivalent to the
              /Yc option.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

              Windows: /Yc

       --ppcchh--ddiirr ddiirr

              Tells the compiler the location  for  precompiled  header
              files.

              AArrgguummeennttss::

              _d_i_r               Is  the  path  for  precompiled  header
                                files. The path must exist.

              DDeeffaauulltt::

              OFF               The  compiler  does  not  create or use
                                precompiled headers unless you tell  it
                                to do so.

              DDeessccrriippttiioonn::

              This  option  tells the compiler the location for precom-
              piled header files.  It denotes where to find precompiled
              header files, and where new PCH files should be placed.

              This  option  can be used with the -pch, -pch-create, and
              -pch-use options.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ppcchh--uussee ffiilleennaammee

              Tells the compiler to use a precompiled header file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of the  precompiled  header
                                file to use. A space must appear before
                                the file name. It can include a path.

              DDeeffaauulltt::

              OFF               The compiler does  not  create  or  use
                                precompiled  headers unless you tell it
                                to do so.

              DDeessccrriippttiioonn::

              This option tells  the  compiler  to  use  a  precompiled
              header (PCH) file.

              It is supported for multiple source files when all source
              files use the same .pchi file.

              This option cannot be used in the same compilation as the
              -pch-create option.

              To  learn  how  to  optimize  compile times using the PCH
              options, see "Using  Precompiled  Header  Files"  in  the
              User's Guide.

              On Windows* OS*, option -pch-use is equivalent to the /Yu
              option.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

              Windows: /Yu

       --ppiiee

       --nnoo--ppiiee

              Determines whether the compiler generates  position-inde-
              pendent code that will be linked into an executable.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              varies            On Linux* OS and on OS X* versions less
                                than  10.7,  the default is -no-pie. On
                                OS X* 10.7 or greater, the  default  is
                                -pie.

              DDeessccrriippttiioonn::

              This  option  determines  whether  the compiler generates
              position-independent code that will  be  linked  into  an
              executable.  To enable generation of position-independent
              code that will be  linked  into  an  executable,  specify
              -pie.

              To  disable  generation of position-independent code that
              will be linked into an executable, specify -no-pie.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprraaggmmaa--ooppttiimmiizzaattiioonn--lleevveell==iinntteerrpprreettaattiioonn

              Specifies which interpretation of the  optimization_level
              pragma should be used if no prefix is specified.

              AArrgguummeennttss::

              _i_n_t_e_r_p_r_e_t_a_t_i_o_n    Compiler-specific   interpretation   of
                                optimization_level   pragma.   Possible
                                values are:

                                Intel          Specify the Intel inter-
                                               pretation.

                                GCC            Specify  the  GCC inter-
                                               pretation.

              DDeeffaauulltt::

              -pragma-optimization-level=Intel
                                Use the  Intel  interpretation  of  the
                                optimization_level pragma.

              DDeessccrriippttiioonn::

              Specifies  which interpretation of the optimization_level
              pragma should be used if no prefix is specified.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprreecc--ddiivv

       --nnoo--pprreecc--ddiivv

              Improves precision of floating-point divides.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -prec-div         The  compiler  uses  this  method   for
                                floating-point divides.

              DDeessccrriippttiioonn::

              This option improves precision of floating-point divides.
              It has a slight impact on speed.

              With some optimizations, such as -msse2  (Linux*  OS)  or
              /arch:SSE2  (Windows* OS), the compiler may change float-
              ing-point division computations  into  multiplication  by
              the  reciprocal  of  the denominator. For example, A/B is
              computed as A * (1/B) to improve the speed of the  compu-
              tation.

              However, sometimes the value produced by this transforma-
              tion is not as accurate as full IEEE division. When it is
              important  to  have fully precise IEEE division, use this
              option to disable the  floating-point  division-to-multi-
              plication optimization. The result is more accurate, with
              some loss of performance.

              If you specify -no-prec-div (Linux*  OS  and  OS  X*)  or
              /Qprec-div-  (Windows* OS), it enables optimizations that
              give slightly less precise results than full  IEEE  divi-
              sion.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprreecc--ssqqrrtt

       --nnoo--pprreecc--ssqqrrtt

              Improves precision of square root implementations.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-prec-sqrt     The  compiler  uses  a  faster but less
                                precise implementation of square  root.

                                However,  the  default is -prec-sqrt if
                                any of the following options are speci-
                                fied:  -O0  or -mp1 on Linux* and OS X*
                                systems.

              DDeessccrriippttiioonn::

              This option improves precision of square root implementa-
              tions. It has a slight impact on speed.

              This option inhibits any optimizations that can adversely
              affect the precision of a square  root  computation.  The
              result is fully precise square root implementations, with
              some loss of performance.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprriinntt--mmuullttii--lliibb

              Prints information about where system libraries should be
              found.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No information is  printed  unless  the
                                option is specified.

              DDeessccrriippttiioonn::

              This   option   prints  information  about  where  system
              libraries should be found, but no compilation occurs.  On
              Linux*  systems,  it  is  provided for compatibility with
              gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ddaattaa--oorrddeerr ((LL**XX oonnllyy))

       --nnoo--pprrooff--ddaattaa--oorrddeerr ((LL**XX oonnllyy))

              Enables or disables data ordering if  profiling  informa-
              tion is enabled.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-prof-data-order
                                Data ordering is disabled.

              DDeessccrriippttiioonn::

              This option enables or disables data ordering if  profil-
              ing  information  is enabled. It controls the use of pro-
              filing information to order static program data items.

              For this option to be effective, you must do the  follow-
              ing:

              · For   instrumentation  compilation,  you  must  specify
                option [Q]prof-gen setting globdata.

              · For  feedback  compilation,  you   must   specify   the
                [Q]prof-use   option.   You  must  not  use  multi-file
                optimization by specifying options such  as  [Q]ipo  or
                [Q]ipo-c.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ddiirr ddiirr

              Specifies  a  directory  for profiling information output
              files.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _d_i_r               Is  the  name of the directory. You can
                                specify a relative pathname or an abso-
                                lute pathname.

              DDeeffaauulltt::

              OFF               Profiling  output  files  are placed in
                                the directory where the program is com-
                                piled.

              DDeessccrriippttiioonn::

              This  option specifies a directory for profiling informa-
              tion output files (*.dyn and *.dpi). The specified direc-
              tory must already exist.

              You  should  specify this option using the same directory
              name for both instrumentation and feedback  compilations.
              If  you  move the .dyn files, you need to specify the new
              path.

              Option /Qprof-dir is equivalent to option  /Qcov-dir.  If
              you  specify  both  options, the last option specified on
              the command line takes precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ffiillee ffiilleennaammee

              Specifies an alternate file name for the  profiling  sum-
              mary files.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of  the  profiling  summary
                                file.

              DDeeffaauulltt::

              OFF               The  profiling  summary  files have the
                                file name pgopti.*

              DDeessccrriippttiioonn::

              This option specifies an alternate file name for the pro-
              filing  summary  files.  The _f_i_l_e_n_a_m_e is used as the base
              name for files created by different profiling passes.

              If you add this option to profmerge, the .dpi  file  will
              be named _f_i_l_e_n_a_m_e.dpi instead of pgopti.dpi.

              If  you  specify this option with option [Q]prof-use, the
              .dpi  file  will  be  named   _f_i_l_e_n_a_m_e.dpi   instead   of
              pgopti.dpi.

              Option /Qprof-file is equivalent to option /Qcov-file. If
              you specify both options, the last  option  specified  on
              the command line takes precedence.

              NNOOTTEE::  When  you  use  option  [Q]prof-file, you can only
              specify a file name. If you want to specify a path (rela-
              tive  or absolute) for _f_i_l_e_n_a_m_e, you must also use option
              [Q]prof-dir.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ffuunncc--ggrroouuppss ((LL**XX oonnllyy))

       --nnoo--pprrooff--ffuunncc--ggrroouuppss ((LL**XX oonnllyy))

              Enables or disables function grouping if profiling infor-
              mation is enabled.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-prof-func-groups
                                Function grouping is disabled.

              DDeessccrriippttiioonn::

              This option enables or disables function grouping if pro-
              filing information is enabled.

              A  "function  grouping"  is  a  profiling optimization in
              which entire routines are placed either in the cold  code
              section or the hot code section.

              If  profiling information is enabled by option -prof-use,
              option -prof-func-groups is set and function grouping  is
              enabled.    However,    if    you    explicitly    enable
              -prof-func-order, function ordering is performed  instead
              of function grouping.

              If  you  want to disable function grouping when profiling
              information is enabled, specify -no-prof-func-groups.

              To set the hotness threshold for function  grouping,  use
              option -prof-hotness-threshold.

       --pprrooff--ffuunncc--oorrddeerr ((LL**XX oonnllyy))

       --nnoo--pprrooff--ffuunncc--oorrddeerr ((LL**XX oonnllyy))

              Enables or disables function ordering if profiling infor-
              mation is enabled.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-prof-func-order
                                Function ordering is disabled.

              DDeessccrriippttiioonn::

              This option enables or disables function ordering if pro-
              filing information is enabled.

              For this option to be effective, you must do the  follow-
              ing:

              · For   instrumentation  compilation,  you  must  specify
                option [Q]prof-gen setting srcpos.

              · For feedback compilation, you must specify [Q]prof-use.
                You  must not use multi-file optimization by specifying
                options such as [Q]ipo or [Q]ipo-c.

              If you enable profiling information by specifying  option
              [Q]prof-use,  option [Q]prof-func-groups is set and func-
              tion grouping is enabled.   However,  if  you  explicitly
              enable  the [Q]prof-func-order  option, function ordering
              is performed instead of function grouping.

              On Linux* systems, this  option  is  only  available  for
              Linux linker 2.15.94.0.1, or later.

              To  set  the  hotness threshold for function grouping and
              function ordering, use option  [Q]prof-hotness-threshold.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ggeenn[[==kkeeyywwoorrdd[[,, kkeeyywwoorrdd]],,......]]

       --nnoo--pprrooff--ggeenn

              Produces  an instrumented object file that can be used in
              profile guided optimization.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Not available on IA-32 archi-
              tecture targeting Intel(R)  Graphics  Technology,  or  on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies  details for the instrumented
                                file. Possible values are:

                                default        Produces an instrumented
                                               object file. This is the
                                               same as  specifying  the
                                               [Q]prof-gen  option with
                                               no keyword.

                                srcpos         Produces an instrumented
                                               object     file     that
                                               includes  extra   source
                                               position information.

                                globdata       Produces an instrumented
                                               object     file     that
                                               includes information for
                                               global data layout.

                                [no]threadsafe Produces an instrumented
                                               object     file     that
                                               includes the  collection
                                               of  PGO data on applica-
                                               tions that  use  a  high
                                               level of parallelism. If
                                               [Q]prof-gen is specified
                                               with   no  keyword,  the
                                               default is nothreadsafe.

                                               On Intel(R) 64 architec-
                                               ture targeting  Intel(R)
                                               MIC   Architecture,  the
                                               only valid mode is  key-
                                               word threadsafe.

              DDeeffaauulltt::

              -no-prof-gen      Profile generation is disabled.

              DDeessccrriippttiioonn::

              This option produces an instrumented object file that can
              be used in profile guided optimization. It gets the  exe-
              cution count of each basic block.

              You  can  specify  more than one setting for [Q]prof-gen.
              For example, you can specify the following:

              –prof-gen=scrpos -prof-gen=threadsafe (Linux* OS and  OS
              X*)  -prof-gen=scrpos,  threadsafe (this is equivalent to
              the above)


              /Qprof-gen:scrpos  /Qprof-gen:threadsafe  (Windows*   OS)
              /Qprof-gen:scrpos,  threadsafe (this is equivalent to the
              above)


              If you specify keyword srcpos or globdata, a static  pro-
              file  information  file (.spi) is created. These settings
              may increase the time needed to do a parallel build using
              -prof-gen, because of contention writing the .spi file.

              These  options  are used in phase 1 of the Profile Guided
              Optimizer (PGO)  to  instruct  the  compiler  to  produce
              instrumented code in your object files in preparation for
              instrumented execution.

              When the [Q]prof-gen option is used to produce an instru-
              mented binary file for profile generation, some optimiza-
              tions are disabled.  Those optimizations are not disabled
              for any subsequent profile-guided compilation with option
              [Q]prof-use that makes use of the generated profiles.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--hhoottnneessss--tthhrreesshhoolldd==nn ((LL**XX oonnllyy))

              Lets you set the hotness threshold for function  grouping
              and function ordering.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n                 Is the hotness threshold. _n is  a  per-
                                centage  having  a  value between 0 and
                                100 inclusive. If you specify 0,  there
                                will be no hotness threshold setting in
                                effect for function grouping and  func-
                                tion ordering.

              DDeeffaauulltt::

              OFF               The  compiler's default hotness thresh-
                                old setting of 10 percent is in  effect
                                for   function  grouping  and  function
                                ordering.

              DDeessccrriippttiioonn::

              This option lets you set the hotness threshold for  func-
              tion grouping and function ordering.

              The "hotness threshold" is the percentage of functions in
              the application that should be  placed  in  the  applica-
              tion's hot region.  The hot region is the most frequently
              executed part of  the  application.   By  grouping  these
              functions  together  into  one  hot  region,  they have a
              greater probability of remaining resident in the instruc-
              tion  cache.  This  can enhance the application's perfor-
              mance.

              For this option to take effect, you must  specify  option
              [Q]prof-use and one of the following:

              · On Linux systems: -prof-func-groups or -prof-func-order

              · On Windows systems: /Qprof-func-order

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ssrrcc--ddiirr

       --nnoo--pprrooff--ssrrcc--ddiirr

              Determines whether directory information  of  the  source
              file under compilation is considered when looking up pro-
              file data records.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              prof-src-dir      Directory  information  is  used   when
                                looking  up profile data records in the
                                .dpi file.

              DDeessccrriippttiioonn::

              This option determines whether directory  information  of
              the  source  file  under  compilation  is considered when
              looking up profile data records in the .dpi file. To  use
              this  option,  you  must  also  specify  the  [Q]prof-use
              option.

              If the option is enabled, directory information  is  con-
              sidered  when  looking up the profile data records within
              the .dpi file. You can specify directory  information  by
              using one of the following options:

              · Linux and OS X:  -prof-src-root or  -prof-src-root-cwd

              · Windows:  /Qprof-src-root or /Qprof-src-root-cwd

              If  the  option  is  disabled,  directory  information is
              ignored and only the name of the file is used to find the
              profile data record.

              Note  that  option [Q]prof-src-dir controls how the names
              of the user's source files  get  represented  within  the
              .dyn  or  .dpi  files.   Option [Q]prof-dir specifies the
              location of the .dyn or the .dpi files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ssrrcc--rroooott==ddiirr

              Lets you use relative directory  paths  when  looking  up
              profile data and specifies a directory as the base.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _d_i_r               Is the base for the relative paths.

              DDeeffaauulltt::

              OFF               The setting of relevant options  deter-
                                mines  the  path  used  when looking up
                                profile data records.

              DDeessccrriippttiioonn::

              This option lets you use relative  directory  paths  when
              looking  up profile data in .dpi files. It lets you spec-
              ify a directory as the base. The paths are relative to  a
              base  directory specified during the [Q]prof-gen compila-
              tion phase.

              This option is available during the following  phases  of
              compilation:

              · Linux OS and OS X: -prof-gen and -prof-use phases

              · Windows OS: /Qprof-gen and /Qprof-use phases

              When  this  option  is  specified  during the [Q]prof-gen
              phase, it stores information into the .dyn or .dpi  file.
              Then,  when  .dyn  files  are merged together or the .dpi
              file is loaded, only the directory information below  the
              root directory is used for forming the lookup key.

              When  this  option  is  specified  during the [Q]prof-use
              phase, it specifies a root directory  that  replaces  the
              root  directory  specified  at  the [Q]prof-gen phase for
              forming the lookup keys.

              To    be    effective,    this    option    or     option
              [Q]prof-src-root-cwd   must   be   specified  during  the
              [Q]prof-gen phase. In addition, if one of  these  options
              is  not  specified,  absolute  paths are used in the .dpi
              file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--ssrrcc--rroooott--ccwwdd

              Lets you use relative directory  paths  when  looking  up
              profile  data and specifies the current working directory
              as the base.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The setting of relevant options  deter-
                                mines  the  path  used  when looking up
                                profile data records.

              DDeessccrriippttiioonn::

              This option lets you use relative  directory  paths  when
              looking  up  profile data in .dpi files. It specifies the
              current working  directory  as  the  base.  To  use  this
              option, you must also specify option [Q]prof-use.

              This  option  is available during the following phases of
              compilation:

              · Linux OS and OS X: -prof-gen and -prof-use phases

              · Windows OS: /Qprof-gen and /Qprof-use phases

              When this option  is  specified  during  the  [Q]prof-gen
              phase,  it stores information into the .dyn or .dpi file.
              Then, when .dyn files are merged  together  or  the  .dpi
              file  is loaded, only the directory information below the
              root directory is used for forming the lookup key.

              When this option  is  specified  during  the  [Q]prof-use
              phase,  it  specifies  a root directory that replaces the
              root directory specified at  the  [Q]prof-gen  phase  for
              forming the lookup keys.

              To  be  effective, this option or option [Q]prof-src-root
              must be specified during the [Q]prof-gen phase. In  addi-
              tion,  if one of these options is not specified, absolute
              paths are used in the .dpi file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--uussee[[==kkeeyywwoorrdd]]

       --nnoo--pprrooff--uussee

              Enables the use of profiling information during optimiza-
              tion.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies additional instructions. Pos-
                                sible values are:

                                weighted       Tells    the   profmerge
                                               utility   to   apply   a
                                               weighting  to  the  .dyn
                                               file values when  creat-
                                               ing  the  .dpi  file  to
                                               normalize    the    data
                                               counts when the training
                                               runs have  differentexe-
                                               cution  durations.  This
                                               argument  only  has   an
                                               effect when the compiler
                                               invokes  the   profmerge
                                               utility  to  create  the
                                               .dpi file. This argument
                                               does  not have an effect
                                               if  the  .dpi  file  was
                                               previously created with-
                                               out weighting.

                                [no]merge      Enables   or    disables
                                               automatic  invocation of
                                               the  profmerge  utility.
                                               The  default  is  merge.
                                               Note  that  you   cannot
                                               specify   both  weighted
                                               and nomerge.  If you try
                                               to  specify both values,
                                               a warning will  be  dis-
                                               played and nomerge takes
                                               precedence.

                                default        Enables the use of  pro-
                                               filing  information dur-
                                               ing  optimization.   The
                                               profmerge   utility   is
                                               invoked by default. This
                                               value  is  the  same  as
                                               specifying   [Q]prof-use
                                               with no argument.

              DDeeffaauulltt::

              -no-prof-use      Profiling  information is not used dur-
                                ing optimization.

              DDeessccrriippttiioonn::

              This option enables  the  use  of  profiling  information
              (including function splitting and function grouping) dur-
              ing optimization. It enables option  /Qfnsplit  (Windows*
              OS).

              This  option  instructs  the  compiler  to produce a pro-
              file-optimized executable and it merges available profil-
              ing output files into a pgopti.dpi file.

              Note  that  there is no way to turn off function grouping
              if you enable it using this option.

              To set the hotness threshold for  function  grouping  and
              function  ordering, use option [Q]prof-hotness-threshold.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooff--vvaalluuee--pprrooffiilliinngg[[==kkeeyywwoorrdd]]

              Controls which values are value profiled.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              keyword           Controls which type of value  profiling
                                is performed. Possible values are:

                                none           Prevents  all  types  of
                                               value profiling.

                                nodivide       Prevents value profiling
                                               of non-compile time con-
                                               stants used in  division
                                               or remainder operations.

                                noindcall      Prevents value profiling
                                               of function addresses at
                                               indirect call sites.

                                all            Enables  all  types   of
                                               value profiling.

              You  can  specify more than one keyword, but they must be
              separated by commas.

              DDeeffaauulltt::

              all               All value profile types are enabled and
                                value profiling is performed.

              DDeessccrriippttiioonn::

              This option controls which features are value profiled.

              If  this  option is specified with option [Q]prof-gen, it
              turns off instrumentation of operations of the  specified
              type. This also prevents feedback of values for the oper-
              ations.

              If this option is specified with option  [Q]prof-use,  it
              turns  off  feedback of values collected of the specified
              type.

              If you specify level 2 or higher  for  option-qopt-report
              (Linux*  OS and OS X*) or /Qopt-report (Windows* OS), the
              value  profiling  specialization  information   will   be
              reported within the PGO optimization report.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooffiillee--ffuunnccttiioonnss

              Inserts  instrumentation  calls at a function's entry and
              exit points.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  instrumentation  calls are inserted
                                at a function's entry and exit  points.

              DDeessccrriippttiioonn::

              This option inserts instrumentation calls at a function's
              entry and exit points within a  single-threaded  applica-
              tion  to  collect the cycles spent within the function to
              produce  reports  that  can  help  in  identifying   code
              hotspots.

              When  the  instrumented  application  is run, this option
              causes the generation  of  a  loop_prof_funcs_<name>.dump
              file, where <name> is a timestamp for the run.

              The  same  data  values  are  also  dumped  into the file
              loop_prof_<name>.xml for use with the data viewer  appli-
              cation,  unless you turn off the output format by setting
              the environment variable INTEL_LOOP_PROF_XML_DUMP to 0.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooffiillee--llooooppss==kkeeyywwoorrdd

              Inserts instrumentation calls at a function's  entry  and
              exit points, and before and after instrumentable loops.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              keyword           Specifies which type  of  loops  should
                                have  instrumentation.  Possible values
                                are:

                                inner          Inserts  instrumentation
                                               before  and  after inner
                                               loops.

                                outer          Inserts  instrumentation
                                               before  and  after outer
                                               loops.

                                all            Inserts  instrumentation
                                               before   and  after  all
                                               loops.

              DDeeffaauulltt::

              OFF               No instrumentation calls  are  inserted
                                at  a function's entry and exit points,
                                or  before  and  after   instrumentable
                                loop.

              DDeessccrriippttiioonn::

              This option inserts instrumentation calls at a function's
              entry and exit points within a  single-threaded  applica-
              tion.   For  unthreaded  applications,  it  also  inserts
              instrumentation before and after instrumentable loops  of
              the type listed in _k_e_y_w_o_r_d.

              When  the  instrumented  application  is run, this option
              causes the generation  of  a  loop_prof_funcs_<name>.dump
              file and a loop_prof_funcs_<name>.dump file, where <name>
              is a timestamp for the run.

              The same timestamp is used for the loop file and function
              file.   This  identifies  that the loop data and function
              data were from the same program run.

              The same data  values  are  also  dumped  into  the  file
              loop_prof_<name>.xml  for use with the data viewer appli-
              cation, unless you turn off the output format by  setting
              the environment variable INTEL_LOOP_PROF_XML_DUMP to 0.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pprrooffiillee--llooooppss--rreeppoorrtt[[==nn]]

              Controls  the level of detail for the data collected when
              instrumentation occurs before and after certain loops.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n                 Is a value denoting the level of detail
                                to report. Possible values are:

                                1              Reports the cycle counts
                                               on  entry  and  exits of
                                               loops.   This   is   the
                                               default   if  _n  is  not
                                               specified.

                                2              Reports  the   level   1
                                               default   details,   but
                                               also includes  the  loop
                                               min/max and average loop
                                               iteration counts.

                                               To  collect   the   loop
                                               iteration  counts, addi-
                                               tional   instrumentation
                                               is  inserted.  This  can
                                               increase overhead in the
                                               instrumented application
                                               and slow performance.

              DDeeffaauulltt::

              1                 The report shows the  cycle  counts  on
                                entry and exits of loops.

              DDeessccrriippttiioonn::

              This  option  controls  the  level of detail for the data
              collected when instrumentation occurs  before  and  after
              certain  loops. To use this option, you must also specify
              option [Q]profile-loops.

              The report appears in  file  loop_prof_loops_<name>.dump,
              where  <name>  is  a  timestamp  value  for  the run. The
              columns listed in the report will be based on  the  level
              of detail that was selected during instrumentation.

              It  is recommended that the same report level be used for
              all files that are instrumented for the  application.  If
              different files of the application were instrumented with
              different levels, the report will contain all the columns
              of  the highest detail level, but with default values for
              unavailable fields for files that  were  instrumented  at
              lower levels.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --pptthhrreeaadd

              Tells  the  compiler  to  use pthreads library for multi-
              threading support.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  does  not  use  pthreads
                                library for multithreading support.

              DDeessccrriippttiioonn::

              Tells the compiler to use  pthreads  library  for  multi-
              threading support.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooffffllooaadd[[==kkeeyywwoorrdd]] ((LL**XX oonnllyy))

       --nnoo--qqooffffllooaadd ((LL**XX oonnllyy))

              Lets you specify the mode for offloading or tell the com-
              piler to ignore language constructs for offloading.  This
              option only applies to Intel(R) MIC Architecture. Options
              /Qoffload- and  /Qoffload:none  are  also  available  for
              Intel(R)  Graphics  Technology.  Option -[no-]qoffload is
              the replacement option for -[no-]offload, which is depre-
              cated.

              AArrcchhiitteeccttuurree   RReessttrriiccttiioonnss::   Keywords   mandatory   and
              optional:  Only available  on  Intel(R)  64  architecture
              targeting  Intel(R)  MIC Architecture/Qoffload- and /Qof-
              fload:none: Only available on  Intel(R)  64  architecture
              targeting  Intel(R)  MIC Architecture, on IA-32 architec-
              ture  targeting  Intel(R)  Graphics  Technology,  or   on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              keyword           Specifies the mode for offloading or it
                                disables  offloading.  Possible  values
                                are:

                                none           Tells  the  compiler  to
                                               ignore   language   con-
                                               structs  for offloading.
                                               Warnings are  issued  by
                                               the  compiler.  This  is
                                               equivalent to the  nega-
                                               tive form of the option.

                                mandatory      Specifies that  offload-
                                               ing     is     mandatory
                                               (required). If the  tar-
                                               get  is  not  available,
                                               one  of  the   following
                                               occurs:

                                               · If no status clause is
                                                 specified   for    the
                                                 offload   pragma,  the
                                                 program fails with  an
                                                 error message.

                                               · If  the  status clause
                                                 is specified, the pro-
                                                 gram  continues execu-
                                                 tion on the CPU.

                                optional       Specifies that  offload-
                                               ing      is     optional
                                               (requested). If the tar-
                                               get  is  not  available,
                                               the program is  executed
                                               on the CPU, not the tar-
                                               get.

              DDeeffaauulltt::

              mandatory         The compiler recognizes  language  con-
                                structs  for  offloading  if  they  are
                                specified.    If    option    -qoffload
                                (Linux*)  or  /Qoffload  (Windows*)  is
                                specified with no _k_e_y_w_o_r_d, the  default
                                is mandatory.

              DDeessccrriippttiioonn::

              This  option  lets you specify the mode for offloading or
              tell the  compiler  to  ignore  language  constructs  for
              offloading.

              Option  -[no-]qoffload  is  the  replacement  option  for
              -[no-]offload, which is deprecated.

              On Intel(R) Graphics Technology, the only options you can
              specify are /Qoffload- or /Qoffload:none, which tells the
              compiler to ignore language constructs for offloading. By
              default,  offloading  is  optional  for Intel(R) Graphics
              Technology.

              If no -qoffload (Linux*) or /Qoffload  (Windows*)  option
              appears  on  the  command  line, then offload pragmas are
              processed and:

              · The mandatory or optional clauses are obeyed if present

              · If  no  mandatory  or  optional  clause is present, the
                offload is mandatory

              If any of the following appears on the command line, then
              offload pragmas are ignored:

              · Linux* OS: -qoffload=none or -no-qoffload

              · Windows* OS: /offload:none or /Qoffload-

              However,  OpenMP*  pragmas  for  coprocessor control (for
              example, omp target)  are  recognized  if  the  [Q]openmp
              option is specified, regardless of whether or not offload
              pragmas are recognized or ignored.

              If _k_e_y_w_o_r_d mandatory or optional appears for  [Q]offload,
              then offload pragmas are processed and:

              · The  mandatory  or optional clauses are obeyed, regard-
                less of the -qoffload  (Linux*) or /Qoffload (Windows*)
                _k_e_y_w_o_r_d

              · If no mandatory or optional clause is present, then the
                -qoffload  (Linux*) or /Qoffload (Windows*) _k_e_y_w_o_r_d  is
                obeyed

              If  the status clause is specified for an offload pragma,
              it affects run-time behavior.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooffffllooaadd--aattttrriibbuuttee--ttaarrggeett==ttaarrggeett--nnaammee ((LL**XX oonnllyy))

              Causes the compiler  to  flag  file-scope  functions  and
              data   objects  in  the  source  file  with  the  offload
              attribute target(mic) or target(gfx).  This  option  only
              applies to Intel(R) MIC Architecture and  Intel(R) Graph-
              ics Technology.    Option  -qoffload-attribute-target  is
              the  replacement  option  for  -offload-attribute-target,
              which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _t_a_r_g_e_t_-_n_a_m_e       Is a specific  target  or  application.
                                The  supported values for this argument
                                are:

                                · mic for Intel(R) MIC Architecture

                                · gfx for Intel(R) Graphics Technology

              DDeeffaauulltt::

              OFF               The compiler does not  flag  file-scope
                                functions   and  data  objects  in  the
                                source file with the offload  attribute
                                target(mic) or target(gfx).

              DDeessccrriippttiioonn::

              This  option causes the compiler to flag file-scope func-
              tions and data  objects  in  the  source  file  with  the
              offload attribute target(mic) or target(gfx).

              This   option   is   similar   to   using   the    pragma
              offload_attribute target(mic) to set the  attribute  tar-
              get(mic),   or  offload_attribute  target(gfx) to set the
              attribute  target(gfx),    for  all  functions  and  data
              objects in the file scope.

              Target  declspecs/attributes  on  individual declarations
              take precedence  over  any  offload_attribute  pragma  in
              effect,  and declspecs, attributes, and pragmas all  take
              precedence over this option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooffffllooaadd--ooppttiioonn,,ttaarrggeett,,ttooooll,,""ooppttiioonn--lliisstt"" ((LL**XX oonnllyy))

              Lets you explicitly specify options to be  used  for  the
              specified  target  and  tool. This option only applies to
              Intel(R) MIC Architecture and  Intel(R) Graphics Technol-
              ogy.   Option  -qoffload-option is the replacement option
              for -offload-option, which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _t_a_r_g_e_t            Is the target architecture or  applica-
                                tion.  The  supported  values  for this
                                argument are:

                                · mic for Intel(R) MIC Architecture

                                · gfx for Intel(R) Graphics Technology

              _t_o_o_l              Is the tool  that  the  _o_p_t_i_o_n_-_l_i_s_t  is
                                associated  with.  It can be one of the
                                following values: ld, link, as, or com-
                                piler.

                                ld  is  the  linker  tool on Linux* OS;
                                link is the linker tool on Windows* OS.

              _o_p_t_i_o_n_-_l_i_s_t       Is  one  or  more options that are spe-
                                cific to the tool.  The quotation  mark
                                delimiters  are  required. Each  option
                                in the _o_p_t_i_o_n_-_l_i_s_t must be separated by
                                a space.

                                For  tool  compiler,  use compiler-spe-
                                cific  options;  for   tool   ld,   use
                                linker-specific  options;  for tool as,
                                use  assembler-specific  options.   The
                                options  for  the  tools always use the
                                Linux form even when compiling on  Win-
                                dows.

              DDeeffaauulltt::

              OFF               The  compiler  does not pass additional
                                options to the separate  tools  on  the
                                target architecture.

              DDeessccrriippttiioonn::

              This  option  lets  you  explicitly specify options to be
              used for the specified target and tool. It can be  speci-
              fied multiple times on the command line.

              When  building  a  heterogeneous  application, the driver
              passes all compiler options specified on the command-line
              to  the  host compilation and only certain options to the
              offload compilation. To see a list of options  passed  to
              the offload compilation, specify option watch=mic-cmd.

              If  you  want  to  pass additional options to the offload
              compilation, or you would like to  override  the  command
              line  options passed to offload compilation, you must use
              option  -qoffload-option  (Linux*)  or   /Qoffload-option
              (Windows*)   to  specify  the  additional  or  overriding
              options.

              NNOOTTEE:: If you specify the options I, L, D, or U  with  the
              option   -qoffload-option  (Linux*)  or  /Qoffload-option
              (Windows*), they override  any  other  I,  L,  D,  and  U
              options  that  are  automatically  passed  from  host  to
              offload compilation.

              To achieve the overriding effect, the  I,  L,  D,  and  U
              options  specified  using  -qoffload-option  (Linux*)  or
              /Qoffload-option (Windows*) are placed ahead of the I, L,
              D,  and U options automatically copied over from the host
              compilation. All  other  options  specified  using  -qof-
              fload-option  (Linux*) or /Qoffload-option (Windows*) are
              placed after the options copied over from host to offload
              compilation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp

              Enables  the parallelizer to generate multi-threaded code
              based on  OpenMP*  directives.  Option  -qopenmp  is  the
              replacement option for -openmp, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  OpenMP* multi-threaded code is gen-
                                erated by the compiler.

              DDeessccrriippttiioonn::

              This  option  enables  the   parallelizer   to   generate
              multi-threaded code based on OpenMP* directives. The code
              can be executed in parallel on both uniprocessor and mul-
              tiprocessor systems.

              This option works with any optimization level. Specifying
              no optimization (-O0 on Linux* OS or /Od on Windows*  OS)
              helps to debug OpenMP applications.

              NNOOTTEE::  On OS X* systems, when you enable OpenMP* API, you
              must also set the DYLD_LIBRARY_PATH environment  variable
              within Xcode* or an error will be displayed.

              NNOOTTEE:: Options that use OpenMP* API are available for both
              Intel(R) microprocessors and  non-Intel  microprocessors,
              but these options may perform additional optimizations on
              Intel(R) microprocessors than they perform  on  non-Intel
              microprocessors.   The list of major, user-visible OpenMP
              constructs and features that may perform  differently  on
              Intel(R) microprocessors versus non-Intel microprocessors
              include: locks (internal and user  visible),  the  SINGLE
              construct,  barriers  (explicit  and  implicit), parallel
              loop scheduling, reductions,  memory  allocation,  thread
              affinity, and binding.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -fopenmp

       --qqooppeennmmpp--lliibb==ttyyppee

              Lets  you  specify an OpenMP* run-time library to use for
              linking. Option -qopenmp-lib is  the  replacement  option
              for -openmp-lib, which is deprecated.

              AArrgguummeennttss::

              _t_y_p_e              Specifies  the  type of library to use;
                                it implies compatibility  levels.  Cur-
                                rently, the only possible value is:

                                compat         Tells  the  compiler  to
                                               use  the   compatibility
                                               OpenMP* run-time library
                                               (libiomp). This  setting
                                               provides   compatibility
                                               with object  files  cre-
                                               ated   using  Microsoft*
                                               and GNU* compilers.

              DDeeffaauulltt::

              -qopenmp-lib=compat
                                The  compiler  uses  the  compatibility
                                OpenMP* run-time library (libiomp).

              DDeessccrriippttiioonn::

              This  option lets you specify an OpenMP* run-time library
              to use for linking.

              The compatibility OpenMP run-time libraries are  compati-
              ble with object files created using the Microsoft* OpenMP
              run-time library  (vcomp)  or  the  GNU  OpenMP  run-time
              library (libgomp).

              To use the compatibility OpenMP run-time library, compile
              and link your application using the  compat  setting  for
              option  -qopenmp-lib  (Linux*  and OS X*) or /Qopenmp-lib
              (Windows*). To use this option, you must also specify one
              of the following compiler options:

              · Linux* OS: -qopenmp  or -qopenmp-stubs

              · Windows* OS: /Qopenmp or /Qopenmp-stubs

              On  Windows*  systems, the compatibility OpenMP* run-time
              library lets you combine OpenMP*  object  files  compiled
              with  the  Microsoft*  C/C++ compiler with OpenMP* object
              files compiled with the  Intel(R)  C,  Intel(R)  C++,  or
              Intel(R)  Fortran compilers. The linking phase results in
              a single, coherent copy of the run-time library.

              On  Linux*  systems,  the  compatibility  Intel   OpenMP*
              run-time  library  lets  you combine OpenMP* object files
              compiled with the GNU* gcc  or  gfortran  compilers  with
              similar  OpenMP*  object files compiled with the Intel(R)
              C, Intel(R) C++, or Intel(R) Fortran compilers. The link-
              ing  phase  results  in  a  single,  coherent copy of the
              run-time library.

              NNOOTTEE:: The compatibility OpenMP run-time  library  is  not
              compatible  with  object  files created using versions of
              the Intel compilers earlier than 10.0.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--lliinnkk==lliibbrraarryy

              Controls whether the compiler links to static or  dynamic
              OpenMP*  run-time libraries.  Option -qopenmp-link is the
              replacement option for  -openmp-link.  Both  options  are
              deprecated. There is no replacement option.

              AArrgguummeennttss::

              _l_i_b_r_a_r_y           Specifies the OpenMP  library  to  use.
                                Possible values are:

                                static         Tells  the  compiler  to
                                               link  to  static  OpenMP
                                               run-time libraries. Note
                                               that    static    OpenMP
                                               libraries   are   depre-
                                               cated.

                                dynamic        Tells  the  compiler  to
                                               link  to  dynamic OpenMP
                                               run-time libraries.

              DDeeffaauulltt::

              -qopenmp-link=dynamic
                                The compiler links to  dynamic  OpenMP*
                                run-time  libraries. However, if Linux*
                                OS option  -static  is  specified,  the
                                compiler   links   to   static   OpenMP
                                run-time libraries.

              DDeessccrriippttiioonn::

              This option controls whether the compiler links to static
              or dynamic OpenMP* run-time libraries.

              To  link  to the static OpenMP run-time library (RTL) and
              create a  purely  static  executable,  you  must  specify
              -qopenmp-link=static.  However, we strongly recommend you
              use the default setting, -qopenmp-link=dynamic.

              NNOOTTEE:: Compiler options  -static-intel  and  -shared-intel
              (Linux*  OS  and  OS  X*)  have no effect on which OpenMP
              run-time library is linked.

              NNOOTTEE:: On Linux* systems, -qopenmp-link=dynamic cannot  be
              used  in  conjunction  with option -static. If you try to
              specify both options together,  an  error  will  be  dis-
              played.

              NNOOTTEE::  On  Linux  systems,  the  OpenMP  runtime  library
              depends on using libpthread and libc  (libgcc  when  com-
              piled  with  gcc). Libpthread and libc (libgcc) must both
              be static or both be dynamic. If both libpthread and libc
              (libgcc)  are  static,  then  the  static  version of the
              OpenMP runtime should be used.  If  both  libpthread  and
              libc  (libgcc)  are  dynamic,  then  either the static or
              dynamic version of the OpenMP runtime may be used.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--ooffffllooaadd ((LL**XX oonnllyy))

       --nnoo--qqooppeennmmpp--ooffffllooaadd ((LL**XX oonnllyy))

              Enables or disables OpenMP*  offloading  compilation  for
              the  target pragmas. This option only applies to Intel(R)
              MIC Architecture. Option -qopenmp-offload is the replace-
              ment option for -openmp-offload, which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopenmp-offload
                                OpenMP* offloading compilation is  dis-
                                abled.   However,  if  option  -qopenmp
                                (Linux* and OS X*)  or  /Qopenmp  (Win-
                                dows*)  is specified, the default is ON
                                and OpenMP  offloading  compilation  is
                                enabled.

              DDeessccrriippttiioonn::

              This option enables or disables OpenMP* offloading compi-
              lation for the target pragmas.

              You can use this option if you want to enable or  disable
              the  offloading  feature  with  no impact on other OpenMP
              features. In this case,  no  OpenMP  runtime  library  is
              needed to link and the compiler does not need to generate
              OpenMP runtime initialization code.

              If you specify this option with the -qopenmp (Linux*  and
              OS X*) or /Qopenmp (Windows*) option, it can impact other
              OpenMP features.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--rreeppoorrtt[[==nn]]

              Controls the OpenMP* parallelizer's level  of  diagnostic
              messages.   Option  -qopenmp-report  is  the  replacement
              option for -openmp-report.  Both options are  deprecated.
              The  replacement  options  for  this  kind  of report are
              -qopt-report -qopt-report-phase=openmp (Linux* and OS X*)
              and /Qopt-report /Qopt-report-phase:openmp (Windows*).

              AArrgguummeennttss::

              _n                 Is the level of diagnostic messages  to
                                display. Possible values are:

                                0              No  diagnostic  messages
                                               are displayed.

                                1              Diagnostic messages  are
                                               displayed     indicating
                                               loops, regions, and sec-
                                               tions  successfully par-
                                               allelized.

                                2              The same diagnostic mes-
                                               sages are displayed that
                                               are specified by 1.   In
                                               addition,  the following
                                               are displayed:  diagnos-
                                               tic  messages indicating
                                               successful  handling  of
                                               MASTER  constructs, SIN-
                                               GLE constructs, CRITICAL
                                               constructs, ORDERED con-
                                               structs,  ATOMIC  direc-
                                               tives,   and  so  forth.
                                               This is the default if _n
                                               is not specified.

              DDeeffaauulltt::

              OFF               No  OpenMP*  parallelizer  messages are
                                displayed.

              DDeessccrriippttiioonn::

              This option controls the OpenMP* parallelizer's level  of
              diagnostic  messages.  To  use this option, you must also
              specify the -qopenmp (Linux* and OS X*) or /Qopenmp (Win-
              dows*) option.

              If  this  option  is  specified  on the command line, the
              report is sent to stdout.

              NNOOTTEE:: When option  -qopt-report  or  /Qopt-report  is  in
              effect,  you  get reports for all optimizer phases.  When
              you specify -qopt-report or  /Qopt-report  along  with  a
              particular   setting  for  option  -qopt-report-phase  or
              /Qopt-report-phase, you suppress reports  for  the  other
              phases.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--ssiimmdd ((LL**XX oonnllyy))

       --nnoo--qqooppeennmmpp--ssiimmdd ((LL**XX oonnllyy))

              Enables  or  disables  OpenMP*  SIMD  compilation. Option
              -qopenmp-simd is the replacement option for -openmp-simd,
              which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopenmp-simd  OpenMP*  SIMD  compilation is disabled.
                                However, if option -qopenmp (Linux*) or
                                /Qopenmp  (Windows*)  is specified, the
                                default is ON and OpenMP SIMD  compila-
                                tion is enabled.

              DDeessccrriippttiioonn::

              This option enables or disables OpenMP* SIMD compilation.

              You can use this option if you want to enable or  disable
              the SIMD support with no impact on other OpenMP features.
              In this case, no OpenMP runtime library is needed to link
              and the compiler does not need to generate OpenMP runtime
              initialization code.

              If you specify this option with the -qopenmp (Linux*)  or
              /Qopenmp  (Windows*)  option,  it can impact other OpenMP
              features.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--ssttuubbss

              Enables compilation of  OpenMP*  programs  in  sequential
              mode. Option -qopenmp-stubs is the replacement option for
              -openmp-stubs, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The library of OpenMP*  function  stubs
                                is not linked.

              DDeessccrriippttiioonn::

              This  option  enables  compilation of OpenMP* programs in
              sequential mode. The OpenMP directives are ignored and  a
              stub OpenMP library is linked.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--ttaasskk==mmooddeell

              Lets   you   choose  an  OpenMP*  tasking  model.  Option
              -qopenmp-task is the replacement option for -openmp-task,
              which is deprecated.

              AArrgguummeennttss::

              _m_o_d_e_l             Is  an  OpenMP  tasking model. Possible
                                values are:

                                intel          Tells  the  compiler  to
                                               accept Intel taskqueuing
                                               pragmas         (#pragma
                                               intel_omp_taskq      and
                                               #pragma intel_omp_task).
                                               When this value is spec-
                                               ified,  OpenMP  API  3.0
                                               tasking    pragmas   are
                                               ignored;  if  they   are
                                               specified,  warnings are
                                               issued.

                                omp            Tells  the  compiler  to
                                               accept  OpenMP*  API 3.0
                                               tasking pragmas (#pragma
                                               omp_task).   When   this
                                               value   is    specified,
                                               Intel  taskqueuing prag-
                                               mas are ignored; if they
                                               are  specified, warnings
                                               are issued.

              DDeeffaauulltt::

              -qopenmp-task=omp The compiler accepts OpenMP 3.0 tasking
                                pragmas.

              DDeessccrriippttiioonn::

              The option lets you choose an OpenMP tasking model.

              To use this option, you must also specify option -qopenmp
              (Linux* and OS X*) or /Qopenmp (Windows*).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqooppeennmmpp--tthhrreeaaddpprriivvaattee==ttyyppee ((LL**XX oonnllyy))

              Lets you specify an OpenMP* threadprivate implementation.
              Option  -qopenmp-threadprivate  is the replacement option
              for -openmp-threadprivate, which is deprecated.

              AArrgguummeennttss::

              _t_y_p_e              Specifies  the  type  of  threadprivate
                                implementation. Possible values are:

                                legacy         Tells  the  compiler  to
                                               use the  legacy  OpenMP*
                                               threadprivate  implemen-
                                               tation used in the  pre-
                                               vious  releases  of  the
                                               Intel(R) compiler.  This
                                               setting does not provide
                                               compatibility  with  the
                                               implementation  used  by
                                               other compilers.

                                compat         Tells  the  compiler  to
                                               use   the  compatibility
                                               OpenMP*    threadprivate
                                               implementation  based on
                                               applying             the
                                               __declspec(thread)
                                               attribute    to     each
                                               threadprivate  variable.
                                               The limitations  of  the
                                               attribute   on  a  given
                                               platform also  apply  to
                                               the threadprivate imple-
                                               mentation. This  setting
                                               provides   compatibility
                                               with the  implementation
                                               provided      by     the
                                               Microsoft* and GNU* com-
                                               pilers.

              DDeeffaauulltt::

              -qopenmp-threadprivate=legacy
                                The  compiler  uses  the legacy OpenMP*
                                threadprivate  implementation  used  in
                                the previous releases of the Intel com-
                                piler.

              DDeessccrriippttiioonn::

              This option lets you  specify  an  OpenMP*  threadprivate
              implementation.

              The  threadprivate  implementation  of  the legacy OpenMP
              run-time library may not be compatible with object  files
              created  using  OpenMP  run-time  libraries  supported in
              other compilers.

              To use this option, you must also specify one of the fol-
              lowing compiler options:

              · Linux* OS: -qopenmp or -qopenmp-stubs

              · Windows* OS: /Qopenmp or /Qopenmp-stubs

              The value specified for this option is independent of the
              value used for the -qopenmp-lib (Linux*) or  /Qopenmp-lib
              (Windows*) option.

              NNOOTTEE::  On  OS  X*  systems,  legacy  is  the only type of
              threadprivate supported.   Option  -qopenmp-threadprivate
              is not recognized by the compiler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--aarrggss--iinn--rreeggss[[==kkeeyywwoorrdd]]

              Determines  whether  calls  to  routines are optimized by
              passing parameters  in registers instead of on the stack.
              Option  -qopt-args-in-regs  is the replacement option for
              -opt-args-in-regs, which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on IA-32 archi-
              tecture

              AArrgguummeennttss::

              keyword           Specifies   whether   the  optimization
                                should be performed and under what con-
                                ditions.  Possible values are:

                                none           The  optimization is not
                                               performed. No parameters
                                               are passed in registers.
                                               They  are  put  on   the
                                               stack.

                                seen           Causes  parameters to be
                                               passed in registers when
                                               they  are passed to rou-
                                               tines  whose  definition
                                               can  be seen in the same
                                               compilation unit.

                                all            Causes parameters to  be
                                               passed   in   registers,
                                               whether they are  passed
                                               to  routines whose defi-
                                               nition can  be  seen  in
                                               the   same   compilation
                                               unit, or not. This value
                                               is   only  available  on
                                               Linux* systems.

              DDeeffaauulltt::

              -qopt-args-in-regs=seen
                                Parameters are passed in registers when
                                they are passed to routines whose defi-
                                nition is seen in the same  compilation
                                unit.

              DDeessccrriippttiioonn::

              This  option  determines  whether  calls  to routines are
              optimized by passing parameters in registers  instead  of
              on  the  stack. It also indicates the conditions when the
              optimization will be performed.

              This  option  can  improve  performance  for  Application
              Binary  Interfaces  (ABIs)  that require parameters to be
              passed in memory  and  compiled  without  interprocedural
              optimization (IPO).

              Note that on Linux* systems, if all is specified, a small
              overhead may be paid when calling "unseen" routines  that
              have  not  been  compiled  with  the same option. This is
              because the call will need to go  through  a  "thunk"  to
              ensure that parameters are placed back on the stack where
              the callee expects them.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--aassssuummee--ssaaffee--ppaaddddiinngg ((LL**XX oonnllyy))

       --nnoo--qqoopptt--aassssuummee--ssaaffee--ppaaddddiinngg ((LL**XX oonnllyy))

              Determines whether the compiler  assumes  that  variables
              and  dynamically allocated memory are padded past the end
              of the object. This option only applies to  Intel(R)  MIC
              Architecture.  Option  -qopt-assume-safe-padding  is  the
              replacement option for -opt-assume-safe-padding, which is
              deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss::  Only available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-assume-safe-padding
                                The compiler will not assume that vari-
                                ables  and dynamically allocated memory
                                are padded past the end of the  object.
                                It  will  adhere to the sizes specified
                                in your program.

              DDeessccrriippttiioonn::

              This option determines whether the compiler assumes  that
              variables  and  dynamically  allocated  memory are padded
              past the end of the object.

              When   you   specify   option   -qopt-assume-safe-padding
              (Linux*)  or  /Qopt-assume-safe-padding  (Windows*),  the
              compiler assumes that variables and dynamically allocated
              memory  are padded. This means that code can access up to
              64 bytes beyond what is specified in your program.

              The compiler does not add  any  padding  for  static  and
              automatic  objects  when  this  option  is  used,  but it
              assumes that code can access up to 64  bytes  beyond  the
              end  of  the  object,  wherever the object appears in the
              program. To satisfy this assumption,  you  must  increase
              the  size of static and automatic objects in your program
              when you use this option.

              This option may improve performance of memory operations.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--bblloocckk--ffaaccttoorr==nn

              Lets   you   specify   a  loop  blocking  factor.  Option
              -qopt-block-factor  is   the   replacement   option   for
              -opt-block-factor, which is deprecated.

              AArrgguummeennttss::

              _n                 Is  the  blocking factor. It must be an
                                integer. The compiler  may  ignore  the
                                blocking factor if the value is 0 or 1.

              DDeeffaauulltt::

              OFF               The compiler  uses  default  heuristics
                                for loop blocking.

              DDeessccrriippttiioonn::

              This option lets you specify a loop blocking factor.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ccaalllloocc ((LL**XX oonnllyy))

       --nnoo--qqoopptt--ccaalllloocc ((LL**XX oonnllyy))

              Tells    the   compiler   to   substitute   a   call   to
              _intel_fast_calloc()  for  a  call  to  calloc().  Option
              -qopt-calloc  is  the replacement option for -opt-calloc,
              which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-calloc   The compiler does not substitute a call
                                to _intel_fast_calloc() for a  call  to
                                calloc().

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  to  substitute a call
              to_intel_fast_calloc() for a call to calloc().

              This option may increase the performance of  long-running
              programs  that use calloc() frequently. It is recommended
              for  these  programs   over   combinations   of   options
              -inline-calloc  and  -qopt-malloc-options=3  because this
              option causes less memory fragmentation.

              NNOOTTEE:: Many routines in the LIBIRC library are more highly
              optimized for Intel(R) microprocessors than for non-Intel
              microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ccllaassss--aannaallyyssiiss

       --nnoo--qqoopptt--ccllaassss--aannaallyyssiiss

              Determines whether C++  class  hierarchy  information  is
              used to analyze and resolve C++ virtual function calls at
              compile time. Option -qopt-class-analysis is the replace-
              ment option for -opt-class-analysis, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-class-analysis
                                C++ class hierarchy information is  not
                                used to analyze and resolve C++ virtual
                                function calls at compile time.

              DDeessccrriippttiioonn::

              This option determines whether C++ class hierarchy infor-
              mation  is  used to analyze and resolve C++ virtual func-
              tion calls at compile time. The option is  turned  on  by
              default  with the -ipo compiler option, enabling improved
              C++ optimization. If a C++ application contains non-stan-
              dard C++ constructs, such as pointer down-casting, it may
              result in different behaviors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ddyynnaammiicc--aalliiggnn

       --nnoo--qqoopptt--ddyynnaammiicc--aalliiggnn

              Enables or disables dynamic data alignment optimizations.
              Option  -qopt-dynamic-align is the replacement option for
              -opt-dynamic-align, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -qopt-dynamic-align
                                The compiler may generate code  dynami-
                                cally dependent on alignment. It may do
                                optimizations based  on  data  location
                                for the best performance. The result of
                                execution on some algorithms may depend
                                on data layout.

              DDeessccrriippttiioonn::

              This  option  enables  or disables dynamic data alignment
              optimizations.

              If     you     specify     -no-qopt-dynamic-align      or
              /Qopt-dynamic-align-,  the  compiler  generates  no  code
              dynamically dependent on alignment. It will  not  do  any
              optimizations  based  on  data  location and results will
              depend on the data values themselves.

              When     you     specify      -qopt-dynamic-align      or
              /Qopt-dynamic-align,  the  compiler  may implement condi-
              tional optimizations based on dynamic  alignment  of  the
              input  data.   These  dynamic alignment optimizations may
              result in  different  bitwise  results  for  aligned  and
              unaligned data with the same values.

              Dynamic  alignment  optimizations can improve the perfor-
              mance of vectorized code, especially for long trip  count
              loops.  Disabling such optimizations can decrease perfor-
              mance, but it  may  improve  bitwise  reproducibility  of
              results,   factoring  out  data  location  from  possible
              sources of discrepancy.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ggaatthheerr--ssccaatttteerr--uunnrroollll==nn ((LL**XX oonnllyy))

       --nnoo--qqoopptt--ggaatthheerr--ssccaatttteerr--uunnrroollll ((LL**XX oonnllyy))

              Lets you specify an alternative loop unroll sequence  for
              gather  and  scatter  loops on Intel(R) MIC Architecture.
              This option only applies to  Intel(R)  MIC  Architecture.
              Option  -qopt-gather-scatter-unroll  is  the  replacement
              option for -opt-gather-scatter-unroll,  which  is  depre-
              cated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _n                 Is the unroll factor for the gather and
                                scatter  loops.  It  must be an integer
                                between 0 and 8. If you specify value 0
                                for _n, it is the same as specifying the
                                negative form of the option.

              DDeeffaauulltt::

              -no-qopt-gather-scatter-unroll   or    /Qopt-gather-scat-
              ter-unroll
                                The compiler  uses  default  heuristics
                                when   unrolling   gather  and  scatter
                                loops.

              DDeessccrriippttiioonn::

              This option lets you specify an alternative  loop  unroll
              sequence  for  gather  and  scatter loops on Intel(R) MIC
              Architecture.

              This option may  improve  performance  of  gather/scatter
              operations.

              The  value  of  _n  that  provides the best performance is
              data-dependent.

              In cases where the gather/scatter operation accesses data
              in  a  small  number of cache-lines (such as 1 or 2), the
              default sequence (using a small value for _n) works  best.
              In  cases where each individual data item falls in a dif-
              ferent cache-line, it may be better to use a large  value
              for _n.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--jjuummpp--ttaabblleess==kkeeyywwoorrdd

       --nnoo--qqoopptt--jjuummpp--ttaabblleess

              Enables  or disables generation of jump tables for switch
              statements. Option -qopt-jump-tables is  the  replacement
              option for -opt-jump-tables, which is deprecated.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Is  the instruction for generating jump
                                tables. Possible values are:

                                never          Tells  the  compiler  to
                                               never    generate   jump
                                               tables.    All    switch
                                               statements   are  imple-
                                               mented  as   chains   of
                                               if-then-elses.  This  is
                                               the same  as  specifying
                                               -no-qopt-jump-tables
                                               (Linux* OS and OS X*) or
                                               /Qopt-jump-tables- (Win-
                                               dows* OS).

                                default        The    compiler     uses
                                               default   heuristics  to
                                               determine when to gener-
                                               ate jump tables.

                                large          Tells  the  compiler  to
                                               generate jump tables  up
                                               to a certain pre-defined
                                               size (64K entries).

                                n              Must  be   an   integer.
                                               Tells  the  compiler  to
                                               generate jump tables  up
                                               to _n entries in size.

              DDeeffaauulltt::

              -qopt-jump-tables=default
                                The compiler uses default heuristics to
                                determine when to generate jump  tables
                                for switch statements.

              DDeessccrriippttiioonn::

              This option enables or disables generation of jump tables
              for switch statements. When the option is enabled, it may
              improve performance for programs with large switch state-
              ments.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--mmaalllloocc--ooppttiioonnss==nn

              Lets you specify an  alternate  algorithm  for  malloc().
              Option -qopt-malloc-options is the replacement option for
              -opt-malloc-options, which is deprecated.

              AArrgguummeennttss::

              _n                 Specifies the algorithm to use for mal-
                                loc(). Possible values are:

                                0              Tells  the  compiler  to
                                               use  the  default  algo-
                                               rithm for malloc(). This
                                               is the default.

                                1              Causes   the   following
                                               adjustments  to the mal-
                                               loc()         algorithm:
                                               M_MMAP_MAX=2         and
                                               M_TRIM_THRESH-
                                               OLD=0x10000000.

                                2              Causes   the   following
                                               adjustments to the  mal-
                                               loc()         algorithm:
                                               M_MMAP_MAX=2         and
                                               M_TRIM_THRESH-
                                               OLD=0x40000000.

                                3              Causes   the   following
                                               adjustments  to the mal-
                                               loc()         algorithm:
                                               M_MMAP_MAX=0         and
                                               M_TRIM_THRESHOLD=-1.

                                4              Causes   the   following
                                               adjustments  to the mal-
                                               loc()         algorithm:
                                               M_MMAP_MAX=0,
                                               M_TRIM_THRESHOLD=-1,
                                               M_TOP_PAD=4096.

              DDeeffaauulltt::

              -qopt-malloc-options=0
                                The compiler uses the default algorithm
                                when malloc() is  called.  No  call  is
                                made to mallopt().

              DDeessccrriippttiioonn::

              This  option  lets you specify an alternate algorithm for
              malloc().

              If you specify a non-zero value for _n, it  causes  alter-
              nate  configuration parameters to be set for how malloc()
              allocates and frees memory.  It  tells  the  compiler  to
              insert  calls  to mallopt() to adjust these parameters to
              malloc() for dynamic memory allocation. This may  improve
              speed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--mmaattmmuull ((LL**XX oonnllyy))

       --nnoo--qqoopptt--mmaattmmuull ((LL**XX oonnllyy))

              Enables  or disables a compiler-generated Matrix Multiply
              (matmul)
                     library  call. Option -qopt-matmul is the replace-
                     ment option for -opt-matmul, which is  deprecated.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-matmul   The  matmul  library  call optimization
                                does not occur unless  this  option  is
                                enabled   or   certain  other  compiler
                                options are specified (see below).

              DDeessccrriippttiioonn::

              This option  enables  or  disables  a  compiler-generated
              Matrix Multiply (MATMUL) library call.

              The  -qopt-matmul  (Linux* OS) and /Qopt-matmul (Windows*
              OS) options tell the compiler to identify  matrix  multi-
              plication  loop  nests  (if  any) and replace them with a
              matmul  library  call  for  improved  performance.    The
              resulting  executable may get additional performance gain
              on Intel(R) microprocessors than on  non-Intel  micropro-
              cessors.

              This  option  is  enabled  by  default  if options O3 and
              [Q]parallel are specified.  To disable this optimization,
              specify -no-qopt-matmul or /Qopt-matmul-.

              This  option  has no effect unless option O2 or higher is
              set.

              NNOOTTEE:: Many routines in the MATMUL library are more highly
              optimized for Intel(R) microprocessors than for non-Intel
              microprocessors.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--mmeemm--llaayyoouutt--ttrraannss[[==nn]]

       --nnoo--qqoopptt--mmeemm--llaayyoouutt--ttrraannss

              Controls the level of memory layout transformations  per-
              formed  by the compiler. Option -qopt-mem-layout-trans is
              the replacement option for  -opt-mem-layout-trans,  which
              is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _n                 Is the level of memory layout transfor-
                                mations. Possible values are:

                                0              Disables  memory  layout
                                               transformations. This is
                                               the  same  as specifying
                                               -no-qopt-mem-lay-
                                               out-trans (Linux* OS and
                                               OS X*) or /Qopt-mem-lay-
                                               out-trans-     (Windows*
                                               OS).

                                1              Enables   basic   memory
                                               layout  transformations.

                                2              Enables more memory lay-
                                               out     transformations.
                                               This  is  the  same   as
                                               specifying
                                               -qopt-mem-layout-trans
                                               (Linux* OS and OS X*) or
                                               /Qopt-mem-layout-trans
                                               (Windows*  OS)  with  no
                                               argument.

                                3              Enables aggressive  mem-
                                               ory  layout  transforma-
                                               tions. You  should  only
                                               use this setting if your
                                               system has more than 4GB
                                               of  physical  memory per
                                               core.

              DDeeffaauulltt::

              -qopt-mem-layout-trans=2
                                The compiler performs  moderate  memory
                                layout transformations.

              DDeessccrriippttiioonn::

              This option controls the level of memory layout transfor-
              mations  performed  by  the  compiler.  This  option  can
              improve cache reuse and cache locality.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--mmuullttii--vveerrssiioonn--aaggggrreessssiivvee

       --nnoo--qqoopptt--mmuullttii--vveerrssiioonn--aaggggrreessssiivvee

              Tells  the compiler to use aggressive multi-versioning to
              check  for  pointer  aliasing  and  scalar   replacement.
              Option  -qopt-multi-version-aggressive is the replacement
              option for -opt-multi-version-aggressive, which is depre-
              cated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-multi-version-aggressive
                                The  compiler  uses  default heuristics
                                when checking for pointer aliasing  and
                                scalar replacement.

              DDeessccrriippttiioonn::

              This   option   tells  the  compiler  to  use  aggressive
              multi-versioning to check for pointer aliasing and scalar
              replacement. This option may improve performance.

              The  performance can be affected by certain options, such
              as /arch or /Qx (Windows OS) or -m or -x (Linux OS and OS
              X).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--pprreeffeettcchh[[==nn]]

       --nnoo--qqoopptt--pprreeffeettcchh

              Enables  or  disables   prefetch  insertion optimization.
              Option  -qopt-prefetch  is  the  replacement  option  for
              -opt-prefetch, which is deprecated.

              AArrgguummeennttss::

              _n                 Is  the  level  of software prefetching
                                optimization desired.  Possible  values
                                are:

                                0              Disables        software
                                               prefetching. This is the
                                               same    as    specifying
                                               -no-qopt-prefetch
                                               (Linux* OS and OS X*) or
                                               /Qopt-prefetch-    (Win-
                                               dows* OS).

                                1 to 4         Enables different levels
                                               of software prefetching.
                                               If  you do not specify a
                                               value for _n, the default
                                               is  2.  Use lower values
                                               to reduce the amount  of
                                               prefetching.

              DDeeffaauulltt::

              -no-qopt-prefetch Prefetch insertion optimization is dis-
                                abled.

              DDeessccrriippttiioonn::

              This option enables or disables prefetch insertion  opti-
              mization.  The  goal  of  prefetching  is to reduce cache
              misses by providing hints to  the  processor  about  when
              data should be loaded into the cache.

              On Intel(R) 64 architecture targeting Intel(R) MIC Archi-
              tecture, option -qopt-prefetch=3 (Linux* OS  and  OS  X*)
              and /Qopt-prefetch:3 (Windows* OS) are enabled by default
              if option O2 or higher is set. To disable prefetching  at
              these     optimization     levels,     specify     option
              -no-qopt-prefetch or /Qopt-prefetch-.

              This option enables prefetching when higher  optimization
              levels are specified.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--pprreeffeettcchh--ddiissttaannccee==nn11[[,, nn22]] ((LL**XX oonnllyy))

              Specifies  the  prefetch  distance  to  be  used for com-
              piler-generated prefetches inside loops. This option only
              applies    to    Intel(R)    MIC   Architecture.   Option
              -qopt-prefetch-distance is  the  replacement  option  for
              -opt-prefetch-distance, which is deprecated.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Only available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _n_1_, _n_2            Is  the  prefetch  distance in terms of
                                the  number  of   (possibly-vectorized)
                                iterations.    Possible    values   are
                                non-negative numbers >=0.

                                _n_2 is optional.

                                _n_1 = 0 turns off  all  compiler  issued
                                prefetches  from  memory  to L2. _n_2 = 0
                                turns   off   all    compiler    issued
                                prefetches  from  L2  to  L1.  If _n_2 is
                                specified and _n_1 > 0,  _n_1 should be  >=
                                _n_2.

              DDeeffaauulltt::

              OFF               The compiler uses default heuristics to
                                determine the prefetch distance.

              DDeessccrriippttiioonn::

              This option specifies the prefetch distance  to  be  used
              for  compiler-generated prefetches inside loops. The unit
              (_n_1 and optionally _n_2) is the number  of  iterations.  If
              the  loop  is vectorized by the compiler, the unit is the
              number of vectorized iterations.

              The value  of  _n_1  will  be  used  as  the  distance  for
              prefetches from memory to L2 (for example, the vprefetch1
              instruction). If _n_2 is specified, it will be used as  the
              distance  for  prefetches from L2 to L1 (for example, the
              vprefetch0 instruction).

              This option is ignored if option -qopt-prefetch=0 (Linux*
              OS)  or  /Qopt-prefetch:0 (Windows* OS) is specified.  On
              Intel(R)   MIC   Architecture,    -qopt-prefetch=3    and
              /Qopt-prefetch:3  is the  default at option levels O2 and
              above.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rraa--rreeggiioonn--ssttrraatteeggyy[[==kkeeyywwoorrdd]]

              Selects the method that the register  allocator  uses  to
              partition    each    routine    into    regions.   Option
              -qopt-ra-region-strategy is the  replacement  option  for
              -opt-ra-region-strategy, which is deprecated.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Is the method  used  for  partitioning.
                                Possible values are:

                                routine        Creates  a single region
                                               for each routine.

                                block          Partitions each  routine
                                               into   one   region  per
                                               basic block.

                                trace          Partitions each  routine
                                               into   one   region  per
                                               trace.

                                region         Partitions each  routine
                                               into   one   region  per
                                               loop.

                                default        The compiler  determines
                                               which method is used for
                                               partitioning.

              DDeeffaauulltt::

              -qopt-ra-region-strategy=default
                                The compiler determines which method is
                                used for partitioning. This is also the
                                default if keyword is not specified.

              DDeessccrriippttiioonn::

              This option selects the method that the register  alloca-
              tor uses to partition each routine into regions.

              When  setting default is in effect, the compiler attempts
              to optimize the tradeoff between compile-time performance
              and generated code performance.

              This  option  is  only  relevant  when  optimizations are
              enabled (option O1 or higher).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt[[==nn]]

              Tells the compiler to generate  an  optimization  report.
              Option   -qopt-report   is  the  replacement  option  for
              -opt-report, which is deprecated.

              AArrgguummeennttss::

              _n                 (Optional)  Indicates  the   level   of
                                detail  in  the report. You can specify
                                values 0  through  5.  If  you  specify
                                zero, no report is generated.  For lev-
                                els  _n=1  through   _n=5,   each   level
                                includes  all  the  information  of the
                                previous level, as well as  potentially
                                some  additional  information.  Level 5
                                produces the greatest level of  detail.
                                If you do not specify _n, the default is
                                level 2, which produces a medium  level
                                of detail.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This  option  tells the compiler to generate a collection
              of optimization report files, one per object; this is the
              same  output  produced  by option -qopt-report-per-object
              (Linux* OS and OS X*)  or  /Qopt-report-per-object  (Win-
              dows* OS).

              If  you  prefer  another  form of output, you can specify
              option -qopt-report-file or /Qopt-report-file.

              If you specify a level (_n) higher than 5, a warning  will
              be displayed and you will get a level 5 report.

              When  optimization  reporting  is enabled, the default is
              -qopt-report-phase=all  (Linux*  OS   and   OS   X*)   or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--eemmbbeedd

              Determines  whether  special loop information annotations
              will be embedded in the object file and/or  the  assembly
              file  when  it is generated. Option -qopt-report-embed is
              the replacement option for  -opt-report-embed,  which  is
              deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               When  an  assembly file is being gener-
                                ated, special loop information  annota-
                                tions  will  not  be  embedded  in  the
                                assembly file.

                                However, if option -g (Linux* OS and OS
                                X*)  or /Zi (Windows* OS) is specified,
                                special  loop  information  annotations
                                will  be  embedded in the assembly file
                                unless   option   -no-qopt-report-embed
                                (Linux     OS     and    OS    X)    or
                                /Qopt-report-embed-  (Windows  OS)   is
                                specified.

              DDeessccrriippttiioonn::

              This  option  determines whether special loop information
              annotations will be embedded in the  object  file  and/or
              the assembly file when it is generated. Specify the posi-
              tive form of the option to include the annotations in the
              assembly file.

              If an object file (or executable) is being generated, the
              annotations will be embedded in the object file (or  exe-
              cutable).

              If you use this option, you do not have to specify option
              -qopt-report (Linux* OS and OS X*) or /Qopt-report  (Win-
              dows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--ffiillee==kkeeyywwoorrdd

              Specifies  that  the  output  for the optimization report
              goes   to   a   file,   stderr,   or   stdout.     Option
              -qopt-report-file   is   the   replacement   option   for
              -opt-report-file, which is deprecated.

              AArrgguummeennttss::

              keyword           Specifies  the  output  for the report.
                                You can specify one of the following:

                                filename       Specifies  the  name  of
                                               the  file where the out-
                                               put should go.

                                stderr         Indicates that the  out-
                                               put should go to stderr.

                                stdout         Indicates that the  out-
                                               put should go to stdout.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This option specifies that the output for  the  optimiza-
              tion report goes to a file, stderr, or stdout.

              If you use this option, you do not have to specify option
              -qopt-report (Linux* OS and OS X*) or /Qopt-report  (Win-
              dows* OS).

              When  optimization  reporting  is enabled, the default is
              -qopt-report-phase=all  (Linux*  OS   and   OS   X*)   or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--ffiilltteerr==ssttrriinngg

              Tells  the  compiler  to find the indicated parts of your
              application, and generate optimization reports for  those
              parts  of your application. Option -qopt-report-filter is
              the replacement option for -opt-report-filter,  which  is
              deprecated.

              AArrgguummeennttss::

              _s_t_r_i_n_g            Is  the  information to search for. The
                                _s_t_r_i_n_g must appear  within  quotes.  It
                                can  take  one or more of the following
                                forms:  _f_i_l_e_n_a_m_e_f_i_l_e_n_a_m_e,  _r_o_u_t_i_n_e_f_i_l_e_-
                                _n_a_m_e,  _r_a_n_g_e  [,  _r_a_n_g_e]...   _f_i_l_e_n_a_m_e,
                                _r_o_u_t_i_n_e, _r_a_n_g_e [, _r_a_n_g_e]...

                                If you specify more  than  one  of  the
                                above  forms  in  a string, a semicolon
                                must appear between each form.  If  you
                                specify   more  than  one  _r_a_n_g_e  in  a
                                string, a  comma  must  appear  between
                                each  _r_a_n_g_e. Optional blanks can follow
                                each parameter in the forms  above  and
                                they  can  also  follow  each form in a
                                string.

                                _f_i_l_e_n_a_m_e       Specifies the name of  a
                                               file to be found. It can
                                               include a path.

                                               If you do not specify  a
                                               path, the compiler looks
                                               for the filename in  the
                                               current  working  direc-
                                               tory.

                                _r_o_u_t_i_n_e        Specifies the name of  a
                                               routine   to  be  found.
                                               You can include an iden-
                                               tifying parameter.

                                               The  name, including any
                                               parameter,    must    be
                                               enclosed    in    single
                                               quotes.

                                               The  compiler  tries  to
                                               uniquely   identify  the
                                               routine that corresponds
                                               to the specified routine
                                               name.

                                               It may  select  multiple
                                               routines   to   analyze,
                                               especially if more  than
                                               one   routine   has  the
                                               specified routine  name,
                                               so the routine cannot be
                                               uniquely identified.

                                _r_a_n_g_e          Specifies  a  range   of
                                               line numbers to be found
                                               in the file  or  routine
                                               specified.   The   _r_a_n_g_e
                                               must  be  specified   in
                                               integers in the form:

                                               _f_i_r_s_t___l_i_n_e___n_u_m_-
                                               _b_e_r_-_l_a_s_t___l_i_n_e___n_u_m_b_e_r

                                               The hyphen  between  the
                                               line      numbers     is
                                               required.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This option tells the  compiler  to  find  the  indicated
              parts  of  your  application,  and  generate optimization
              reports for those parts of your  application.   Optimiza-
              tion reports will only be generated for the routines that
              contain the specified _s_t_r_i_n_g.

              On  Linux*  OS  and  OS   X*,   if   you   specify   both
              -qopt-report-routine=string1     and    -qopt-report-fil-
              ter=string2,   it   is   treated   as   -qopt-report-fil-
              ter=string1;string2.  On Windows* OS, if you specify both
              /Qopt-report-routines:string1    and    /Qopt-report-fil-
              ter:string2,    it    is    treated   as/Qopt-report-fil-
              ter:string1;string2.

              If you use this option, you do not have to specify option
              -qopt-report  (Linux* OS and OS X*) or /Qopt-report (Win-
              dows* OS).

              When optimization reporting is enabled,  the  default  is
              -qopt-report-phase=all   (Linux*   OS   and   OS  X*)  or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--ffoorrmmaatt==kkeeyywwoorrdd

              Specifies the format for an optimization  report.  Option
              -qopt-report-format   is   the   replacement  option  for
              -opt-report-format, which is deprecated.

              AArrgguummeennttss::

              keyword           Specifies the format  for  the  report.
                                You can specify one of the following:

                                text           Indicates    that    the
                                               report should be in text
                                               format.

                                vs             Indicates    that    the
                                               report  should   be   in
                                               Visual   Studio*   (IDE)
                                               format.  The Visual Stu-
                                               dio  IDE uses the infor-
                                               mation to visualize  the
                                               optimization  report  in
                                               the context of your pro-
                                               gram source code.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This  option  specifies  the  format  for an optimization
              report. If you use this option, you must  specify  either
              text or vs.

              If  you  do  not  specify  this option and another option
              causes  an  optimization  report  to  be  generated,  the
              default format is text.

              Specifying  vs  can  change  where the output goes in the
              following cases:

              · If option -qopt-report-file=filename (Linux* OS and  OS
                X*)  or  /Qopt-report-file:filename  (Windows*  OS)  is
                specified, output goes to the specified file.

              · If option -qopt-report-file=stdout (Linux*  OS  and  OS
                X*) or /Qopt-report-file:stdout (Windows* OS) is speci-
                fied, output goes to stdout.

              · If option -qopt-report-file=stderr (Linux*  OS  and  OS
                X*) or /Qopt-report-file:stderr (Windows* OS) is speci-
                fied, output goes to stderr.

              If you use this option, you do not have to specify option
              -qopt-report  (Linux* OS and OS X*) or /Qopt-report (Win-
              dows* OS).

              When optimization reporting is enabled,  the  default  is
              -qopt-report-phase=all   (Linux*   OS   and   OS  X*)  or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--hheellpp

              Displays the optimizer phases available for report gener-
              ation and a short description of what is reported at each
              level. Option -qopt-report-help is the replacement option
              for -opt-report-help, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This option displays the optimizer phases  available  for
              report    generation    using    -qopt-report-phase    or
              /Qopt-report-phase, and a short description  of  what  is
              reported at each level.  No compilation is performed.

              To  indicate  where output should go, you can specify one
              of the following options:

              · -qopt-report-file    (Linux*   OS   and   OS   X*)   or
                /Qopt-report-file (Windows* OS)

              · -qopt-report-per-object   (Linux*  OS  and  OS  X*)  or
                /Qopt-report-per-object (Windows* OS)

              If you use this option, you do not have to specify option
              -qopt-report  (Linux* OS and OS X*) or /Qopt-report (Win-
              dows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--nnaammeess==kkeeyywwoorrdd

              Specifies  whether  mangled  or  unmangled  names  should
              appear in the optimization report.

              AArrgguummeennttss::

              keyword           Specifies the form for the names.   You
                                can specify one of the following:

                                mangled        Indicates that the opti-
                                               mization  report  should
                                               contain mangled names.

                                unmangled      Indicates that the opti-
                                               mization  report  should
                                               contain unmangled names.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This option specifies whether mangled or unmangled  names
              should appear in the optimization report. If you use this
              option, you must specify either mangled or unmangled.

              If this option is not specified, unmangled names are used
              by default.

              If  you  specify mangled, encoding (also known as decora-
              tion) is added to names in the optimization report.  This
              is  appropriate  when  you want to match annotations with
              the assembly listing.

              If you specify unmangled, no encoding (or decoration)  is
              added to names in the optimization report. This is appro-
              priate when you want to match annotations with the source
              listing.

              If you use this option, you do not have to specify option
              -qopt-report (Linux* OS and OS X*) or /Qopt-report  (Win-
              dows* OS).

              When  optimization  reporting  is enabled, the default is
              -qopt-report-phase=all  (Linux*  OS   and   OS   X*)   or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--ppeerr--oobbjjeecctt

              Tells  the  compiler that optimization report information
              should be generated in a separate file for  each  object.
              Option  -qopt-report-per-object is the replacement option
              for -opt-report-per-object, which is deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This  option  tells the compiler that optimization report
              information should be generated in a  separate  file  for
              each object.

              If  you specify this option for a single-file Interproce-
              dural Optimization  (IPO)  compilation,  a  file  with  a
              .optrpt  extension  is  produced for every object file or
              assembly file that is generated by the compiler.    For a
              single file compilation, one file is produced for each of
              the multiple true objects in the compilation.  The  names
              used      are       ipo_out1.optprt,     ipo_out2.optrpt,
              …ipo_outn.optrpt.

              The .optrpt files are written to the target directory  of
              the  compilation  process.  If an object or assembly file
              is explicitly generated, the corresponding  .optrpt  file
              is written to the same directory where the object file is
              generated.  If the object file is just a  temporary  file
              and an executable is generated, the corresponding .optrpt
              files are placed in the directory in which the executable
              is placed.

              If you use this option, you do not have to specify option
              -qopt-report (Linux* OS and OS X*) or /Qopt-report  (Win-
              dows* OS).

              When  optimization  reporting  is enabled, the default is
              -qopt-report-phase=all  (Linux*  OS   and   OS   X*)   or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--pphhaassee[[==lliisstt]]

              Specifies  one  or  more optimizer phases for which opti-
              mization reports are generated. Option -qopt-report-phase
              is the replacement option for -opt-report-phase, which is
              deprecated.

              AArrgguummeennttss::

              _l_i_s_t              (Optional) Specifies one or more phases
                                to generate reports for. If you specify
                                more than one phase, they must be sepa-
                                rated with commas. The values  you  can
                                specify are:

                                cg             The  phase for code gen-
                                               eration

                                ipo            The phase for  Interpro-
                                               cedural Optimization

                                loop           The  phase for loop nest
                                               optimization

                                offload        The phase  for  Intel(R)
                                               MIC    Architecture   or
                                               Intel(R) Graphics  Tech-
                                               nology,   depending   on
                                               which  you  are   using.
                                               This phase has no effect
                                               if  option  -no-qoffload
                                               or  option /Qoffload- is
                                               specified.   This  phase
                                               only applies to Intel(R)
                                               MIC Architecture  or  to
                                               Intel(R)  Graphics Tech-
                                               nology.

                                openmp         The phase for OpenMP

                                par            The phase for  auto-par-
                                               allelization

                                pgo            The  phase  for  Profile
                                               Guided Optimization

                                tcollect       The phase for trace col-
                                               lection

                                vec            The phase for vectoriza-
                                               tion

                                all            All  optimizer   phases.
                                               This  is  the default if
                                               you do not specify _l_i_s_t.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This  option  specifies  one or more optimizer phases for
              which optimization reports are generated.

              Note that phase offload causes the compiler  to  print  a
              report  of the input or output of variables that the host
              sends to the offload target and variables that  the  host
              receives from the target.

              For  certain  phases,  you  also  need  to  specify other
              options:

              · If you specify phase par, you must also specify  option
                [Q]parallel.

              · If  you  specify  phase  openmp,  you must also specify
                option -qopenmp (Linux* OS and OS X*) or /Qopenmp (Win-
                dows* OS).

              To  get  more  details  for  each  phase,  specify option
              -qopt-report (Linux* OS and OS X*) or /Qopt-report  (Win-
              dows*  OS)  along with this option and indicate the level
              of detail you want by specifying an appropriate value for
              _n.

              To   find   all   phase   possibilities,  specify  option
              -qopt-report-help   (Linux*   OS   and    OS    X*)    or
              /Qopt-report-help (Windows* OS).

              When  optimization  reporting  is enabled, the default is
              -qopt-report-phase=all  (Linux*  OS   and   OS   X*)   or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--rreeppoorrtt--rroouuttiinnee==ssuubbssttrriinngg

              Tells the compiler to generate an optimization report for
              each of the routines whose names  contain  the  specified
              substring. Option -qopt-report-routine is the replacement
              option for -opt-report-routine, which is deprecated.

              AArrgguummeennttss::

              _s_u_b_s_t_r_i_n_g         Is the text (string) to look for.

              DDeeffaauulltt::

              OFF               No optimization report is generated.

              DDeessccrriippttiioonn::

              This  option  tells the compiler to generate an optimiza-
              tion report for each of the routines whose names  contain
              the specified substring.

              You  can  also specify a sequence of substrings separated
              by commas.  If you do this, the compiler will generate an
              optimization  report  for each of the routines whose name
              contains one or more of these substrings.

              If you use this option, you do not have to specify option
              -qopt-report  (Linux* OS and OS X*) or /Qopt-report (Win-
              dows* OS).

              When optimization reporting is enabled,  the  default  is
              -qopt-report-phase=all   (Linux*   OS   and   OS  X*)  or
              /Qopt-report-phase:all (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ssttrreeaammiinngg--ccaacchhee--eevviicctt[[==nn]] ((LL**XX oonnllyy))

              Specifies the cache eviction level to be used by the com-
              piler  for  streaming  loads and stores. This option only
              applies   to   Intel(R)    MIC    Architecture.    Option
              -qopt-streaming-cache-evict is the replacement option for
              -opt-streaming-cache-evict, which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _n                 Is a value denoting the cache  eviction
                                (clevict)  level  to  use for streaming
                                loads and stores. Possible values are:

                                0              Tells  the  compiler  to
                                               use  no  cache  eviction
                                               level.

                                1              Tells  the  compiler  to
                                               use  the  L1 cache evic-
                                               tion level.

                                2              Tells  the  compiler  to
                                               use  the  L2 cache evic-
                                               tion level.

                                3              Tells  the  compiler  to
                                               use  the L1 and L2 cache
                                               eviction level. This  is
                                               the  default  of  you do
                                               not specify _n.

              DDeeffaauulltt::

              2                 The compiler uses the L2 cache eviction
                                level.

              DDeessccrriippttiioonn::

              This  option specifies the cache eviction (clevict) level
              to be used  by  the  compiler  for  streaming  loads  and
              stores.

              Depending  on  the level used, the compiler will generate
              clevict0 and/or  clevict1  instructions  that  evict  the
              cache-line  (corresponding to the load or the store) from
              the first-level  and  second-level  caches.  These  cache
              eviction  instructions will be generated after performing
              the corresponding load/store operation.

              For more information  on  how  to  mark  loads/stores  as
              streaming,  see the description of the vector nontemporal
              pragma.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ssttrreeaammiinngg--ssttoorreess ==kkeeyywwoorrdd

              Enables generation of streaming stores for  optimization.
              Option  -qopt-streaming-stores  is the replacement option
              for -opt-streaming-stores, which is deprecated.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies whether streaming stores  are
                                generated. Possible values are:

                                always         Enables   generation  of
                                               streaming   stores   for
                                               optimization.  The  com-
                                               piler  optimizes   under
                                               the  assumption that the
                                               application  is   memory
                                               bound.

                                never          Disables  generation  of
                                               streaming   stores   for
                                               optimization.     Normal
                                               stores are performed.

                                auto           Lets the compiler decide
                                               which   instructions  to
                                               use.

              DDeeffaauulltt::

              -qopt-streaming-stores=auto
                                The compiler  decides  whether  to  use
                                streaming stores or normal stores.

              DDeessccrriippttiioonn::

              This  option  enables  generation of streaming stores for
              optimization. This method stores data  with  instructions
              that  use  a  non-temporal buffer, which minimizes memory
              hierarchy pollution.

              This option may be useful for applications that can bene-
              fit from streaming stores.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--ssuubbssccrriipptt--iinn--rraannggee

       --nnoo--qqoopptt--ssuubbssccrriipptt--iinn--rraannggee

              Determines whether the compiler assumes that there are no
              "large" integers being  used  or  being  computed  inside
              loops. Option -qopt-subscript-in-range is the replacement
              option for -opt-subscript-in-range, which is  deprecated.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-qopt-subscript-in-range
                                The compiler assumes  there are "large"
                                integers being used or  being  computed
                                within loops.

              DDeessccrriippttiioonn::

              This  option determines whether the compiler assumes that
              there are no "large" integers being used  or  being  com-
              puted inside loops.

              If you specify -qopt-subscript-in-range (Linux* OS and OS
              X*) or /Qopt-subscript-in-range (Windows* OS),  the  com-
              piler  assumes  that  there are no "large" integers being
              used or being computed inside loops. A "large" integer is
              typically > 231. This feature can enable more loop trans-
              formations.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --qqoopptt--tthhrreeaaddss--ppeerr--ccoorree==nn ((LL**XX oonnllyy))

              Informs the compiler about the number of hardware threads
              per  core  that  will  be  used  for an application. This
              option only applies to Intel(R) MIC Architecture.  Option
              -qopt-threads-per-core  is  the  replacement  option  for
              -opt-threads-per-core, which is deprecated.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Only available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _n                 Is the number of hardware  threads  per
                                core  that  the  compiler should assume
                                that will be used while  executing  the
                                application.  Possible values are 1, 2,
                                3, or 4.

              DDeeffaauulltt::

              4                 Four hardware threads per core are used
                                for the application.

              DDeessccrriippttiioonn::

              This  option  informs  the  compiler  about the number of
              hardware threads per core that will be used for an appli-
              cation.  This enables the compiler to perform better code
              optimizations (such as instruction scheduling).

              You should choose a value for _n that is based on how many
              threads  will be used per core while executing the appli-
              cation. For example, if the application  is  parallelized
              using  OpenMP* API, use the value of _n that uses the same
              number of threads per core as the  OpenMP*  API  affinity
              setting  will  use when executing the application code on
              the Intel(R) Xeon Phi(TM) coprocessor.

              This option does not affect the  number  of  threads  per
              core that will be used at run time.

              Code  compiled  with this option can run correctly on any
              (hardware-supported) number of threads per core.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --QQiinnssttaallllddiirr

              Specifies the root directory where the compiler installa-
              tion was performed.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _d_i_r               Is the root directory where the instal-
                                lation was performed.

              DDeeffaauulltt::

              OFF               The default root directory for compiler
                                installation is searched for  the  com-
                                piler.

              DDeessccrriippttiioonn::

              This  option  specifies the root directory where the com-
              piler installation was performed. It  is  useful  if  you
              want  to  use  a different compiler or if you did not use
              the compilervars shell script  to  set  your  environment
              variables.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --QQllooccaattiioonn,,ssttrriinngg,,ddiirr

              Specifies the directory for supporting tools.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _s_t_r_i_n_g            Is the name of the tool.

              _d_i_r               Is  the directory (path) where the tool
                                is located.

              DDeeffaauulltt::

              OFF               The  compiler  looks  for  tools  in  a
                                default area.

              DDeessccrriippttiioonn::

              This option specifies the directory for supporting tools.

              _s_t_r_i_n_g can be any of the following:

              · c - Indicates the Intel(R) C++ compiler.

              · cpp (or fpp) - Indicates the Intel(R) C++ preprocessor.

              · cxxinc - Indicates C++ header files.

              · cinc - Indicates C header files.

              · asm - Indicates the assembler.

              · link - Indicates the linker.

              · prof - Indicates the profiler.

              · On Windows* systems, the following is also available:

                · masm - Indicates the Microsoft assembler.

              · On  Linux*  and  OS  X* systems, the following are also
                available:

                · as - Indicates the assembler.

                · gas - Indicates the GNU assembler.  This  setting  is
                  for Linux* only.

                · ld - Indicates the loader.

                · gld  -  Indicates the GNU loader. This setting is for
                  Linux* only.

                · lib - Indicates an additional library.

                · crt - Indicates the crt%.o files linked into executa-
                  bles to contain the place to start execution.

              On Windows and OS X* systems, you can also specify a tool
              command name.

              The following shows an example on OS X* systems:

              -Qlocation,ld,/usr/bin                !  This  tells  the
              driver   to   use  /usr/bin/ld  for  the  loader  -Qloca-
              tion,ld,/usr/bin/gld           ! This tells the driver to
              use /usr/bin/gld as the loader


              The following shows an example on Windows* systems:

              /Qlocation,link,”c:Program Filesools”            ! This
              tells the driver to use c:Program Filesoolsk.exe for  the
              loader /Qlocation,link,”c:Program Filesools_link.exe” !
              This tells the driver to use c:Program Filesools_link.exe
              as the loader


              AAlltteerrnnaattee OOppttiioonnss::

              None

              Changes the default size of the long double data type.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  default  size  of  the long double
                                data type is 64 bits.

              DDeessccrriippttiioonn::

              This option changes the default size of the  long  double
              data type to 80 bits.

              However, the alignment requirement of the data type is 16
              bytes, and its size must be a multiple of its  alignment,
              so the size of a long double on Windows is also 16 bytes.
              Only the lower 10 bytes (80 bits) of the  16  byte  space
              will have valid data stored in it.

              Note  that  the Microsoft compiler and Microsoft-provided
              library routines (such as printf) do not provide  support
              for  80-bit  floating-point  values.  As  a  result, this
              option should  only  be  used  when  referencing  symbols
              within  parts  of your application built with this option
              or symbols in libraries that were built with this option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --QQooppttiioonn,,ssttrriinngg,,ooppttiioonnss

              Passes options to a specified tool.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _s_t_r_i_n_g            Is the name of the tool.

              _o_p_t_i_o_n_s           Are  one or more comma-separated, valid
                                options for the designated tool.

                                Note that  certain  tools  may  require
                                that  options  appear  within quotation
                                marks (" ").

              DDeeffaauulltt::

              OFF               No options are passed to tools.

              DDeessccrriippttiioonn::

              This option passes options to a specified tool.

              If an argument contains a space  or  tab  character,  you
              must  enclose  the  entire argument in quotation marks ("
              "). You must separate multiple arguments with commas.

              _s_t_r_i_n_g can be any of the following:

              · cpp - Indicates the Intel compiler preprocessor.

              · c - Indicates the C++ compiler.

              · asm - Indicates the assembler.

              · link - Indicates the linker.

              · prof - Indicates the profiler.

              · On Windows* systems, the following is also available:

                · masm - Indicates the Microsoft assembler.

              · On Linux* and OS X* systems,  the  following  are  also
                available:

                · as - Indicates the assembler.

                · gas - Indicates the GNU assembler.

                · ld - Indicates the loader.

                · gld - Indicates the GNU loader.

                · lib - Indicates an additional library.

                · crt - Indicates the crt%.o files linked into executa-
                  bles to contain the place to start execution.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --rrccdd

              Enables fast float-to-integer conversions.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Floating-point  values  are   truncated
                                when  a  conversion  to  an  integer is
                                involved.

              DDeessccrriippttiioonn::

              This option enables fast float-to-integer conversions. It
              can  improve the performance of code that requires float-
              ing-point-to-integer conversions.

              The  system  default  floating-point  rounding  mode   is
              round-to-nearest. However, the C language requires float-
              ing-point values to be truncated when a conversion to  an
              integer is involved. To do this, the compiler must change
              the  rounding  mode  to  truncation  before  each  float-
              ing-point-to-integer conversion and change it back after-
              wards.

              This option disables the  change  to  truncation  of  the
              rounding   mode   for  all  floating-point  calculations,
              including  floating  point-to-integer  conversions.  This
              option  can  improve performance, but floating-point con-
              versions to integer will not conform to C semantics.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --rreeggccaallll

              Tells the compiler that the __regcall calling  convention
              should be used for functions that do not directly specify
              a calling convention.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The __regcall calling  convention  will
                                only  be  used if a function explicitly
                                specifies it.

              DDeessccrriippttiioonn::

              This option tells the compiler that the __regcall calling
              convention  should  be  used  for  functions  that do not
              directly specify a calling convention. This calling  con-
              vention  ensures  that  as  many  values  as possible are
              passed or returned in registers.

              It ensures that __regcall is the default calling  conven-
              tion  for  functions  in  the compilation, unless another
              calling convention is specified in a declaration.

              This calling convention is ignored if it is specified for
              a function with variable arguments.

              Note that all __regcall functions must have prototypes.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --rreessttrriicctt

       --nnoo--rreessttrriicctt

              Determines whether pointer disambiguation is enabled with
              the restrict qualifier.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-restrict      Pointers  are  not  qualified  with the
                                restrict keyword.

              DDeessccrriippttiioonn::

              This option determines whether pointer disambiguation  is
              enabled with the restrict qualifier. Option -restrict and
              /Qrestrict enable the recognition of the restrict keyword
              as defined by the ANSI standard.

              By  qualifying  a  pointer with the restrict keyword, you
              assert that an object accessed by  the  pointer  is  only
              accessed  by  that pointer in the given scope. You should
              use the restrict keyword only when this is true. When the
              assertion  is  true,  the  restrict  option  will have no
              effect on program correctness, but may allow better opti-
              mization.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --SS

              Causes  the  compiler to compile to an assembly file only
              and not link.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Normal compilation and linking occur.

              DDeessccrriippttiioonn::

              This option causes the compiler to compile to an assembly
              file only and not link.

              On Linux* and OS X* systems, the assembly file name has a
              .s  suffix.  On  Windows* systems, the assembly file name
              has an .asm suffix.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --ssaavvee--tteemmppss

       --nnoo--ssaavvee--tteemmppss

              Tells the compiler to  save  intermediate  files  created
              during compilation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              Linux* OS and OS X*: -no-save-temps
                                On Linux and OS X systems, the compiler
                                deletes intermediate files after compi-
                                lation is completed.

              DDeessccrriippttiioonn::

              This option tells the compiler to save intermediate files
              created  during compilation. The names of the files saved
              are based on the name of the source file; the  files  are
              saved in the current working directory.

              If  option  [Q]save-temps  is  specified,  the  following
              occurs:

              · The object .o file (Linux OS and OS  X)  or  .obj  file
                (Windows OS) is saved.

              · The  assembler .s file (Linux OS and OS X) or .asm file
                (Windows OS) is saved if you specified  the  [Q]use-asm
                option.

              If -no-save-temps is specified on Linux  or OS X systems,
              the following occurs:

              · The .o file is put into /tmp and deleted after  calling
                ld.

              · The  preprocessed  file  is not saved after it has been
                used by the compiler.

              If /Qsave-temps- is specified  on  Windows  systems,  the
              following occurs:

              · The .obj file is not saved after the linker step.

              · The  preprocessed  file  is not saved after it has been
                used by the compiler.

              NNOOTTEE:: This option only saves intermediate files that  are
              normally created during compilation.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssccaallaarr--rreepp

       --nnoo--ssccaallaarr--rreepp

              Enables  or  disables the scalar replacement optimization
              done by the compiler as part of loop transformations.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -scalar-rep       Scalar  replacement is performed during
                                loop  transformation  at   optimization
                                levels of O2 and above.

              DDeessccrriippttiioonn::

              This  option  enables  or disables the scalar replacement
              optimization done by the compiler as part of loop  trans-
              formations.  This option takes effect only if you specify
              an optimization level of O2 or higher.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --sshhaarreedd ((LL**XX oonnllyy))

              Tells the compiler to produce  a  dynamic  shared  object
              instead of an executable.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler produces an executable.

              DDeessccrriippttiioonn::

              This option tells  the  compiler  to  produce  a  dynamic
              shared  object  (DSO)  instead  of  an  executable.  This
              includes linking in all libraries dynamically and passing
              -shared to the linker.

              You  must specify option fpic for the compilation of each
              object file you want to include in the shared library.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --sshhaarreedd--iinntteell

              Causes Intel-provided libraries to be linked  in  dynami-
              cally.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Intel(R) libraries are linked in stati-
                                cally,  with  the  exception of Intel's
                                OpenMP* runtime support library,  which
                                is linked in dynamically.

              DDeessccrriippttiioonn::

              This  option causes Intel-provided libraries to be linked
              in dynamically. It is the opposite of -static-intel.

              If you specify option -mcmodel=medium or  -mcmodel=large,
              it sets option -shared-intel.

              NNOOTTEE::  On  OS  X*  systems,  when  you set "Intel Runtime
              Libraries"  to  "Dynamic",  you   must   also   set   the
              DYLD_LIBRARY_PATH  environment  variable within Xcode* or
              an error will be displayed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --sshhaarreedd--lliibbggcccc ((LL**XX oonnllyy))

              Links the GNU libgcc library dynamically.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -shared-libgcc    The compiler links the  libgcc  library
                                dynamically.

              DDeessccrriippttiioonn::

              This  option links the GNU libgcc library dynamically. It
              is the opposite of option static-libgcc.

              This option is useful  when  you  want  to  override  the
              default  behavior  of the static option, which causes all
              libraries to be linked statically.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssiimmdd

       --nnoo--ssiimmdd

              Enables  or  disables  compiler  interpretation  of  SIMD
              pragmas.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -simd             SIMD pragmas are enabled.

              DDeessccrriippttiioonn::

              This option enables or disables  compiler  interpretation
              of SIMD  pragmas.

              To   disable  interpretation  of  SIMD  pragmas,  specify
              -no-simd (Linux* OS and OS X*) or /Qsimd- (Windows*  OS).
              Note that the compiler may still vectorize loops based on
              its  own  heuristics  (leading  to  generation  of   SIMD
              instructions)  even  when -no-simd (or /Qsimd-) is speci-
              fied.

              To disable all compiler vectorization, use  the  "-no-vec
              -no-simd" (Linux* OS and OS X*) or "/Qvec- /Qsimd-" (Win-
              dows* OS)  compiler  options.  The  option  -no-vec  (and
              /Qvec-)  disables  all auto-vectorization, including vec-
              torization  of  array  notation  statements.  The  option
              -no-simd  (and  /Qsimd-)  disables vectorization of loops
              that have SIMD pragmas.

              NNOOTTEE:: If you specify option -mia32 or option  /arch:IA32,
              SIMD  pragmas  are disabled by default.  When you specify
              option -mia32 or option /arch:IA32,  vector  instructions
              cannot  be  used. Therefore, you cannot explicitly enable
              SIMD pragmas by specifying option [Q]simd.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssooxx[[==kkeeyywwoorrdd[[,,kkeeyywwoorrdd]]]] ((LL**XX oonnllyy))

       --nnoo--ssooxx ((LL**XX oonnllyy))

              Tells the compiler to save the  compilation  options  and
              version  number in the executable file.  It also lets you
              choose whether to include lists of certain functions.

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Is the function information to include.
                                Possible values are:

                                inline         Includes  a  list of the
                                               functions   that    were
                                               inlined  in each object.

                                profile        Includes a list  of  the
                                               functions that were com-
                                               piled with the -prof-use
                                               option and for which the
                                               .dpi  file  had  profile
                                               information,    and   an
                                               indication for  each  as
                                               to  whether  the profile
                                               information   was   USED
                                               (matched)   or   IGNORED
                                               (mismatched).

              DDeeffaauulltt::

              -no-sox           The compiler does not save these infor-
                                mational strings in the object file.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to save the compilation
              options and version number in the  executable  file.   It
              also  lets you choose whether to include lists of certain
              functions.  The information is embedded as  a  string  in
              each object file or assembly output.

              If  you  specify option sox with no _k_e_y_w_o_r_d, the compiler
              saves the compiler options and version number used in the
              compilation of the objects that make up the executable.

              When  you specify this option, the size of the executable
              on disk is increased slightly. Each _k_e_y_w_o_r_d  you  specify
              increases  the size of the executable.  When you link the
              object files into an executable file, the  linker  places
              each  of  the  information strings into the header of the
              executable. It is then possible to use a tool, such as  a
              strings  utility,  to determine what options were used to
              build the executable file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttaattiicc ((LL**XX oonnllyy))

              Prevents linking with shared libraries.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The   compiler   links   with    shared
                                libraries.

              DDeessccrriippttiioonn::

              This  option  prevents  linking with shared libraries. It
              causes the executable to link all libraries statically.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttaattiicc--iinntteell

              Causes Intel-provided libraries to be  linked  in  stati-
              cally.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              ON                Intel libraries are  linked  in  stati-
                                cally,  with  the  exception of Intel's
                                OpenMP* runtime support library,  which
                                is linked in dynamically.

              DDeessccrriippttiioonn::

              This  option causes Intel-provided libraries to be linked
              in statically. It is the opposite of -shared-intel.

              If  you  specify  option   -static-intel   while   option
              -mcmodel=medium  or  -mcmodel=large is set, an error will
              be displayed.

              If  you  specify  option  static-intel  and  any  of  the
              Intel-provided  libraries have no static version, a diag-
              nostic will be displayed.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttaattiicclliibb ((MM**XX oonnllyy))

              Invokes the libtool command to generate static libraries.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler produces an executable.

              DDeessccrriippttiioonn::

              This option  invokes  the  libtool  command  to  generate
              static libraries.

              When  passed  this  option, the compiler uses the libtool
              command to produce a static library instead  of  an  exe-
              cutable when linking.

              To  build  dynamic  libraries,  you should specify option
              -dynamiclib or libtool -dynamic <objects>.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttaattiicc--lliibbggcccc ((LL**XX oonnllyy))

              Links the GNU libgcc library statically.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  links  the  GNU   libgcc
                                library dynamically.

              DDeessccrriippttiioonn::

              This  option  links the GNU libgcc library statically. It
              is the opposite of option -shared-libgcc.

              This option is useful  when  you  want  to  override  the
              default  behavior,  which causes the library to be linked
              dynamically.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttaattiicc--lliibbssttddcc++++ ((LL**XX oonnllyy))

              Links the GNU libstdc++ library statically.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler links  the  GNU  libstdc++
                                library dynamically.

              DDeessccrriippttiioonn::

              This option links the GNU libstdc++ library statically.

              This  option  is  useful  when  you  want to override the
              default behavior, which causes the library to  be  linked
              dynamically.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttdd==vvaall

              Tells  the  compiler  to  conform  to a specific language
              standard.

              AArrgguummeennttss::

              _v_a_l               Specifies  the  specific language stan-
                                dard to  conform  to.  Possible  values
                                are:

                                c89            Conforms  to the ISO/IEC
                                               9899:1990  International
                                               Standard.  This value is
                                               only available on Linux*
                                               OS and OS X*.

                                c99            Conforms  to The ISO/IEC
                                               9899:1999  International
                                               Standard.

                                c9x            This value is equivalent
                                               to specifying value c99.
                                               This   value   is   only
                                               available on  Linux*  OS
                                               and OS X*.

                                gnu89          Conforms to ISO C90 plus
                                               GNU*  extensions.   This
                                               value  is only available
                                               on Linux* OS and OS  X*.

                                gnu99          Conforms to ISO C99 plus
                                               GNU*  extensions.   This
                                               value  is only available
                                               on Linux* OS and OS  X*.

                                gnu++98        Conforms to the 1998 ISO
                                               C++  standard  plus  GNU
                                               extensions.  This  value
                                               is  only  available   on
                                               Linux* OS and OS X*.

                                c++11          Enables support for many
                                               C++11 (formerly known as
                                               C++0x)   features.   The
                                               following are  the  most
                                               recently added features:

                                               · Defining move  special
                                                 member       functions
                                                 (N3053)

                                               · Explicit virtual over-
                                                 rides
                                                 (N2928,N3206,N3272)

                                               · Full implementation of
                                                 constexpr  (this  fea-
                                                 ture is only available
                                                 on  Linux*  OS  and OS
                                                 X*)

                                               · Full implementation of
                                                 initializer lists

                                               · Full implementation of
                                                 noexcept

                                               · Full implementation of
                                                 non  static  data mem-
                                                 bers (i.e. field  ini-
                                                 tializers)

                                               · Raw   string  literals
                                                 and UTF-8 literals

                                               · Delegating   construc-
                                                 tors

                                               · Ref-qualifiers on mem-
                                                 ber functions

                                               · Additional type  trait
                                                 helpers  (for example,
                                                 __is_nothrow_assignable,
                                                 __is_triv-
                                                 ially_assignable,
                                                 __is_trivially_con-
                                                 structible,   __bases,
                                                 __direct_bases,  etc.)

                                               For a list of C++11 fea-
                                               tures  that  were previ-
                                               ously implemented by the
                                               Intel(R)  C++  Compiler,
                                               see the  article  titled
                                               C++11 Features Supported
                                               by  Intel(R)  C++   Com-
                                               piler,  which is located
                                               in          http://soft-
                                               ware.intel.com/en-us/arti-
                                               cles/c0x-features-sup-
                                               ported-by-intel-c-com-
                                               piler/

                                c++0x          This value is equivalent
                                               to    specifying   value
                                               c++11.

                                gnu++0x        This value is equivalent
                                               to    specifying   value
                                               c++0x.  This  value   is
                                               only available on Linux*
                                               OS and OS X*.

              DDeeffaauulltt::

              -std=gnu89 (default for C)
                                Conforms to ISO  C90  plus  GNU  exten-
                                sions.

              -std=gnu++98 (default for C++)
                                Conforms  to  the 1998 ISO C++ standard
                                plus GNU* extensions.

              DDeessccrriippttiioonn::

              This option tells the compiler to conform to  a  specific
              language standard.

              On  Windows*  OS,  you  can  only  specify values c99 and
              c++0x.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttddlliibb[[==kkeeyywwoorrdd]] ((MM**XX oonnllyy))

       ((MM**XX oonnllyy))

              Lets you select the C++ library to be used for linking.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss::  Not available on Intel(R)  64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Is the function information to include.
                                Possible values are:

                                libstdc++      Links using the GNU lib-
                                               stdc++ library.

                                libc++         Links using  the  libc++
                                               library.

              DDeeffaauulltt::

              -stdlib=libstdc++ The  compiler  links using the GNU lib-
                                stdc++ library.

              DDeessccrriippttiioonn::

              This option lets you select the C++ library  to  be  used
              for linking.

              Currently,  if  you  do not specify this option, the lib-
              stdc++ headers and library are used.

              NNOOTTEE:: The  IDE  provides  another  possible  setting  for
              option  -stdlib,  which  lets  you  choose  the  compiler
              default rather than a specific  library.  Note  that  the
              compiler default may change in a future release.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ssttrriicctt--aannssii

              Tells  the  compiler to implement strict ANSI conformance
              dialect.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler conforms to default stan-
                                dards.

              DDeessccrriippttiioonn::

              This option tells the compiler to implement  strict  ANSI
              conformance dialect. On Linux* systems, if you need to be
              compatible with gcc, use the -ansi option.

              This option sets option fmath-errno, which tells the com-
              piler  to assume that the program tests errno after calls
              to math library functions.  This  restricts  optimization
              because  it  causes the compiler to treat most math func-
              tions as having side effects.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --TTffiilleennaammee ((LL**XX oonnllyy))

              Tells the linker to read link commands from a file.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of the file.

              DDeeffaauulltt::

              OFF               The linker does not read link  commands
                                from a file.

              DDeessccrriippttiioonn::

              This option tells the linker to read link commands from a
              file.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ttbbbb

              Tells the compiler to  link  to  the  Intel(R)  Threading
              Building Blocks (Intel(R) TBB) libraries.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  does  not  link  to  the
                                Intel(R) TBB libraries.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to link to the Intel(R)
              Threading Building Blocks (Intel(R)  TBB)  libraries  and
              include the Intel(R) TBB headers.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ttcchheecckk ((LL**XX oonnllyy))

              Enables analysis of threaded applications.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Threaded  applications  are not instru-
                                mented by the compiler for analysis  by
                                Intel(R) Thread Checker.

              DDeessccrriippttiioonn::

              This option enables analysis of threaded applications.

              This  thread  checking  feature  requires installation of
              another  product.  For  more  information,  see   Feature
              Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ttccoolllleecctt[[lliibb]] ((LL**XX oonnllyy))

              Inserts instrumentation probes calling the Intel(R) Trace
              Collector API.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss:: Not available on IA-32 archi-
              tecture targeting Intel(R)  Graphics  Technology,  or  on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              _l_i_b               Is  one of the Intel(R) Trace Collector
                                libraries; for example, VT, VTcs, VTmc,
                                or VTfs. If you do not specify _l_i_b, the
                                default library is VT.

              DDeeffaauulltt::

              OFF               Instrumentation probes are not inserted
                                into compiled applications.

              DDeessccrriippttiioonn::

              This  option  inserts  instrumentation probes calling the
              Intel(R) Trace Collector API.

              This trace analyzing/collecting feature requires  instal-
              lation of another product. For more information, see Fea-
              ture Requirements.

              This option provides a flexible  and  convenient  way  of
              instrumenting  functions  of  a compiled application. For
              every function, the entry and  exit  points  are  instru-
              mented  at compile time to let the Intel(R) Trace Collec-
              tor record functions beyond the default  MPI  calls.  For
              non-MPI  applications  (for example, threaded or serial),
              you must ensure that  the  Intel(R)  Trace  Collector  is
              properly initialized (VT_initialize/VT_init).

              CCAAUUTTIIOONN::  Be  careful  with  full instrumentation because
              this feature can produce very large trace files.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ttccoolllleecctt--ffiilltteerr ffiilleennaammee ((LL**XX oonnllyy))

              Lets you enable or disable the instrumentation of  speci-
              fied functions.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on IA-32  archi-
              tecture  targeting  Intel(R)  Graphics  Technology, or on
              Intel(R)  64  architecture  targeting  Intel(R)  Graphics
              Technology

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is a configuration file that lists fil-
                                ters,  one  per  line. Each filter con-
                                sists of a  regular  expression  string
                                and  a  switch. Strings with leading or
                                trailing white spaces must  be  quoted.
                                Other strings do not have to be quoted.
                                The switch value can be ON, on, OFF, or
                                off.

              DDeeffaauulltt::

              OFF               Functions  are  not  instrumented. How-
                                ever, if option  -tcollect  (Linux)  is
                                specified,  the  filter  setting is ".*
                                ON" and all functions get instrumented.

              DDeessccrriippttiioonn::

              This  option  lets you enable or disable the instrumenta-
              tion of specified functions.

              During instrumentation, the regular  expressions  in  the
              file  are  matched against the function names. The switch
              specifies whether matching functions are  to  be  instru-
              mented or not. Multiple filters are evaluated from top to
              bottom with increasing precedence.

              The names of the functions to match against are formatted
              as follows:

              · C++  function  names  are  demangled  and the C++ class
                hierarchy is used. Function parameters are stripped  to
                keep the function names shorter.

              · The  source  file name is followed by a colon-separated
                function name. Source file  names  should  contain  the
                full path, if available. For example:

                /home/joe/src/foo.c:FOO_bar

              · Classes  and  function  names  are  separated by double
                colons. For example:

                /home/joe/src/foo.cpp:app::foo::bar

              You  can  use  option   -qopt-report   (Linux*   OS)   or
              /Qopt-report (Windows* OS) to get a full list of file and
              function names that the compiler recognizes from the com-
              pilation  unit.  This  list  can be used as the basis for
              filtering in the configuration file.

              This trace analyzing/collecting feature requires  instal-
              lation of another product. For more information, see Fea-
              ture Requirements.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ttrraacceebbaacckk

       --nnoottrraacceebbaacckk

              Tells the compiler to generate extra information  in  the
              object  file to provide source file traceback information
              when a severe error occurs at run time.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              notraceback       No extra information  is  generated  in
                                the  object  file  to produce traceback
                                information.

              DDeessccrriippttiioonn::

              This option tells the compiler to generate extra informa-
              tion  in the object file to provide source file traceback
              information when a severe error occurs at run time.  This
              is intended for use with C code that is to be linked into
              a Fortran program.

              When the severe error occurs, source file, routine  name,
              and  line  number  correlation  information  is displayed
              along with  call  stack  hexadecimal  addresses  (program
              counter trace).

              Note  that when a severe error occurs, advanced users can
              also locate the cause of the error using a map  file  and
              the hexadecimal addresses of the stack displayed when the
              error occurs.

              This option increases the size of the executable program,
              but has no impact on run-time execution speeds.

              It functions independently of the debug option.

              On  Windows*  systems,  traceback  sets  the /Oy- option,
              which forces the compiler to use EBP as the  stack  frame
              pointer.

              On  Windows*  systems,  the  linker  places the traceback
              information in the executable image, in a  section  named
              ".trace".  To see which sections are in an image, use the
              command:

              link -dump -summary your_app_name.exe


              To see more detailed information, use the command:

              link -dump -headers your_app_name.exe


              On Linux* systems, to display the section headers in  the
              image  (including  the  header for the .trace section, if
              any), use the command:

              objdump -h your_app_name.exe


              On OS X* systems, to display the section headers  in  the
              image, use the command:

              otool -l your_app_name.exe


              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWttrriiggrraapphhss

       --WWnnoo--ttrriiggrraapphhss

              Determines  whether  warnings are issued if any trigraphs
              are encountered that might change the meaning of the pro-
              gram.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-trigraphs    No warnings are issued if any trigraphs
                                are encountered that might  change  the
                                meaning of the program.

              DDeessccrriippttiioonn::

              This option determines whether warnings are issued if any
              trigraphs are encountered that might change  the  meaning
              of the program.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --uu ssyymmbbooll

              Tells the compiler the specified symbol is undefined.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Standard  rules are in effect for vari-
                                ables.

              DDeessccrriippttiioonn::

              This option tells the compiler the  specified  _s_y_m_b_o_l  is
              undefined.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --UUnnaammee

              Undefines  any  definition  currently  in  effect for the
              specified macro.

              AArrgguummeennttss::

              _n_a_m_e              Is  the  name  of the macro to be unde-
                                fined.

              DDeeffaauulltt::

              OFF               Macro definitions are in  effect  until
                                they are undefined.

              DDeessccrriippttiioonn::

              This  option undefines any definition currently in effect
              for the specified macro. It is equivalent  to  an  #undef
              preprocessing directive.

              On  Windows  systems,  use  the /u option to undefine all
              previously defined preprocessor values.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --uunnrroollll[[==nn]]

              Tells the compiler the maximum number of times to  unroll
              loops.

              AArrgguummeennttss::

              _n                 Is the maximum number of times  a  loop
                                can   be   unrolled.  To  disable  loop
                                enrolling, specify 0.

              DDeeffaauulltt::

              -unroll           The compiler  uses  default  heuristics
                                when unrolling loops.

              DDeessccrriippttiioonn::

              This  option  tells  the  compiler  the maximum number of
              times to unroll loops.

              If you do not specify _n,  the  optimizer  determines  how
              many times loops can be unrolled.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -funroll-loops

       --uunnrroollll--aaggggrreessssiivvee

       --nnoo--uunnrroollll--aaggggrreessssiivvee

              Determines  whether  the  compiler  uses  more aggressive
              unrolling for certain loops.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-unroll-aggressive
                                The  compiler  uses  default heuristics
                                when unrolling loops.

              DDeessccrriippttiioonn::

              This option determines whether  the  compiler  uses  more
              aggressive unrolling for certain loops. The positive form
              of the option may improve performance.

              This option enables aggressive,  complete  unrolling  for
              loops with small constant trip counts.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --uussee--ccllaanngg--eennvv ((MM**XX oonnllyy))

              Enables the use of the Clang environment.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -use-clang-env    The Clang environment is used.

              DDeessccrriippttiioonn::

              This  option  enables  the  use of the Clang environment.
              This environment uses the Clang headers and libraries.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --uussee--iinntteell--ooppttiimmiizzeedd--hheeaaddeerrss

              Determines whether the performance headers  directory  is
              added to the include path search list.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -no-use-intel-optimized-headers
                                The performance  headers  directory  is
                                not  added  to  the include path search
                                list.

              DDeessccrriippttiioonn::

              This option determines whether  the  performance  headers
              directory is added to the include path search list.

              The performance headers directory is added if you specify
              [Q]use-intel-optimized-headers. Appropriate libraries are
              also linked in, as needed, for proper functionality.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --uussee--mmssaassmm

              Enables  the use of blocks and entire functions of assem-
              bly code within a C or C++ file.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler allows a GNU*-style inline
                                assembly format.

              DDeessccrriippttiioonn::

              This option enables the use of blocks  and  entire  func-
              tions of assembly code within a C or C++ file.

              It  allows  a Microsoft* MASM-style inline assembly block
              not a GNU*-style inline assembly block.

              AAlltteerrnnaattee OOppttiioonnss::

              -fasm-blocks

       --VV

              Displays the compiler version information.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler version information is not
                                displayed.

              DDeessccrriippttiioonn::

              This  option  displays the startup banner, which contains
              the following compiler information:

              · The name of the compiler and its  applicable  architec-
                ture

              · The major and minor version of the compiler, the update
                number, and the  package  number(for  example,  Version
                12.1.0.047)

              · The  specific  build and build date (for example, Build
                <builddate>)

              · The copyright date of the software

              This option can be placed anywhere on the command line.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vv [[ffiilleennaammee]]

              Specifies that driver tool commands should  be  displayed
              and executed.

              AArrgguummeennttss::

              _f_i_l_e_n_a_m_e          Is the name of a source file to be com-
                                piled.  A  space must appear before the
                                file name.

              DDeeffaauulltt::

              OFF               No tool commands are shown.

              DDeessccrriippttiioonn::

              This option specifies that driver tool commands should be
              displayed and executed.

              If  you  use this option without specifying a source file
              name, the compiler displays only the version of the  com-
              piler.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vveecc

       --nnoo--vveecc

              Enables or disables vectorization.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -vec              Vectorization is enabled.

              DDeessccrriippttiioonn::

              This option enables or disables vectorization.

              To  disable vectorization, specify -no-vec (Linux* OS and
              OS X*) or /Qvec- (Windows* OS).

              To  disable  interpretation  of  SIMD  pragmas,   specify
              -no-simd  (Linux* OS and OS X*) or /Qsimd- (Windows* OS).

              To disable all compiler vectorization, use  the  "-no-vec
              -no-simd" (Linux* OS and OS X*) or "/Qvec- /Qsimd-" (Win-
              dows* OS)  compiler  options.  The  option  -no-vec  (and
              /Qvec-)  disables  all auto-vectorization, including vec-
              torization  of  array  notation  statements.  The  option
              -no-simd  (and  /Qsimd-)  disables vectorization of loops
              that have SIMD pragmas.

              NNOOTTEE:: Using this option enables vectorization at  default
              optimization levels for both Intel(R) microprocessors and
              non-Intel  microprocessors.    Vectorization   may   call
              library  routines  that  can result in additional perfor-
              mance gain on Intel  microprocessors  than  on  non-Intel
              microprocessors.  The  vectorization can also be affected
              by certain options,  such  as  /arch  (Windows  OS),   -m
              (Linux OS and OS X), or [Q]x.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vveecc--gguuaarrdd--wwrriittee

       --nnoo--vveecc--gguuaarrdd--wwrriittee

              Tells  the  compiler  to perform a conditional check in a
              vectorized loop.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -vec-guard-write  The   compiler   performs a conditional
                                check in a vectorized loop.

              DDeessccrriippttiioonn::

              This option tells the compiler to perform  a  conditional
              check in a vectorized loop. This checking avoids unneces-
              sary stores and may improve performance.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vveecc--rreeppoorrtt[[==nn]]

              Controls the diagnostic information reported by the  vec-
              torizer.  This  is  a  deprecated option. The replacement
              options  for  this  kind  of  report   are   -qopt-report
              -qopt-report-phase=vec    (Linux*   OS   and  OS  X*)  or
              /Qopt-report /Qopt-report-phase:vec (Windows* OS).

              AArrgguummeennttss::

              _n                 Is a value  denoting  which  diagnostic
                                messages  to  report.  Possible  values
                                are:

                                0              Tells the vectorizer  to
                                               report   no   diagnostic
                                               information.

                                1              Tells the vectorizer  to
                                               report   on   vectorized
                                               loops.

                                2              Tells the vectorizer  to
                                               report on vectorized and
                                               non-vectorized    loops.
                                               This is the default if _n
                                               is not specified.

                                3              Tells the vectorizer  to
                                               report on vectorized and
                                               non-vectorized loops and
                                               any  proven  or  assumed
                                               data dependences.

                                4              Tells the vectorizer  to
                                               report on non-vectorized
                                               loops.

                                5              Tells the vectorizer  to
                                               report on non-vectorized
                                               loops and the reason why
                                               they  were  not  vector-
                                               ized.

                                6              Tells the vectorizer  to
                                               use  greater detail when
                                               reporting on  vectorized
                                               and non-vectorized loops
                                               and   any   proven    or
                                               assumed    data   depen-
                                               dences.   This value  is
                                               deprecated.  There is no
                                               replacement. In a future
                                               release,  value  5  will
                                               produce   the   greatest
                                               level of details.

                                7              Tells  the vectorizer to
                                               emit vector code quality
                                               message  ids  and corre-
                                               sponding data values for
                                               vectorized   loops.   It
                                               provides     information
                                               such   as  the  expected
                                               speedup,  memory  access
                                               patterns, and the number
                                               of  vector  idioms   for
                                               vectorized  loops.  This
                                               value   is   deprecated.
                                               There is no replacement.
                                               In  a  future   release,
                                               value 5 will produce the
                                               greatest    level     of
                                               details.

              DDeeffaauulltt::

              OFF               No vectorizer messages are displayed.

              DDeessccrriippttiioonn::

              This  option controls the diagnostic information reported
              by the vectorizer. The vectorizer report is sent to  std-
              out.

              For  details  on  each  vectorization diagnostic, see the
              article titled: _V_e_c_t_o_r_i_z_a_t_i_o_n  _D_i_a_g_n_o_s_t_i_c_s  _f_o_r  _I_n_t_e_l_(_R_)
              _C_+_+  _C_o_m_p_i_l_e_r,  located at: http://intel.ly/1c3nVmJ. This
              article includes the root cause  of  each  diagnostic,  a
              code sample that generates the diagnostic, and a possible
              resolution, if any.

              NNOOTTEE:: When option  -qopt-report  or  /Qopt-report  is  in
              effect,  you  get reports for all optimizer phases.  When
              you specify -qopt-report or  /Qopt-report  along  with  a
              particular   setting  for  option  -qopt-report-phase  or
              /Qopt-report-phase, you suppress reports  for  the  other
              phases.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vveecc--tthhrreesshhoolldd[[nn]]

              Sets a threshold for the vectorization of loops.

              AArrgguummeennttss::

              _n                 Is   an  integer  whose  value  is  the
                                threshold  for  the  vectorization   of
                                loops.  Possible  values  are 0 through
                                100.

                                If _n is 0, loops get vectorized always,
                                regardless  of computation work volume.

                                If _n is 100, loops get vectorized  when
                                performance  gains  are predicted based
                                on the compiler  analysis  data.  Loops
                                get  vectorized only if profitable vec-
                                tor-level parallel execution is  almost
                                certain.

                                The  intermediate 1 to 99 values repre-
                                sent  the  percentage  probability  for
                                profitable  speed-up. For example, _n=50
                                directs the compiler to vectorize  only
                                if  there  is  a 50% probability of the
                                code speeding up if executed in  vector
                                form.

              DDeeffaauulltt::

              -vec-threshold100 Loops get vectorized only if profitable
                                vector-level  parallel   execution   is
                                almost   certain.   This  is  also  the
                                default if you do not specify  _n.

              DDeessccrriippttiioonn::

              This option sets a threshold  for  the  vectorization  of
              loops based on the probability of profitable execution of
              the vectorized loop in parallel.

              This option is useful for loops  whose  computation  work
              volume  cannot be determined at compile-time. The thresh-
              old is usually relevant  when  the  loop  trip  count  is
              unknown at compile-time.

              The  compiler  applies  a heuristic that tries to balance
              the overhead of  creating  multiple  threads  versus  the
              amount  of  work  available  to  be  shared  amongst  the
              threads.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --vveeccaabbii==kkeeyywwoorrdd

              Determines whether the compiler uses the compatibility or
              legacy   vector  function  application  binary  interface
              (ABI).

              AArrgguummeennttss::

              _k_e_y_w_o_r_d           Specifies which vector function ABI  to
                                use.  Possible values are:

                                legacy         Tells  the  compiler  to
                                               use  the  legacy  vector
                                               function ABI.

                                compat         Tells  the  compiler  to
                                               use  the   compatibility
                                               vector function ABI.

              DDeeffaauulltt::

              -vecabi=compat    The  compiler  uses  the  compatibility
                                vector function ABI.

              DDeessccrriippttiioonn::

              This option determines whether the compiler uses the com-
              patibility  or  legacy vector function application binary
              interface (ABI).

              On Linux* systems, by default, it provides  compatibility
              with  gcc's  version of the vector function ABI. You must
              specify _k_e_y_w_o_r_dlegacy if you need to keep  the  generated
              vector  function binary backward compatible with the vec-
              torized binary  generated  by  the  previous  version  of
              Intel(R) compilers.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       ----vveerrssiioonn

              Tells  the compiler to display GCC-style version informa-
              tion.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture targeting Intel(R) MIC Architecture

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Tells  the compiler to display GCC-style version informa-
              tion.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ww

              Disables all warning messages.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Default warning messages are enabled.

              DDeessccrriippttiioonn::

              This option disables all warning messages.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -w0

              Windows: /W0

       --wwnn

              Specifies the level of diagnostic messages to  be  gener-
              ated by the compiler.

              AArrgguummeennttss::

              _n                 Is the level of diagnostic messages  to
                                be generated. Possible values are:

                                0              Enables  diagnostics for
                                               errors.  Disables  diag-
                                               nostics for warnings.

                                1              Enables  diagnostics for
                                               warnings and errors.

                                2              Enables diagnostics  for
                                               warnings  and errors. On
                                               Linux* and  OS  X*  sys-
                                               tems,  additional  warn-
                                               ings  are  enabled.   On
                                               Windows*  systems,  this
                                               setting is equivalent to
                                               level 1 (_n  = 1).

                                3              Enables  diagnostics for
                                               remarks,  warnings,  and
                                               errors. Additional warn-
                                               ings  are  also  enabled
                                               above  level  2 (_n = 2).
                                               This  level  is   recom-
                                               mended   for  production
                                               purposes.

                                4              Enables diagnostics  for
                                               all  level  3  (_n  =  3)
                                               warnings  plus  informa-
                                               tional   warnings    and
                                               remarks, which  in  most
                                               cases   can   be  safely
                                               ignored. This  value  is
                                               only  available  on Win-
                                               dows* systems.

                                5              Enables diagnostics  for
                                               all  remarks,  warnings,
                                               and errors. This setting
                                               produces  the most diag-
                                               nostic  messages.   This
                                               value  is only available
                                               on Windows* systems.

              DDeeffaauulltt::

              n=1               The compiler displays  diagnostics  for
                                warnings and errors.

              DDeessccrriippttiioonn::

              This option specifies the level of diagnostic messages to
              be generated by the compiler.

              On Windows systems, option /W4 is  equivalent  to  option
              /Wall.

              The  -w_n, /W_n, and  Wall options can override each other.
              The last option  specified  on  the  command  line  takes
              precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWaa,,ooppttiioonn11[[,,ooppttiioonn22,,......]]

              Passes options to the assembler for processing.

              AArrgguummeennttss::

              _o_p_t_i_o_n            Is  an assembler option. This option is
                                not processed  by  the  driver  and  is
                                directly passed to the assembler.

              DDeeffaauulltt::

              OFF               No options are passed to the assembler.

              DDeessccrriippttiioonn::

              This option passes one or more options to  the  assembler
              for  processing.  If  the assembler is not invoked, these
              options are ignored.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWaabbii

       --WWnnoo--aabbii

              Determines whether a warning is issued if generated  code
              is not C++ ABI compliant.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-abi          No warning  is  issued  when  generated
                                code is not C++ ABI compliant.

              DDeessccrriippttiioonn::

              This  option  determines  whether  a warning is issued if
              generated code is not C++ ABI compliant.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWaallll

              Enables warning and error diagnostics.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Only default  warning  diagnostics  are
                                enabled.

              DDeessccrriippttiioonn::

              This option enables many warning and error diagnostics.

              On Windows* systems, this option is equivalent to the /W4
              option. It enables diagnostics for all level  3  warnings
              plus informational warnings and remarks.

              However, on Linux* and OS X* systems, this option is sim-
              ilar to gcc option -Wall.  It  displays  all  errors  and
              some  of  the warnings that are typically reported by gcc
              option -Wall. If you want to display all warnings,  spec-
              ify the -w2 or -w3 option. If you want to display remarks
              and comments, specify the -Wremarks option.

              The Wall, -w_n, and /W_n options can override  each  other.
              The  last  option  specified  on  the  command line takes
              precedence.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --wwaattcchh[[==kkeeyywwoorrdd[[,, kkeeyywwoorrdd......]]]]

       --nnoowwaattcchh

              Tells the compiler to display certain information to  the
              console output window.

              AArrgguummeennttss::

              keyword           Determines  what  information  is  dis-
                                played. Possible values are:

                                none           Disables cmd and source.

                                [no]cmd        Determines       whether
                                               driver tool commands are
                                               displayed and  executed.

                                [no]source     Determines  whether  the
                                               name of the  file  being
                                               compiled is displayed.

                                mic-cmd        Enables  display of com-
                                               piler options  that  are
                                               passed  to  the  offload
                                               compilation.  This  key-
                                               word  is  only available
                                               on Intel(R)  MIC  Archi-
                                               tecture.

                                all            Enables  cmd and source.

              DDeeffaauulltt::

              nowatch           Pass information and source file  names
                                are not displayed to the console output
                                window.

              DDeessccrriippttiioonn::

              Tells the  compiler  to  display  processing  information
              (pass  information  and source file names) to the console
              output window.

              OOppttiioonn wwaattcchhkkeeyywwoorrdd
                                DDeessccrriippttiioonn

              none              Tells the compiler to not display  pass
                                information  and  source  file names to
                                the console output window. This is  the
                                same as specifying nowatch.

              cmd               Tells  the compiler to display and exe-
                                cute driver tool commands.

              source            Tells the compiler to display the  name
                                of the file being compiled.

              mic-cmd           Tells  the compiler to display the com-
                                piler options that are  passed  to  the
                                offload  compilation.  Only the options
                                that are automatically passed are  dis-
                                played. If this keyword is specified on
                                an architecture other than Intel(R) MIC
                                Architecture,  results  vary. It may be
                                ignored, have no effect, or produce  an
                                error.

              all               Tells  the  compiler  to  display  pass
                                information and source  file  names  to
                                the  console output window. This is the
                                same as specifying watch with  no  _k_e_y_-
                                _w_o_r_d.   For  heterogeneous compilation,
                                the tool commands for the host and  the
                                offload compilations will be displayed.

              AAlltteerrnnaattee OOppttiioonnss::

              watch cmd         Linux and OS X: -v

       --WWbbrriieeff

              Tells the compiler to display a shorter form of  diagnos-
              tic output.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler displays its normal  diag-
                                nostic output.

              DDeessccrriippttiioonn::

              This  option tells the compiler to display a shorter form
              of diagnostic output. In this form, the  original  source
              line  is  not displayed and the error message text is not
              wrapped when too long to fit on a single line.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: None

       --WWcchheecckk

              Tells the compiler to perform compile-time code  checking
              for certain code.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No compile-time code checking  is  per-
                                formed.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to perform compile-time
              code checking for certain code. It specifies to check for
              code  that  exhibits  non-portable behavior, represents a
              possible unintended code sequence,  or  possibly  affects
              operation of the program because of a quiet change in the
              ANSI C Standard.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWccoommmmeenntt

       --WWnnoo--ccoommmmeenntt

              Determines whether a warning is issued when /* appears in
              the middle of a /* */ comment.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-comment      No warning is issued when /* appears in
                                the middle of a /* */ comment.

              DDeessccrriippttiioonn::

              This  option  determines whether a warning is issued when
              /* appears in the middle of a /* */ comment.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWccoonntteexxtt--lliimmiitt==nn

              Set the maximum number of template instantiation contexts
              shown in diagnostic.

              AArrgguummeennttss::

              _n                 Number of template  instantiation  con-
                                texts.

              DDeeffaauulltt::

              OFF

              DDeessccrriippttiioonn::

              Set  maximum  number  of  template instantiation contexts
              shown in diagnostic.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWddeepprreeccaatteedd

       --WWnnoo--ddeepprreeccaatteedd

              Determines whether warnings are issued for deprecated C++
              headers.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wdeprecated      The compiler issues warnings for depre-
                                cated C++ headers.

              DDeessccrriippttiioonn::

              This  option  determines  whether warnings are issued for
              deprecated C++ headers. It has no effect in   C  compila-
              tion mode.

              Option  -Wdeprecated  enables these warnings  by defining
              the __DEPRECATED macro for preprocessor.

              To disable warnings for deprecated C++  headers,  specify
              -Wno-deprecated.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWeeffffcc++++

              Enables  warnings based on certain C++ programming guide-
              lines.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Diagnostics are not enabled.

              DDeessccrriippttiioonn::

              This option enables warnings based on certain programming
              guidelines developed by Scott  Meyers  in  his  books  on
              effective C++ programming. With this option, the compiler
              emits warnings for these guidelines:

              · Use const and inline rather than #define. Note that you
                will  only  get  this  in  user code, not system header
                code.

              · Use <iostream> rather than <stdio.h>.

              · Use new and delete rather than malloc and free.

              · Use C++ style comments in preference to  C  style  com-
                ments.  C comments in system headers are not diagnosed.

              · Use delete on pointer members in destructors. The  com-
                piler  diagnoses  any  pointer  that  does  not  have a
                delete.

              · Make sure you have a user copy constructor and  assign-
                ment operator in classes containing pointers.

              · Use initialization rather than assignment to members in
                constructors.

              · Make sure the initialization list ordering matches  the
                declartion list ordering in constructors.

              · Make sure base classes have virtual destructors.

              · Make sure operator= returns *this.

              · Make  sure  prefix  forms  of  increment  and decrement
                return a const object.

              · Never overload operators &&, ||, and ,.

              NNOOTTEE:: The warnings generated by this compiler option  are
              based on the following books from Scott Meyers:

              · Effective  C++  Second  Edition  -  50 Specific Ways to
                Improve Your Programs and Designs

              · More Effective C++ - 35 New Ways to Improve  Your  Pro-
                grams and Designs

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWeerrrroorr

              Changes all warnings to errors.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler  returns  diagnostics  as
                                usual.

              DDeessccrriippttiioonn::

              This option changes all warnings to errors.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -diag-error warn

       --WWeexxttrraa--ttookkeennss

       --WWnnoo--eexxttrraa--ttookkeennss

              Determines whether warnings are issued about extra tokens
              at the end of preprocessor directives.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-extra-tokens The compiler does not warn about  extra
                                tokens   at  the  end  of  preprocessor
                                directives.

              DDeessccrriippttiioonn::

              This option determines whether warnings are issued  about
              extra tokens at the end of preprocessor directives.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWffoorrmmaatt

       --WWnnoo--ffoorrmmaatt

              Determines whether argument checking is enabled for calls
              to printf, scanf, and so forth.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-format       Argument  checking  is  not enabled for
                                calls to printf, scanf, and so forth.

              DDeessccrriippttiioonn::

              This  option  determines  whether  argument  checking  is
              enabled for calls to printf, scanf, and so forth.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWffoorrmmaatt--sseeccuurriittyy

       --WWnnoo--ffoorrmmaatt--sseeccuurriittyy

              Determines whether the compiler issues a warning when the
              use of format functions may cause security problems.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-format-security
                                No  warning  is  issued when the use of
                                format  functions  may  cause  security
                                problems.

              DDeessccrriippttiioonn::

              This  option  determines  whether  the  compiler issues a
              warning when the use of format functions may cause  secu-
              rity problems.

              When  -Wformat-security is specified, it warns about uses
              of format functions where the  format  string  is  not  a
              string literal and there are no format arguments.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWiicc--ppooiinntteerr

       --WWnnoo--iicc--ppooiinntteerr

              Determines  whether  warnings  are issued for conversions
              between pointers to distinct scalar types with  the  same
              representation.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wic-pointer      The  compiler  issues warnings for con-
                                versions between pointers  to  distinct
                                scalar  types with the same representa-
                                tion.

              DDeessccrriippttiioonn::

              This option determines whether warnings  are  issued  for
              conversions  between  pointers  to  distinct scalar types
              with the same representation.

              For example, consider the following:

              void f(int *p) { long *q = p; }


              In this case, by default, the compiler issues  a  warning
              because  of the conversion from pointer to int to pointer
              to long.

              However, if you specify -Wno-ic-pointer, and long and int
              values  have  the same representation on the target plat-
              form, the warning will not be issued.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWiinnlliinnee

              Enables diagnostics about what is inlined and what is not
              inlined.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No diagnostics are produced about  what
                                is inlined and what is not inlined.

              DDeessccrriippttiioonn::

              This option enables diagnostics about what is inlined and
              what is not  inlined.  The  diagnostics  depend  on  what
              interprocedural functionality is available.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWll,,ooppttiioonn11[[,,ooppttiioonn22,,......]]

              Passes options to the linker for processing.

              AArrgguummeennttss::

              _o_p_t_i_o_n            Is  a linker option. This option is not
                                processed by the driver and is directly
                                passed to the linker.

              DDeeffaauulltt::

              OFF               No options are passed to the linker.

              DDeessccrriippttiioonn::

              This  option passes one or more options to the linker for
              processing. If the linker is not invoked,  these  options
              are ignored.

              This  option  is  equivalent  to  specifying option -Qop-
              tion,link,_o_p_t_i_o_n_s.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWmmaaiinn

       --WWnnoo--mmaaiinn

              Determines whether a warning is issued if the return type
              of main is not expected.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-main         No warning is issued if the return type
                                of main is not expected.

              DDeessccrriippttiioonn::

              This option determines whether a warning is issued if the
              return type of main is not expected.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss

       --WWnnoo--mmiissssiinngg--ddeeccllaarraattiioonnss

              Determines whether warnings are issued for  global  func-
              tions and variables without prior declaration.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-missing-declarations
                                No warnings are issued for global func-
                                tions  and variables without prior dec-
                                laration.

              DDeessccrriippttiioonn::

              This option determines whether warnings  are  issued  for
              global functions and variables without prior declaration.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWmmiissssiinngg--pprroottoottyyppeess

       --WWnnoo--mmiissssiinngg--pprroottoottyyppeess

              Determines whether warnings are issued for missing proto-
              types.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-missing-prototypes
                                No warnings are issued for missing pro-
                                totypes.

              DDeessccrriippttiioonn::

              Determines whether warnings are issued for missing proto-
              types.

              If -Wmissing-prototypes is specified, it tells  the  com-
              piler to detect global functions that are defined without
              a previous prototype declaration.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWnnoonn--vviirrttuuaall--ddttoorr

              Tells the compiler  to  issue  a  warning  when  a  class
              appears  to be polymorphic, yet it declares a non-virtual
              one.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not issue a  warning.

              DDeessccrriippttiioonn::

              Tells  the  compiler  to  issue  a  warning  when a class
              appears to be polymorphic, yet it declares a  non-virtual
              one. This option is supported in C++ only.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWpp,,ooppttiioonn11[[,,ooppttiioonn22,,......]]

              Passes options to the preprocessor.

              AArrgguummeennttss::

              _o_p_t_i_o_n            Is  a  preprocessor option. This option
                                is not processed by the driver  and  is
                                directly passed to the preprocessor.

              DDeeffaauulltt::

              OFF               No options are passed to the preproces-
                                sor.

              DDeessccrriippttiioonn::

              This option passes one or more options to the  preproces-
              sor.  If  the  preprocessor is not invoked, these options
              are ignored.

              This option is  equivalent  to  specifying  option  -Qop-
              tion,_c_p_p_, _o_p_t_i_o_n_s.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWpp6644

              Tells  the  compiler  to  display  diagnostics for 64-bit
              porting.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The  compiler does not display diagnos-
                                tics for 64-bit porting.

              DDeessccrriippttiioonn::

              This option tells the compiler to display diagnostics for
              64-bit porting.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWppcchh--mmeessssaaggeess

       --WWnnoo--ppcchh--mmeessssaaggeess

              Determines  whether the compiler shows precompiled header
              (PCH) informational messages.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              Wpch-messages     The  compiler  shows precompiled header
                                (PCH) informational messages.

              DDeessccrriippttiioonn::

              This option determines whether the compiler shows precom-
              piled  header  (PCH)  informational messages. By default,
              these messages are displayed.

              To suppress the display of  the  PCH  informational  mes-
              sages, specify -Wno-pch-messages (Linux* OS and OS X*) or
              /Wpch-messages- (Windows* OS).

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWppooiinntteerr--aarriitthh

       --WWnnoo--ppooiinntteerr--aarriitthh

              Determines whether warnings are issued  for  questionable
              pointer arithmetic.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-pointer-arith
                                No warnings are issued for questionable
                                pointer arithmetic.

              DDeessccrriippttiioonn::

              Determines  whether  warnings are issued for questionable
              pointer arithmetic.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWrreemmaarrkkss

              Tells the compiler to display remarks and comments.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Default warning messages are enabled.

              DDeessccrriippttiioonn::

              This option tells the compiler  to  display  remarks  and
              comments.

              If  you  want to display warnings and errors, specify the
              -Wall, -w_n, or /W_n option.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWrreeoorrddeerr

              Tells the compiler to issue a warning when the  order  of
              member  initializers  does  not  match the order in which
              they must be executed.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               The compiler does not issue a  warning.

              DDeessccrriippttiioonn::

              This  option  tells  the compiler to issue a warning when
              the order of member initializers does not match the order
              in  which they must be executed. This option is supported
              for C++ only.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWrreettuurrnn--ttyyppee

       --WWnnoo--rreettuurrnn--ttyyppee

              Determines whether warnings are issued when a function is
              declared  without a return type, when the definition of a
              function returning void contains a return statement  with
              an  expression,  or  when the closing brace of a function
              returning non-void is reached.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              ON for one condition
                                A warning is issued  when  the  closing
                                brace  of a function returning non-void
                                is reached.

              DDeessccrriippttiioonn::

              This option determines whether warnings  are  issued  for
              the following:

              · When a function is declared without a return type

              · When  the  definition of a function returning void con-
                tains a return statement with an expression

              · When the closing brace of a function returning non-void
                is reached

              Specify  -Wno-return-type if you do not want to see warn-
              ings about the above diagnostics.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWsshhaaddooww

       --WWnnoo--sshhaaddooww

              Determines whether a warning is issued  when  a  variable
              declaration hides a previous declaration.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-shadow       No warning is issued  when  a  variable
                                declaration  hides  a previous declara-
                                tion.

              DDeessccrriippttiioonn::

              This option determines whether a warning is issued when a
              variable  declaration  hides a previous declaration. Same
              as -ww1599.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWssiiggnn--ccoommppaarree

       --WWnnoo--ssiiggnn--ccoommppaarree

              Determines whether warnings are issued when a  comparison
              between  signed  and  unsigned  values  could  produce an
              incorrect result when the signed value  is  converted  to
              unsigned.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-sign-compare The compiler does not issue these warn-
                                ings

              DDeessccrriippttiioonn::

              This option determines whether warnings are issued when a
              comparison between signed and unsigned values could  pro-
              duce  an  incorrect  result when the signed value is con-
              verted to unsigned.

              On Linux* systems, this option is provided  for  compati-
              bility with gcc.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWssttrriicctt--aalliiaassiinngg

       --WWnnoo--ssttrriicctt--aalliiaassiinngg

              Determines  whether  warnings  are  issued  for code that
              might violate the optimizer's strict aliasing rules.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-strict-aliasing
                                No  warnings  are  issued for code that
                                might violate  the  optimizer's  strict
                                aliasing rules.

              DDeessccrriippttiioonn::

              This  option  determines  whether warnings are issued for
              code that might violate the optimizer's  strict  aliasing
              rules.  These  warnings  will  only be issued if you also
              specify option –ansi-alias or option –fstrict-aliasing.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWssttrriicctt--pprroottoottyyppeess

       --WWnnoo--ssttrriicctt--pprroottoottyyppeess

              Determines  whether  warnings  are  issued  for functions
              declared or defined without specified argument types.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-strict-prototypes
                                No  warnings  are  issued for functions
                                declared or defined  without  specified
                                argument types.

              DDeessccrriippttiioonn::

              This  option  determines  whether warnings are issued for
              functions declared or defined without specified  argument
              types.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWttrriiggrraapphhss

       --WWnnoo--ttrriiggrraapphhss

              Determines  whether  warnings are issued if any trigraphs
              are encountered that might change the meaning of the pro-
              gram.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-trigraphs    No warnings are issued if any trigraphs
                                are encountered that might  change  the
                                meaning of the program.

              DDeessccrriippttiioonn::

              This option determines whether warnings are issued if any
              trigraphs are encountered that might change  the  meaning
              of the program.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWuunniinniittiiaalliizzeedd

       --WWnnoo--uunniinniittiiaalliizzeedd

              Determines  whether  a warning is issued if a variable is
              used before being initialized.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-uninitialized
                                No  warning  is issued if a variable is
                                used before being initialized.

              DDeessccrriippttiioonn::

              This option determines whether a warning is issued  if  a
              variable  is used before being initialized. Equivalent to
              -ww592 and -wd592.

              AAlltteerrnnaattee OOppttiioonnss::

              -ww592 and -wd592

       --WWuunnkknnoowwnn--pprraaggmmaass

       --WWnnoo--uunnkknnoowwnn--pprraaggmmaass

              Determines whether a warning  is  issued  if  an  unknown
              #pragma directive is used.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wunknown-pragmas A  warning  is  issued  if  an  unknown
                                #pragma directive is used.

              DDeessccrriippttiioonn::

              This  option determines whether a warning is issued if an
              unknown #pragma directive is used.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWuunnuusseedd--ffuunnccttiioonn

       --WWnnoo--uunnuusseedd--ffuunnccttiioonn

              Determines whether a warning  is  issued  if  a  declared
              function is not used.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-unused-function
                                No warning  is  issued  if  a  declared
                                function is not used.

              DDeessccrriippttiioonn::

              This  option  determines whether a warning is issued if a
              declared function is not used.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWuunnuusseedd--vvaarriiaabbllee

       --WWnnoo--uunnuusseedd--vvaarriiaabbllee

              Determines whether a warning is  issued  if  a  local  or
              non-constant   static  variable  is  unused  after  being
              declared.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              -Wno-unused-variable
                                No warning is  issued  if  a  local  or
                                non-constant  static variable is unused
                                after being declared.

              DDeessccrriippttiioonn::

              This option determines whether a warning is issued  if  a
              local  or  non-constant  static  variable is unused after
              being declared.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --WWwwrriittee--ssttrriinnggss

              Issues a diagnostic message if const char * is  converted
              to (non-const) char *.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               No  diagnostic  message  is  issued  if
                                const    char   *   is   converted   to
                                (non-const) char*.

              DDeessccrriippttiioonn::

              This option issues a diagnostic message if const char* is
              converted to (non-const) char *.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --xx ttyyppee

              All source files found subsequent to -x type will be rec-
              ognized as a particular type.

              AArrgguummeennttss::

              _t_y_p_e              is  the  type  of source file. Possible
                                values are:

                                c++            C++ source file

                                c++-header     C++ header file

                                c++-cpp-output C++ pre-processed file

                                c              C source file

                                c-header       C header file

                                cpp-output     C pre-processed file

                                assembler      Assembly file

                                assembler-with-cpp
                                               Assembly file that needs
                                               to be preprocessed

                                none           Disable recognition, and
                                               revert to file extension

              DDeeffaauulltt::

              none              Disable  recognition and revert to file
                                extension.

              DDeessccrriippttiioonn::

              All source files found subsequent to -x_t_y_p_e will be  rec-
              ognized as a particular type.

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --xxccooddee

              Tells  the  compiler which processor features it may tar-
              get, including which instruction sets  and  optimizations
              it may generate.

              AArrcchhiitteeccttuurree  RReessttrriiccttiioonnss::  Not available on Intel(R) 64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32  architecture  targeting Intel(R) Graphics Technol-
              ogy, or on Intel(R) 64  architecture  targeting  Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              _c_o_d_e              Indicates to the compiler a feature set
                                that it  may  target,  including  which
                                instruction  sets  and optimizations it
                                may generate.  Many  of  the  following
                                descriptions  refer to Intel(R) Stream-
                                ing SIMD Extensions (Intel(R) SSE)  and
                                Supplemental  Streaming SIMD Extensions
                                (Intel(R) SSSE). Possible values are:

                                MIC-AVX512     May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions   512    (Intel(R)
                                               AVX-512)      Foundation
                                               instructions,   Intel(R)
                                               AVX-512  Conflict Detec-
                                               tion       instructions,
                                               Intel(R)  AVX-512  Expo-
                                               nential  and  Reciprocal
                                               instructions,   Intel(R)
                                               AVX-512         Prefetch
                                               instructions         for
                                               Intel(R) processors, and
                                               the instructions enabled
                                               with  CORE-AVX2.   Opti-
                                               mizes  for Intel(R) pro-
                                               cessors   that   support
                                               Intel(R)         AVX-512
                                               instructions.

                                CORE-AVX2      May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions 2 (Intel(R) AVX2),
                                               Intel(R)   AVX,  SSE4.2,
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3  instructions
                                               for Intel(R) processors.
                                               Optimizes  for  Intel(R)
                                               processors that  support
                                               Intel(R)  AVX2  instruc-
                                               tions.

                                CORE-AVX-I     May  generate   Float-16
                                               conversion  instructions
                                               and the  RDRND  instruc-
                                               tion,  Intel(R) Advanced
                                               Vector        Extensions
                                               (Intel(R) AVX), Intel(R)
                                               SSE4.2,  SSE4.1,   SSE3,
                                               SSE2,   SSE,  and  SSSE3
                                               instructions         for
                                               Intel(R)     processors.
                                               Optimizes  for  Intel(R)
                                               processors  that support
                                               Float-16      conversion
                                               instructions   and   the
                                               RDRND instruction.

                                AVX            May  generate   Intel(R)
                                               Advanced  Vector  Exten-
                                               sions  (Intel(R)   AVX),
                                               Intel(R) SSE4.2, SSE4.1,
                                               SSE3,  SSE2,  SSE,   and
                                               SSSE3  instructions  for
                                               Intel(R)     processors.
                                               Optimizes for Intel pro-
                                               cessors   that   support
                                               Intel(R)   AVX  instruc-
                                               tions.

                                SSE4.2         May  generate   Intel(R)
                                               SSE4  Efficient Acceler-
                                               ated  String  and   Text
                                               Processing instructions,
                                               Intel(R) SSE4  Vectoriz-
                                               ing  Compiler  and Media
                                               Accelerator,         and
                                               Intel(R)   SSE3,   SSE2,
                                               SSE, and SSSE3  instruc-
                                               tions  for Intel(R) pro-
                                               cessors.  Optimizes  for
                                               Intel   processors  that
                                               support Intel(R)  SSE4.2
                                               instructions.

                                SSE4.1         May   generate  Intel(R)
                                               SSE4  Vectorizing   Com-
                                               piler and Media Acceler-
                                               ator  instructions   for
                                               Intel(R) processors. May
                                               generate        Intel(R)
                                               SSE4.1, SSE3, SSE2, SSE,
                                               and  SSSE3  instructions
                                               for   Intel   processors
                                               that  support   Intel(R)
                                               SSE4.1 instructions.

                                ATOM_SSE4.2    May    generate    MOVBE
                                               instructions         for
                                               Intel(R)     processors,
                                               depending on the setting
                                               of  option -minstruction
                                               (Linux* OS and OS X*) or
                                               /Qinstruction  (Windows*
                                               OS). May  also  generate
                                               Intel(R)  SSE4.2,  SSE3,
                                               SSE2, and  SSE  instruc-
                                               tions  for Intel proces-
                                               sors.   Optimizes    for
                                               Intel(R)  Atom(TM)  pro-
                                               cessors   that   support
                                               Intel(R)    SSE4.2   and
                                               MOVBE instructions.

                                ATOM_SSSE3     May    generate    MOVBE
                                               instructions         for
                                               Intel(R)     processors,
                                               depending on the setting
                                               of option  -minstruction
                                               (Linux* OS and OS X*) or
                                               /Qinstruction  (Windows*
                                               OS).  May  also generate
                                               SSSE3,  Intel(R)   SSE3,
                                               SSE2,  and  SSE instruc-
                                               tions for Intel  proces-
                                               sors.    Optimizes   for
                                               Intel(R) Atom(TM)   pro-
                                               cessors   that   support
                                               Intel(R) SSE3 and  MOVBE
                                               instructions.

                                SSE3_ATOM and SSSE3_ATOM
                                               These   option  settings
                                               are   deprecated.   They
                                               have  the same effect as
                                               specifying ATOM_SSSE3.

                                SSSE3          May generate  SSSE3  and
                                               Intel(R) SSE3, SSE2, and
                                               SSE   instructions   for
                                               Intel(R)     processors.
                                               Optimizes for Intel pro-
                                               cessors   that   support
                                               SSSE3 instructions.  For
                                               OS   X*   systems,  this
                                               value is only  supported
                                               on Intel(R) 64 architec-
                                               ture.   This    replaces
                                               value T, which is depre-
                                               cated.

                                SSE3           May  generate   Intel(R)
                                               SSE3,   SSE2,   and  SSE
                                               instructions         for
                                               Intel(R)     processors.
                                               Optimizes for Intel pro-
                                               cessors   that   support
                                               Intel(R)  SSE3  instruc-
                                               tions.   For  OS X* sys-
                                               tems, this value is only
                                               supported    on    IA-32
                                               architecture.

                                SSE2           May  generate   Intel(R)
                                               SSE2  and  SSE  instruc-
                                               tions for Intel(R)  pro-
                                               cessors.  Optimizes  for
                                               Intel  processors   that
                                               support   Intel(R)  SSE2
                                               instructions.       This
                                               value  is  not available
                                               on OS X*  systems.

                                You can also  specify  Host.  For  more
                                information, see option [Q]xHost.

              DDeeffaauulltt::

              Windows* systems: None Linux* systems: None OS X* systems
              using  IA-32  architecture:  SSE3  OS  X*  systems  using
              Intel(R) 64 architecture: SSSE3
                                On  Windows systems, if neither /Qx nor
                                /arch  is  specified,  the  default  is
                                /arch:SSE2.

                                On  Linux systems, if neither -x nor -m
                                is specified, the default is -msse2.

              DDeessccrriippttiioonn::

              This option tells the compiler which  processor  features
              it may target, including which instruction sets and opti-
              mizations it may generate. It also enables  optimizations
              in addition to Intel feature-specific optimizations.

              The  specialized  code  generated by this option may only
              run on a subset of Intel(R) processors.

              The resulting executables created from these option  _c_o_d_e
              values  can only be run on Intel(R) processors  that sup-
              port the indicated instruction set.

              The binaries produced by these _c_o_d_e values  will  run  on
              Intel(R) processors that support the  specified features.

              Do not use _c_o_d_e values to create binaries that will  exe-
              cute  on a processor that is not compatible with the tar-
              geted processor. The resulting program may fail  with  an
              illegal instruction exception or display other unexpected
              behavior.

              Compiling the function main() with any of the _c_o_d_e values
              produces  binaries that display a fatal run-time error if
              they are executed on  unsupported  processors,  including
              all non-Intel processors.

              Compiler  options m and arch produce binaries that should
              run on processors not made by Intel  that  implement  the
              same  capabilities  as the corresponding Intel(R) proces-
              sors.

              The -x and /Qx options  enable  additional  optimizations
              not  enabled  with  options -m or /arch (nor with options
              –ax and /Qax).

              On Windows* systems, options /Qx and /arch  are  mutually
              exclusive.   If both are specified, the compiler uses the
              last one specified and generates a warning. Similarly, on
              Linux*  and OS X* systems, options -x and -m are mutually
              exclusive. If both are specified, the compiler  uses  the
              last one specified and generates a warning.

              NNOOTTEE:: All settings except SSE2 do a CPU check.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's  compilers  may  or  may not optimize to the same
              degree for non-Intel  microprocessors  for  optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations include SSE2, SSE3, and SSSE3 instruction  sets
              and  other  optimizations.  Intel  does not guarantee the
              availability,  functionality,  or  effectiveness  of  any
              optimization   on  microprocessors  not  manufactured  by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product  are intended for use with Intel microprocessors.
              Certain optimizations not specific to  Intel  microarchi-
              tecture  are  reserved  for Intel microprocessors. Please
              refer to the applicable product User and Reference Guides
              for  more  information regarding the specific instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --XX

              Removes standard directories from the include file search
              path.

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              OFF               Standard directories are in the include
                                file search path.

              DDeessccrriippttiioonn::

              This option removes standard directories from the include
              file search path. It prevents the compiler from searching
              the default path specified  by  the  INCLUDE  environment
              variable.

              On  Linux*  and  OS  X* systems, specifying -X (or -noin-
              clude)  prevents   the   compiler   from   searching   in
              /usr/include for files specified in an INCLUDE statement.

              You can use this option with the I option to prevent  the
              compiler  from  searching  the  default  path for include
              files and direct it to use an alternate path.

              AAlltteerrnnaattee OOppttiioonnss::

              Linux and OS X: -nostdinc

       --xxHHoosstt

              Tells the compiler to generate instructions for the high-
              est instruction set
                     available on the compilation host processor.

              AArrcchhiitteeccttuurree RReessttrriiccttiioonnss:: Not available on  Intel(R)  64
              architecture  targeting  Intel(R)  MIC  Architecture,  on
              IA-32 architecture targeting Intel(R)  Graphics  Technol-
              ogy,  or  on  Intel(R) 64 architecture targeting Intel(R)
              Graphics Technology

              AArrgguummeennttss::

              None

              DDeeffaauulltt::

              Windows* systems: None Linux* systems: None OS X* systems
              using  IA-32  architecture:  -xSSE3  OS  X* systems using
              Intel(R) 64 architecture: -xSSSE3
                                On Windows systems, if neither /Qx  nor
                                /arch  is  specified,  the  default  is
                                /arch:SSE2.

                                On Linux systems, if neither -x nor  -m
                                is specified, the default is -msse2.

              DDeessccrriippttiioonn::

              This  option  tells the compiler to generate instructions
              for the highest instruction set available on the compila-
              tion host processor.

              The instructions generated by this compiler option differ
              depending on the compilation host processor.

              The following table describes the effects  of  specifying
              the  [Q]xHost  option  and it tells whether the resulting
              executable will run on processors different from the host
              processor.

              Descriptions in the table refer to Intel(R) Advanced Vec-
              tor Extensions 2 (Intel(R) AVX2), Intel(R) Advanced  Vec-
              tor  Extensions  (Intel(R)  AVX), Intel(R) Streaming SIMD
              Extensions (Intel(R)  SSE),  and  Supplemental  Streaming
              SIMD Extensions (SSSE).

              IInnssttrruuccttiioonn SSeett ooff HHoosstt PPrroocceessssoorr
                                EEffffeeccttss WWhheenn tthhee --xxHHoosstt oorr //QQxxHHoosstt CCoomm--
                                ppiilleerr OOppttiioonn iiss SSppeecciiffiieedd

              Intel(R) AVX2     When compiling on Intel(R) processors:

              Corresponds to option [Q]xCORE-AVX2. The  generated  exe-
              cutable  will not run on non-Intel processors and it will
              not run  on  Intel(R)  processors  that  do  not  support
              Intel(R) AVX2 instructions.

              When compiling on non-Intel processors:

              Corresponds to option -march=core-avx2 (Linux OS  and  OS
              X) or /arch:CORE-AVX2 (Windows OS). The
                                generated  executable   will   run   on
                                Intel(R)  processors and non-Intel pro-
                                cessors that support at least  Intel(R)
                                AVX2  instructions..   You  may  see  a
                                run-time error if the run-time  proces-
                                sor  does  not  support  Intel(R)  AVX2
                                instructions.

              Intel(R) AVX      When compiling on Intel(R) processors:

              Corresponds to option [Q]xAVX. The  generated  executable
              will  not run on non-Intel processors and it will not run
              on Intel(R) processors that do not support  Intel(R)  AVX
              instructions.

              When compiling on non-Intel processors:

              Corresponds to option  -mavx  (Linux  OS  and  OS  X)  or
              /arch:AVX (Windows OS). The
                                generated  executable   will   run   on
                                Intel(R)  processors and non-Intel pro-
                                cessors that support at least  Intel(R)
                                AVX   instructions.    You  may  see  a
                                run-time error if the run-time  proces-
                                sor   does  not  support  Intel(R)  AVX
                                instructions.

              Intel(R) SSE4.2   When compiling on Intel(R) processors:

              Corresponds to  option  [Q]xSSE4.2.  The  generated  exe-
              cutable will not run on non-Intel processors and
                                it will not run on Intel(R)  processors
                                that  do  not  support  Intel(R) SSE4.2
                                instructions.

              When compiling on non-Intel processors:

              Corresponds to option -msse4.2 (Linux OS  and  OS  X)  or
              /arch:SSE4.2
                                (Windows OS). The generated  executable
                                will  run  on  Intel(R)  processors and
                                non-Intel processors  that  support  at
                                least Intel(R) SSE4.2 instructions. You
                                may  see  a  run-time  error   if   the
                                run-time  processor  does  not  support
                                Intel(R) SSE4.2 instructions.

              Intel(R) SSE4.1   When compiling on Intel(R) processors:

              Corresponds to  option  [Q]xSSE4.1.  The  generated  exe-
              cutable will not run on non-Intel processors and
                                it will not run on Intel(R)  processors
                                that  do  not  support  Intel(R) SSE4.1
                                instructions.

              When compiling on non-Intel processors:

              Corresponds to option -msse4.1 (Linux OS  and  OS  X)  or
              /arch:SSE4.1
                                (Windows OS). The generated  executable
                                will  run  on  Intel(R)  processors and
                                non-Intel processors  that  support  at
                                least Intel(R) SSE4.1 instructions. You
                                may  see  a  run-time  error   if   the
                                run-time  processor  does  not  support
                                Intel(R) SSE4.1 instructions.

              SSSE3             When compiling on Intel(R) processors:

              Corresponds to option [Q]xSSSE3. The generated executable
              will not run on non-Intel processors and
                                it will not run on Intel(R)  processors
                                that do not support SSSE3 instructions.

              When compiling on non-Intel processors:

              Corresponds to option -mssse3 (Linux  OS  and  OS  X)  or
              /arch:SSSE3
                                (Windows OS). The generated  executable
                                will  run  on  Intel(R)  processors and
                                non-Intel processors  that  support  at
                                least SSSE3 instructions. You may see a
                                run-time error if the run-time  proces-
                                sor  does  not  support  SSSE3 instruc-
                                tions.

              Intel(R) SSE3     When compiling on Intel(R) processors:

              Corresponds to option [Q]xSSE3. The generated  executable
              will not run on non-Intel processors and
                                it will not run on Intel(R)  processors
                                that   do  not  support  Intel(R)  SSE3
                                instructions.

              When compiling on non-Intel processors:

              Corresponds to option -msse3  (Linux  OS  and  OS  X)  or
              /arch:SSE3
                                (Windows OS). The generated  executable
                                will  run  on  Intel(R)  processors and
                                non-Intel processors  that  support  at
                                least  Intel(R)  SSE3 instructions. You
                                may see a warning run-time error if the
                                run-time  processor  does  not  support
                                Intel(R) SSE3 instructions.

              Intel(R) SSE2     When compiling on  Intel(R)  processors
                                or non-Intel processors:

              Corresponds  to  option  -msse2  (Linux* OS and OS X*) or
              /arch:SSE2
                                (Windows* OS). The generated executable
                                will run  on  Intel(R)  processors  and
                                non-Intel  processors  that  support at
                                least Intel(R) SSE2  instructions.  You
                                may   see   a  run-time  error  if  the
                                run-time  processor  does  not  support
                                Intel(R) SSE2 instructions.

              For  more  information on other settings for option [Q]x,
              see that option description.


              OOppttiimmiizzaattiioonn NNoottiiccee


              = = = = = = = = = =

              Intel's compilers may or may not  optimize  to  the  same
              degree  for  non-Intel  microprocessors for optimizations
              that are not unique to Intel microprocessors. These opti-
              mizations  include SSE2, SSE3, and SSSE3 instruction sets
              and other optimizations. Intel  does  not  guarantee  the
              availability,  functionality,  or  effectiveness  of  any
              optimization  on  microprocessors  not  manufactured   by
              Intel.  Microprocessor-dependent  optimizations  in  this
              product are intended for use with Intel  microprocessors.
              Certain  optimizations  not specific to Intel microarchi-
              tecture are reserved for  Intel  microprocessors.  Please
              refer to the applicable product User and Reference Guides
              for more information regarding the  specific  instruction
              sets covered by this notice.

              Notice revision #20110804

              = = = = = = = = = =

              AAlltteerrnnaattee OOppttiioonnss::

              None

       --XXlliinnkkeerr ooppttiioonn

              Passes a linker option directly to the linker.

              AArrgguummeennttss::

              _o_p_t_i_o_n            Is a linker option.

              DDeeffaauulltt::

              OFF               No options are passed directly  to  the
                                linker.

              DDeessccrriippttiioonn::

              This  option  passes  a  linker  option  directly  to the
              linker.  If -Xlinker -shared is specified,  only  -shared
              is  passed  to  the linker and no special work is done to
              ensure proper linkage for  generating  a  shared  object.
              -Xlinker  just  takes whatever arguments are supplied and
              passes them directly to the linker.

              If you want to pass compound options to the  linker,  for
              example  "-L  $HOME/lib",  you  must  use  the  following
              method:

              -Xlinker -L -Xlinker $HOME/lib


              AAlltteerrnnaattee OOppttiioonnss::

              None

       --ZZpp[[nn]]

              Specifies alignment for structures on byte boundaries.

              AArrgguummeennttss::

              _n                 Is the  byte  size  boundary.  Possible
                                values are 1, 2, 4, 8, or 16.

              DDeeffaauulltt::

              Zp16              Structures  are  aligned on either size
                                boundary 16 or the boundary  that  will
                                naturally align them.

              DDeessccrriippttiioonn::

              This  option  specifies  alignment for structures on byte
              boundaries.

              If you do not specify _n, you get Zp16.

              AAlltteerrnnaattee OOppttiioonnss::

              None

PPRREEDDEEFFIINNEEDD MMAACCRROOSS
       The Intel(R) C++ Compiler documentation describes the predefined
       macros  in  detail. This section provides a brief summary of the
       supported macros.

       The ANSI/ISO standard for C language requires that certain  pre-
       defined  macros  be supplied with conforming compilers. The GNU*
       gcc predefined macros are all set depending on what  version  of
       gcc  is  found  on the user's system. (This is overridden if the
       -gcc-version compiler option is passed on the command line.)

       You can specify the -no-gcc option if  you  do  not  want  these
       macros  defined.  If you need gcc interoperability (-cxxlib), do
       not use the -no-gcc compiler option.

       You can use the -U option to suppress an automatic definition of
       a  predefined macro. This option suppresses any macro definition
       currently in effect for the specified name. This option performs
       the same function as an #undef preprocessor directive.

       The following table lists the predefined macros on systems based
       on either the IA-32 or Intel(R) 64 architecture.


       MMaaccrroo              DDeessccrriippttiioonn

       __APPLE__ (OS X*) 1

       __APPLE_CC__ (OS X*)
                         gcc* build number

       __ARRAY_OPERATORS (Linux*)
                         1

       __AVX__ (Windows*, Linux*)
                         Defined and value to '1' with  arch:AVX  (Win-
                         dows*)  or  march=corei7-avx or mavx (Linux*),
                         or  [Q]xAVX  or  higher  processor   targeting
                         options.


              NNOOTTEE::
              Available  only on systems based on Intel(R) 64 architec-
              ture.

       __AVX2__ (Windows*, Linux*)
                         Defined and value to '1'  with  arch:CORE-AVX2
                         (Windows*)  or  march=core-avx2  (Linux*),  or
                         [Q]xCORE-AVX2 or  higher  processor  targeting
                         options.


              NNOOTTEE::
              Available  only on systems based on Intel(R) 64 architec-
              ture.

       __BASE_FILE__ (Linux*)
                         Name of source file

       __cilk (Windows*, Linux*)
                         200; however, if you specify [Q]cilk-serialize
                         or  the  negative form of [Q]intel-extensions,
                         the value is undefined.

       __cplusplus (Linux*)
                         1 (with C++ compiler)

       __DEPRECATED (Linux*)
                         1

       __DYNAMIC__ (OS X*)
                         1

       __EDG__ (Windows*, Linux*, OS X*)
                         1

       __EDG_VERSION__ (Windows*, Linux*, OS X*)
                         EDG version

       __ELF__ (Linux*)  1

       __EXCEPTIONS (Linux*)
                         Defined as '1' when option  fno-exceptions  is
                         not used.

       __extension__ (Linux*)


       __gnu_linux__ (Linux*)
                         1

       __GFX__ (Windows*, Linux*)
                         You  can  use  this macro to protect code that
                         should only be compiled for  and  executed  on
                         the target.

       Defined  by  default.  Builds  code that runs on the CPU and the
       target, but this macro is only defined during the target  compi-
       lation. Undefined when you use the negative form of the
                         [Q]offload option.

       __GNUC__ (Linux*) The  major version number of gcc* installed on
                         the system.

       __GNUC_MINOR__ (Linux*)
                         The minor  version  number  of  gcc*  or  g++*
                         installed on the system.

       __GNUC_PATCHLEVEL__ (Linux*)
                         The patch level version number of gcc* or g++*
                         installed on the system.

       __GNUG__ (Linux*) The major version number of g++* installed  on
                         the system.

       __GXX_ABI_VERSION (Linux*)
                         102 (Linux*)

       __HONOR_STD (Linux*, OS X*)
                         1

       __i386 (Linux*, OS X*)

       __i386__ (Linux*, OS X*)

       i386 (Linux*, OS X*)
                         1


              NNOOTTEE::
              Available only on systems based on IA-32 architecture.

       >__INTEL_COMPILER (Linux*, OS X*)

       __ICC (Linux*, OS X*)
                         Intel(R) C++ Compiler version


              NNOOTTEE::
              This  macro  may  be  affected  by  command line compiler
              options, such as /Qicl- or -no-icc

       __INTEL_CLANG_COMPILER (OS X*)
                         Guards code to be  compiled  exclusively  with
                         clang-compatibleIntel(R) C++ Compiler.

       __INTEL_COMPILER_BUILD_DATE (Windows*, Linux*, OS X*)
                         YYYYMMDD

       __INTEL_CXX11_MODE__ (Windows*, Linux*)
                         Enables  C++11  experimental  support  for C++
                         programs.

       Defined as '1' when
                         [Q]std=c++11 is specified.

       __INTEL_COMPILER_UPDATE
                         Returns the current minor update number of the
                         Intel(R)  C++  Compiler,  starting at 0. (Win-
                         dows*, Linux*, OS X*)

       You can use this  macro  to   differentiate   between   compiler
                         updates  when you have multiple updates of the
                         Intel(R) C++ Compiler installed  concurrently.

        EExxaammppllee::         Intel(R)  C++  Compiler  version  _X_X_._0_._2,  the
                         macro would preprocess to “2”.

       __INTEL_OFFLOAD   This macro is defined  by  the  compiler  when
                         building  code  to  run  on the CPU and on the
                         coprocessor. (Windows*, Linux*)

       You can use this  macro in conjunction with the negative form of
                         the  [Q]offload  compiler  option, or the Qmic
                         (Windows*) or mmic (Linux*) compiler option to
                         protect  code  on the host that should only be
                         executed for an offload build, such  as  calls
                         to  the  omp_set_num_threads_target  family of
                         APIs in offload.h.

       Defined by default. Builds code that runs on  the  CPU  and  the
       coprocessor. Undefined when you use the negative form of the
                         [Q]offload compiler option, or the Qmic  (Win-
                         dows*) or mmic (Linux*) compiler option.

       __INTEL_RTTI__ (Linux*, OS X*)
                         Defined  as  '1'  when  option fno-rtti is not
                         specified.

       __INTEL_STRICT_ANSI__ (Linux*, OS X*)
                         Defined as  '1'  when  option  strict-ansi  is
                         specified.

       __KNC__           This  macro  is  similar to __MIC__, but it is
                         defined by the compiler while building code to
                         run  on the variant of the Intel(R) MIC Archi-
                         tecture known as  the  Intel(R)  Xeon  Phi(TM)
                         coprocessor. (Windows*, Linux*)

       __linux (Linux*)

       __linux__ (Linux*)

       linux (Linux*)    1

       __LITTLE_ENDIAN__ (OS X*)
                         1

       __LONG_DOUBLE_SIZE__ (Windows*, Linux*, OS X*)
                         80 (Linux*, OS X*)

       64, 80 with option
                         [Q]long-double (Windows*)

       __LONG_DOUBLE_64__ (Linux*)
                         When  this  macro  is defined, the long double
                         type is 64-bits.

       Defined when you use option
                         mlong-double with 64 as an argument.

       __LONG_MAX__ (Linux*)
                         9223372036854775807L


              NNOOTTEE::
              Available only on systems based on Intel(R) 64  architec-
              ture.

       __LP64__ (Linux*) 1


              NNOOTTEE::
              Available  only on systems based on Intel(R) 64 architec-
              ture.

       __MACH__ (OS X*)  1

       __MIC__           This macro is defined by  the  compiler  while
                         building code to run on the coprocessor. (Win-
                         dows*, Linux*)

       You can use this  macro to protect code that should only be com-
                         piled  for  and  executed  on the coprocessor,
                         such as intrinsic functions that only  run  on
                         Intel(R)  MIC Architecture, or the correspond-
                         ing header files, such as zmmintrin.h.

       Defined by default. Builds code that runs on  the  CPU  and  the
       coprocessor, but this
                         macro is only defined during  the  coprocessor
                         compilation.  Undefined when you use the nega-
                         tive form of the [Q]offload option.

       To build code that runs only on the coprocessor, use the
                         Qmic  (Windows*)  or  mmic  (Linux*)  compiler
                         option.

       This              macro  is defined when you use Qmic (Windows*)
                         or mmic (Linux*).

       __MMX__ (Linux*, OS X*)
                         1


              NNOOTTEE::
              On Linux*, available only on systems based on Intel(R) 64
              architecture.

       __NO_INLINE__ (Linux*, OS X*)

       __NO_MATH_INLINES (Linux*, OS X*)

       __NO_STRING_INLINES (Linux*, OS X*)
                         1

       OFFLOAD_STATUS_INIT(_s_t_a_t_u_s_v_a_r_n_a_m_e )
                         Initializes the variable for the status clause
                         in an offload pragma to a known  value  before
                         offloading code. (Windows*, Linux*)

       After the offload, you can examine
                         _s_t_a_t_u_s_v_a_r_n_a_m_e  to check if the pragma was exe-
                         cuted at all, whether the offload succeeded or
                         failed, and, if relevant, why it failed.

       See               offload.

       __OPTIMIZE__ (Linux*, OS X*)
                         1

       __pentium4 (Linux*, OS X*)

       __pentium4__ (Linux*, OS X*)
                         1

       __PIC__ (Linux*, OS X*)

       __pic__ (Linux*)  1 (OS X*)

       Defined as '1' when option
                         fPIC is specified. (Linux*)

       __PTRDIFF_TYPE__ (Linux*, OS X*)
                         int on IA-32 architecture; long on Intel(R) 64
                         architecture (Linux*)

       int / long (OS X*)

       __QMSPP_ (Windows*, OS X*)
                         1

       __REGISTER_PREFIX__ (Linux*, OS X*)


       __SIGNED_CHARS__ (Windows*, Linux*, OS X*)
                         1

       __SIZE_TYPE__ (Linux*, OS X*)
                         unsigned on IA-32 architecture; unsigned  long
                         on Intel(R) 64 architecture (Linux*)

       unsigned long (OS X*)

       __SSE__ (Windows*, Linux*, OS X*)
                         Defined as '1' for processors that support SSE
                         instructions. (Linux* and OS X*)

       Defined and value to '1', only undefined when  /arch:IA32  (Win-
       dows*)

       __SSE2__ (Windows*, Linux*, OS X*)
                         Defined as '1'  for  processors  that  support
                         Intel(R) SSE2 instructions. (Linux* and OS X*)

       Defined and value to '1' by default or with
                         arch:SSE2, QxSSE2, QaxSSE2 or higher processor
                         targeting options (Windows*)

       __SSE3__ (Windows*, Linux*, OS X*)
                         Defined  as  '1'  for  processors that support
                         Intel(R) SSE3 instructions. (Linux* and OS X*)

       Defined and value to '1' with
                         arch:SSE3,  QxSSE3 or higher processor target-
                         ing options. (Windows*)

       __SSE4_1__ (Windows*, Linux*)
                         Defined as '1'  for  processors  that  support
                         Intel(R) SSE4 instructions. (Linux*)

       Defined  and value to '1' with /arch:SSE4.1, /QxSSE4.1 or higher
       processor targeting options (Windows*)

       __SSE4_2__ (Windows*, Linux*)
                         Defined  as  '1'  for  processors that support
                         SSSE4 instructions. (Linux*)

       Defined and value to '1' with
                         arch:SSE4.2, QxSSE4.2 or higher processor tar-
                         geting options (Windows*)

       __SSSE3__ (Windows*, Linux*, OS X*)
                         Defined  as  '1'  for  processors that support
                         SSSE3 instructions. (Linux* and OS X*)

       Defined and value to '1' with
                         arch:SSSE3, QxSSSE3 or higher  processor  tar-
                         geting options (Windows*)

       __STDC__ (OS X*)  1

       __STDC_HOSTED__ (OS X*)
                         1

       __USER_LABEL_PREFIX__ (Linux*, OS X*)


       __VERSION__ (Linux*, OS X*)
                         Intel(R) C++ Compiler version string

       __WCHAR_MAX__ (OS X*)
                         2147483647

       __WCHAR_T (Linux*)
                         1

       __WCHAR_TYPE__ (Linux*, OS X*)
                         long   int   on  IA-32  architecture;  int  on
                         Intel(R) 64 architecture (Linux*)

       long int (OS X*)

       __WINT_TYPE__ (Linux*, OS X*)
                         unsigned int

       __x86_64 (Linux*, OS X*)

       __x86_64__ (Linux*, OS X*)
                         1


              NNOOTTEE::
              Available only on systems based on Intel(R) 64  architec-
              ture.

       _BOOL (Linux*)    1

       _LP64 (Linux*)    1


              NNOOTTEE::
              Available  only on systems based on Intel(R) 64 architec-
              ture.

       _MT (Windows*, Linux*)
                         1 when multithreaded DLL or  library  is  used
                         (MD[d] or MT[d] specified) (Windows*)

       1 (Linux*)


              NNOOTTEE::
              On Linux*, available only on systems based on Intel(R) 64
              architecture.

       _OPENMP (Windows*, Linux*, OS X*)
                         200805 when you specify option [Q]openmp.

       _PGO_INSTRUMENT (Windows*, Linux*)
                         '1' when options [Q]cov-gen or [Q]prof-gen are
                         specified.

       _PLACEMENT_DELETE (Linux*)
                         1

       unix (Linux*)

       __unix (Linux*)

       __unix__ (Linux*) 1

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       You  can customize your environment by setting environment vari-
       ables.

       The Intel(R) C++ Compiler installation  includes  shell  scripts
       that you can use to set environment variables. For more informa-
       tion, see the Intel(R) C++ Compiler Documentation.


       EEnnvviirroonnmmeenntt VVaarriiaabbllee
                          DDeessccrriippttiioonn

       CILK_NWORKERS (Linux*)
                         Specifies the number of worker threads to  use
                         in an Intel(R) Cilk(TM) Plus program.

       See               Set Worker Count.

       DYLD_LIBRARY_PATH (OS X*)
                         Specifies the location for shared objects.

       GCCROOT (Linux*)  Specifies  the  location  of the gcc binaries.
                         Set this variable only when the compiler  can-
                         not  locate  the  gcc  binaries when using the
                         -gcc-name option.

       GXX_INCLUDE (Linux*)
                         Specifies the location of the gcc headers. Set
                         this  variable to specify the locations of the
                         GCC installed files when the compiler does not
                         find the needed values as specified by the use
                         of the -gcc-name=_<_d_i_r_e_c_t_o_r_y_-_n_a_m_e_>/gcc  option.

       GXX_ROOT (Linux*) Specifies  the  location  of the gcc binaries.
                         Set this variable to specify the locations  of
                         the GCC installed files when the compiler does
                         not find the needed values as specified by the
                         use   of   the  -gcc-name=_<_d_i_r_e_c_t_o_r_y_-_n_a_m_e_>/gcc
                         option.

       IA32ROOT (IA-32 architecture and Intel(R) 64 architecture)
                         Points  to  the  directories  containing   the
                         include  and  library files for a non-standard
                         installation structure.

       ICCCFG            Specifies the configuration file for customiz-
                         ing  compilations  when  invoking the compiler
                         using iicccc

       ICPCCFG           Specifies the configuration file for customiz-
                         ing  compilations  when  invoking the compiler
                         using iiccppcc

       ICLCFG (OS X*)    Specifies the configuration file for customiz-
                         ing  compilations  when  invoking the compiler
                         using iiccll

       ICLXXCFG (OS X*)  Specifies the configuration file for customiz-
                         ing  compilations  when  invoking the compiler
                         using iiccll++++

       __INTEL_PRE_CFLAGS

       __INTEL_POST_CFLAGS
                         Specifies to add a set of  Intel(R)  C++  Com-
                         piler command line options onto the end of the
                         compile line.

       This is an extension to the facility  already  provided  in  the
       compiler configuration file
                         icl.cfg. Command line options can be  inserted
                         in   the     “prefix ”  position  using  the
                         __INTEL_PRE_CFLAGS environment variable or  in
                         the     postfix     position     using     the
                         __INTEL_POST_CFLAGS environment variable.  The
                         command line will be built as follows:

        SSyynnttaaxx:: icl      _<_P_R_E  _f_l_a_g_s_>  _<_f_l_a_g_s  _f_r_o_m _c_o_n_f_i_g_u_r_a_t_i_o_n _f_i_l_e_>
                         _<_f_l_a_g_s _f_r_o_m  _t_h_e  _c_o_m_p_i_l_e_r  _i_n_v_o_c_a_t_i_o_n_>  _<_P_O_S_T
                         _f_l_a_g_s_>


              NNOOTTEE::
              The  Driver will warn (via Remark) that we are overriding
              an option because of an environment variable, but only at
              option -w3 (Linux* and OS X*).

       INTEL_CHKP_REPORT_MODE (Linux*)
                         Changes  the pointer checker reporting mode at
                         runtime.

       See Finding and Reporting Out-of-Bounds Errors.

       INTEL_LICENSE_FILE
                         Specifies the location for the  Intel  license
                         file.

       LD_LIBRARY_PATH (Linux*)
                         Specifies the location for shared objects.

       PATH              Specifies  the directories the system searches
                         for binary executable files.

       PROF_DIR          Specifies the directory where profiling  files
                         (files with extensions prof-gen option.

       PROF_DPI          Name for the pgopti.dpi.

       TMP

       TMPDIR

       TEMP              Specifies the location for temporary files. If
                         none of  these  are  specified,  the  compiler
                         stores temporary files in /tmp.

        IInntteell((RR)) MMIICC AArrcchhiitteeccttuurree EEnnvviirroonnmmeenntt VVaarriiaabblleess

       MIC_ENV_PREFIX    Controls  environment  variables passed to the
                         target.

       By default, all environment variables set on the host are passed
       to the target. Setting
                         MIC_ENV_PREFIX passes only  environment  vari-
                         ables  that have a prefix of the value of this
                         variable. For  example,  setting  MIC_ENV_PRE-
                         FIX=ABC passes only environment variables that
                         have a prefix of ABC.


              NNOOTTEE::
              The MIC_LD_LIBRARY_PATH  variable  is  not  stripped  and
              passed  to  the  target,  so  you cannot use MIC_ENV_PRE-
              FIX=ABC to change the LD_LIBRARY_PATH on the target.

       For information on passing environment variables to a particular
       coprocessor,  and  on  passing multiple environment variables to
       one or all coprocessors, see
                         Setting Environment Variables on  the  CPU  to
                         Modify  the  Coprocessor's  Execution Environ-
                         ment.

       MIC_HOST_LOG      Outputs traces from the host to  the  location
                         specified by this environment variable string.

        DDeeffaauulltt::          None

         EExxaammppllee::        MIC_HOST_LOG=/home/user/app/host.log

       MIC_LD_LIBRARY_PATH
                         Specifies  the  location  for  target   shared
                         objects.   LD_LIBRARY_PATH specifies the loca-
                         tion for host objects.

       MIC_LIBRARY_PATH  Specifies  the  location  for  target   static
                         libraries.   LIBRARY_PATH  specifies the loca-
                         tion for host static libraries.

       MIC_PROXY_IO      Enables (1)  or  disables  (0)  the  proxy  of
                         stderr  and  stdout, and specifies whether the
                         process wants I/O proxy  support  between  the
                         host and target.

        DDeeffaauulltt::1

         EExxaammppllee::MIC_PROXY_IO=0

       MIC_SEP_MONITOR   Enables  (1)  or  disables  (0) SEP at offload
                         regions.

        DDeeffaauulltt::0

         EExxaammppllee::MIC_SEP_MONITOR=1

       MIC_STACKSIZE     Specifies the stack size of  the  main  thread
                         for  the offload. This value is typically much
                         larger than  the  stack  size  for  individual
                         threads.  It corresponds to what you would set
                         with uulliimmiitt -s (BASH shell) or lliimmiitt ssttaacckkssiizzee
                         (C  shell)  if  you  were  running natively on
                         either the target or the host.

       Set this variable to
                         _i_n_t_e_g_e_rB|K|M|G|T, where:

                         · _B = bytes

                         · _K = kilobytes

                         · _M = megabytes

                         · _G = gigabytes

                         · _T = terabytes

        DDeeffaauulltt::         12M

         EExxaammppllee::MIC_STACKSIZE=16M

       MIC_USE_2MB_BUFFERS
                         Use 2M pages for (size > MIC_USE_2MB_BUFFERS).
                         Pointer-based  variables  whose runtime length
                         exceeds the value of  this  variable  will  be
                         allocated in large pages.

       Set this variable to
                         _i_n_t_e_g_e_rB|K|M|G|T, where:

                         · _B = bytes

                         · _K = kilobytes

                         · _M = megabytes

                         · _G = gigabytes

                         · _T = terabytes

         EExxaammppllee::MIC_USE_2MB_BUFFERS=64K

       OFFLOAD_DEVICES   Restricts  the offload process to use only the
                         coprocessors specified as  the  value  of  the
                         variable.

       Set  this  variable  to  a comma separated list of target device
       numbers in the range 0 to (_n_u_m_b_e_r___o_f___d_e_v_i_c_e_s___i_n___t_h_e___s_y_s_t_e_m  -1),
       where  0  is  the  first  coprocessor  in  the system, and (_n_u_m_-
       _b_e_r___o_f___d_e_v_i_c_e_s___i_n___t_h_e___s_y_s_t_e_m -1) is the last coprocessor in  the
       system.

       Coprocessors  available  for  offloading are numbered logically.
       The function
                         _Offload_number_of_devices()  returns the num-
                         ber  of  available  coprocessors.  Coprocessor
                         indices  that  you use in the target specifier
                         of the offload pragmas are in the range  0  to
                         _n_u_m_b_e_r___o_f___d_e_v_i_c_e_s___i_n___t_h_e___s_y_s_t_e_m-1.

        DDeeffaauulltt:: The offload process uses all devices.

         EExxaammppllee::OFFLOAD_DEVICES = 1,2

       On a system with more than two coprocessors installed, this set-
       ting enables the application to use only coprocessors 1  and  2.
       Offloads  to coprocessors 0 or 1 are performed on the second and
       third physical coprocessors. Offloads to target  numbers  higher
       than  1 wrap-around so that all offloads remain within coproces-
       sors 0 and 1. The function
                         _Offload_number_of_devices()   executed  on  a
                         coprocessor return 0 or 1, when the offload is
                         running on the first or second coprocessor.

       OFFLOAD_INIT      Specifies  a  hint to the offload runtime when
                         to initialize targets.

       Supported values:

       · on_start: All available coprocessors  are  initialized  before
         entering main.

       · on_offload:  The  target is initialized immediately before the
         first offload to it. Initialization is done only on the target
         that handles the offload.

       · on_offload_all:  All available targets are initialized immedi-
         ately before the first offload in an application.

        DDeeffaauulltt::on_offload_all

         EExxaammppllee::OFFLOAD_INIT=on_start

       OFFLOAD_REPORT    Controls printing offload execution  time,  in
                         seconds,  and  the amount of data transferred,
                         in bytes. This environment variable is equiva-
                         lent to using the __Offload_report API.

       Supported values:

       · 1: Prints the offload computation time, in seconds.

       · 2:  In  addition  to the information produced at value 1, adds
         the amount of data transferred between the CPU and the target,
         in bytes.

       · 3:  In  addition to the information produced at value 2, gives
         additional details on offload activity, including device  ini-
         tialization, and individual variable transfers.

        DDeeffaauulltt:: None

         EExxaammppllee::OFFLOAD_REPORT=1

        OOppeennMMPP** EEnnvviirroonnmmeenntt VVaarriiaabblleess ((OOMMPP__)) aanndd EExxtteennssiioonnss ((KKMMPP__))


       KMP_AFFINITY      Enables  run-time  library  to bind threads to
                         physical processing units.

        DDeeffaauulltt:: scatter, granularity=fine

       = = = = = = = = = =

       NNOOTTEE:: Some environment variables are available for both Intel(R)
       microprocessors  and  non-Intel microprocessors, but may perform
       additional optimizations for Intel(R) microprocessors  than  for
       non-Intel microprocessors.  = = = = = = = = = =

       KMP_ALL_THREADS   Limits  the number of simultaneously executing
                         threads in an OpenMP* program. If  this  limit
                         is reached and another native operating system
                         thread encounters OpenMP* API  calls  or  con-
                         structs,  then  the  program may abort with an
                         error message. If this limit is reached at the
                         time  an  OpenMP*  parallel  region  begins, a
                         one-time  warning  message  may  be  generated
                         indicating  that  the number of threads in the
                         team was reduced, but the  program  will  con-
                         tinue execution.

       This  environment  variable  is  only used for programs compiled
       with
                         [Q]openmp option

        DDeeffaauulltt:: No enforced limit

       KMP_BLOCKTIME     Sets  the time, in milliseconds, that a thread
                         should wait, after completing the execution of
                         a parallel region, before sleeping.

       Use the optional character suffixes:
                         _s  (seconds),  _m  (minutes),  _h  (hours), or _d
                         (days) to specify the units.

        DDeeffaauulltt:: 200 milliseconds

       KMP_CPUINFO_FILE  Specifies an alternate file name for file con-
                         taining machine topology description. The file
                         must be in the same format as /proc/cpuinfo.

       = = = = = = = = = =

       NNOOTTEE:: Some environment variables are available for both Intel(R)
       microprocessors  and  non-Intel microprocessors, but may perform
       additional optimizations for Intel(R) microprocessors  than  for
       non-Intel microprocessors.  = = = = = = = = = =

        DDeeffaauulltt:: None

       KMP_DETERMINISTIC_REDUCTION
                         Enables  (1) or disables (0) the use of a spe-
                         cific ordering of the reduction operations for
                         implementing   the  reduction  clause  for  an
                         OpenMP* parallel region. This has  the  effect
                         that,  for  a  given  number  of threads, in a
                         given parallel region, for a  given  data  set
                         and  reduction  operation,  a  floating  point
                         reduction done for an OpenMP* reduction clause
                         will  have  a consistent floating point result
                         from run to run, since round-off  errors  will
                         be identical.

        DDeeffaauulltt::0

       KMP_INHERIT_FP_CONTROL
                         Enables (1) or disables (0) the copying of the
                         floating point control settings of the  master
                         thread  to the floating point control settings
                         of the OpenMP* worker threads at the start  of
                         each parallel region.

        DDeeffaauulltt::1

       KMP_LIBRARY       Selects the OpenMP* run-time library execution
                         mode. The values for this variable are _s_e_r_i_a_l,
                         _t_u_r_n_a_r_o_u_n_d, or _t_h_r_o_u_g_h_p_u_t .

        DDeeffaauulltt::_t_h_r_o_u_g_h_p_u_t


       KMP_MONITOR_STACKSIZE
                         Sets  the  number of bytes to allocate for the
                         monitor thread, which is used for book-keeping
                         during program execution.

       Use the optional suffixes:
                         b  (bytes),  k  (kilobytes),  m (megabytes), g
                         (gigabytes), or t (terabytes) to  specify  the
                         units.

        DDeeffaauulltt:: max (32k, system minimum thread stack size)

       KMP_SETTINGS      Enables  (1)  or  disables (0) the printing of
                         OpenMP* run-time library environment variables
                         during  program  execution. Two lists of vari-
                         ables are  printed:  user-defined  environment
                         variables  settings  and  effective  values of
                         variables used by OpenMP* run-time library.

        DDeeffaauulltt:: 0

       KMP_STACKSIZE     Sets the number of bytes to allocate for  each
                         OpenMP*  thread  to  use as its private stack.
                         Recommended size is 16m. Use the optional suf-
                         fix _b (bytes), _k (kilobytes), _m (megabytes), _g
                         (gigabytes), or _t (terabytes) to  specify  the
                         allocation.  This variable does not affect the
                         native operating system threads created by the
                         user  program  nor  the  thread  executing the
                         sequential part of an OpenMP* program or  par-
                         allel programs created using [Q]parallel.

        DDeeffaauulltt ((IIAA--3322 aarrcchhiitteeccttuurree)):: 2M

        DDeeffaauulltt IInntteell((RR)) 6644 aarrcchhiitteeccttuurree)):: 4M

        DDeeffaauulltt ((IInntteell((RR)) MMIICC aarrcchhiitteeccttuurree))::_4_M (on supported OSes)

       KMP_VERSION       Enables  (1)  or  disables (0) the printing of
                         OpenMP* run-time library  version  information
                         during program execution.

        DDeeffaauulltt:: disabled.

       KMP_DYNAMIC_MODE  Selects  the method used to determine the num-
                         ber of threads to use for  a  parallel  region
                         when OMP_DYNAMIC=true.

        PPoossssiibbllee vvaalluueess:: (_a_s_a_t
                          | _l_o_a_d___b_a_l_a_n_c_e
                          | _t_h_r_e_a_d___l_i_m_i_t ), where,

       · _a_s_a_t:  estimates  number  of  threads  based on parallel start
         time;

       NNOOTTEE:: Support for “_a_s_a_t ” (automatic self-allocating  threads)
       is now deprecated, and will be removed in a future release.

       · _l_o_a_d___b_a_l_a_n_c_e: tries to avoid using more threads than available
         execution units on the machine;

       · _t_h_r_e_a_d___l_i_m_i_t: tries to avoid using  more  threads  than  total
         execution units on the machine.

        DDeeffaauulltt ((IIAA--3322 aarrcchhiitteeccttuurree))::_l_o_a_d___b_a_l_a_n_c_e
                          (on all supported OSes)

        DDeeffaauulltt  ((IInntteell((RR))  6644  aarrcchhiitteeccttuurree))::_l_o_a_d___b_a_l_a_n_c_e (on all sup-
       ported OSes)

        DDeeffaauulltt ((IInntteell((RR)) MMIICC aarrcchhiitteeccttuurree))::_t_h_r_e_a_d___l_i_m_i_t
                          (on supported OSes)

       OMP_CANCELLATION  The cancel construct activates cancellation of
                         the innermost enclosing  region  of  the  type
                         specified.  If set to true, the effects of the
                         cancel construct and  of  cancellation  points
                         are  enabled and cancellation is activated. If
                         set to false, cancellation is disabled and the
                         cancel  construct  and cancellation points are
                         effectively ignored.


              NNOOTTEE::
              Internal barrier code will work differently depending  on
              if  the  cancellation  is  enabled.  Barrier  code should
              repeatedly check the global flag to  figure  out  if  the
              cancellation had been triggered. If a thread observes the
              cancellation it should leave the barrier prematurely with
              the  return  value  _1 (probably waking up other threads).
              Otherwise, it should leave the barrier usual way with the
              return value _0.

       OMP_CANCELLATION

       Enables (1) or disables (0) the dynamic adjustment of the number
       of threads.

        DDeeffaauulltt::0

        EExxaammppllee ssyynnttaaxx::  set OMP_CANCELLATION=1

       OMP_DYNAMIC       Enables   (1)  or  disables  (0)  the  dynamic
                         adjustment of the number of threads.

        DDeeffaauulltt::         0

        EExxaammppllee ssyynnttaaxx:: export OMP_DYNAMIC=value

       OMP_MAX_ACTIVE_LEVELS
                         Limits the number of simultaneously  executing
                         threads in an OpenMP* program.

       If  this  limit  is  reached and another native operating system
       thread encounters OpenMP* API calls or constructs,  the  program
       can  abort  with an error message. If this limit is reached when
       an OpenMP* parallel region begins, a  one-time  warning  message
       might  be generated indicating that the number of threads in the
       team was reduced, but the program will continue.

       This  environment  variable  is  only used for programs compiled
       with the following options:
                         [Q]openmp or [Q]parallel.

       omp_get_thread_limit() routine returns the value of the limit.

        DDeeffaauulltt:: No enforced limit

        RReellaatteedd eennvviirroonnmmeenntt vvaarriiaabbllee::KMP_ALL_THREADS.
                         OMP_THREAD_LIMIT overrides KMP_ALL_THREADS.

        EExxaammppllee ssyynnttaaxx::export OMP_MAX_ACTIVE_LEVELS=value

       OMP_PLACES        An  explicit  ordered list of places specified
                         as either an abstract name describing a set of
                         places or an explicit list of places described
                         by nonnegative numbers. An exclusion  operator
                         “! ”  can also be used to exclude the number
                         or place immediately following the operator.

       For                eexxpplliicciitt lliissttss, the meaning  of  the  numbers
                         and  how  the  numbering is done for a list of
                         nonnegative   numbers    are    implementation
                         defined.  Generally, the numbers represent the
                         smallest unit of execution exposed by the exe-
                         cution   environment,   typically  a  hardware
                         thread.

       Intervals can be specified using the
                         <lower-bound> : <length> :  <stride>  notation
                         to represent the following list of numbers:

       “<lower-bound>,   <lower-bound>   +   <stride>,   <lower-bound>
       +(<length>-1)*<stride>.”

       When <stride> is omitted, a unit stride  is  assumed.  Intervals
       can  specify  numbers  within  a  place  as well as sequences of
       places.

       #     EXPLICIT     LIST      EXAMPLE      setenv      OMP_PLACES
       "{0,1,2,3},{4,5,6,7},{8,9,10,11},{12,13,14,15}"           setenv
       OMP_PLACES    "{0:4},{4:4},{8:4},{12:4}"    setenv    OMP_PLACES
       "{0:4}:4:4"


       The                 aabbssttrraacctt nnaammeess listed below should be under-
                         stood by the execution  and  runtime  environ-
                         ment:

       · threads: Each place corresponds to a single hardware thread on
         the target machine.

       · cores: Each place corresponds to a single core (having one  or
         more hardware threads) on the target machine.

       · sockets: Each place corresponds to a single socket (consisting
         of one or more cores) on the target machine.

       When requesting fewer places or more resources than available on
       the system, the determination of which resources of type
                         abstract_name are to be included in the  place
                         list  is  implementation  defined. The precise
                         definitions of the abstract names  are  imple-
                         mentation  defined. An implementation may also
                         add abstract names as appropriate for the tar-
                         get   platform.   The  abstract  name  may  be
                         appended by a positive number  in  parentheses
                         to  denote  the length of the place list to be
                         created, that is: abstract_name(_n_u_m_-_p_l_a_c_e_s).

       #  ABSTRACT  NAMES  EXAMPLE  setenv  OMP_PLACES  threads  setenv
       OMP_PLACES threads(4)



              NNOOTTEE::
              OMP_PLACES  environment variable: if any numerical values
              cannot be mapped to a processor on  the  target  platform
              the  behavior  is implementation defined. The behavior is
              also implementation defined when the OMP_PLACES  environ-
              ment variable is defined using an abstract name.

       OMP_NESTED        Enables (1) or disables (0)nested parallelism.

        DDeeffaauulltt::0

        EExxaammppllee ssyynnttaaxx::export OMP_NESTED=value

       OMP_NUM_THREADS   Sets the maximum number of threads to use  for
                         OpenMP*  parallel regions if no other value is
                         specified in the application.

       This environment variable applies to both
                         [Q]openmp and [Q]parallel.

        DDeeffaauulltt:: Number of processors visible to the operating  system.

        EExxaammppllee ssyynnttaaxx::export OMP_NUM_THREADS=value

       OMP_PROC_BIND     Sets the thread affinity policy to be used for
                         parallel  regions  at the corresponding nested
                         level. Acceptable values are _t_r_u_e, _f_a_l_s_e, or a
                         comma separated list, each element of which is
                         one of the following  values:  _m_a_s_t_e_r,  _c_l_o_s_e,
                         _s_p_r_e_a_d.

       If  set  to  false,  the  execution environment may move OpenMP*
       threads between OpenMP* places, thread affinity is disabled, and
                         proc_bind  clauses  on parallel constructs are
                         ignored.

       Otherwise, the execution environment  should  not  move  OpenMP*
       threads  between OpenMP* places, thread affinity is enabled, and
       the initial thread is bound to the first place  in  the  OpenMP*
       place list.

       If set to         _m_a_s_t_e_r, all threads  are  bound  to  the  same
                         place  as  the master thread. If set to _c_l_o_s_e,
                         threads will be bound  to  successive  places,
                         close  to where the master thread is bound. If
                         set to _s_p_r_e_a_d, the master  thread's  partition
                         is  sub-divided  and threads are bound to suc-
                         cessive sub-partitions.

       If enabled, this is the same as specifying
                         KMP_AFFINITY=_s_c_a_t_t_e_r. If disabled, this is the
                         same as specifying KMP_AFFINITY=_n_o_n_e.

       If both           OMP_PROC_BIND  and KMP_AFFINITY are specified,
                         KMP_AFFINITY   settings    take    precedence.
                         GOMP_CPU_AFFINITY  also  takes precedence over
                         OMP_PROC_BIND.

        DDeeffaauulltt::         false


              NNOOTTEE::
              This environment variable is not supported on the  OS  X*
              operating system.

       OMP_SCHEDULE      Sets   the   run-time  schedule  type  and  an
                         optional chunk size.

        DDeeffaauulltt::STATIC, no chunk size specified

        EExxaammppllee ssyynnttaaxx::export OMP_SCHEDULE="kind[,chunk_size]"

       = = = = = = = = = =

       NNOOTTEE:: Some environment variables are available for both Intel(R)
       microprocessors  and  non-Intel microprocessors, but may perform
       additional optimizations for Intel(R) microprocessors  than  for
       non-Intel microprocessors.  = = = = = = = = = =

       OMP_STACKSIZE     Sets  the number of bytes to allocate for each
                         OpenMP* thread to use as the private stack for
                         the thread. Recommended size is 16M.

       Use the optional suffixes:
                         _B  (bytes),  _K  (Kilobytes),  _M (Megabytes), _G
                         (Gigabytes), or _T (Terabytes) to  specify  the
                         units.  If  value is specified without suffix,
                         the size is assumed to be _K (Kilobytes).

       This variable  does  not  affect  the  native  operating  system
       threads created by the user program nor the thread executing the
       sequential part of an OpenMP* program or parallel programs  cre-
       ated using
                         [Q]parallel.

       kmp_{set,get}_stacksize_s() routines set/retrieve the value.
                         kmp_set_stacksize_s() routine must  be  called
                         from  sequential  part,  before first parallel
                         region   is   created.   Otherwise,    calling
                         kmp_set_stacksize_s() has no effect.

        DDeeffaauulltt ((IIAA--3322 aarrcchhiitteeccttuurree)):: 2M

        DDeeffaauulltt ((IInntteell((RR)) MMIICC aarrcchhiitteeccttuurree))::_4_M (on supported OSes)

        DDeeffaauulltt ((IInntteell((RR)) 6644 aarrcchhiitteeccttuurree))::
                          4M

        RReellaatteedd eennvviirroonnmmeenntt vvaarriiaabblleess::KMP_STACKSIZE (overrides
                         OMP_STACKSIZE).

        EExxaammppllee ssyynnttaaxx::export OMP_STACKSIZE=value

       OMP_THREAD_LIMIT  Limits  the number of simultaneously executing
                         threads in an OpenMP* program.

       If this limit is reached and  another  native  operating  system
       thread  encounters  OpenMP* API calls or constructs, the program
       can abort with an error message. If this limit is  reached  when
       an  OpenMP*  parallel  region begins, a one-time warning message
       might be generated indicating that the number of threads in  the
       team was reduced, but the program will continue.

       This environment variable is only  used  for  programs  compiled
       with the following options:
                         [Q]openmp or [Q]parallel.

       omp_get_thread_limit() routine returns the value of the limit.

        DDeeffaauulltt:: No enforced limit

        RReellaatteedd eennvviirroonnmmeenntt vvaarriiaabbllee::KMP_ALL_THREADS (overrides
                         OMP_THREAD_LIMIT).

        EExxaammppllee ssyynnttaaxx::export OMP_THREAD_LIMIT=value

       OMP_WAIT_POLICY   Decides whether threads spin (active) or sleep
                         (passive) while they are waiting.

        DDeeffaauulltt:: Passive

        EExxaammppllee ssyynnttaaxx::export OMP_WAIT_POLICY=value

        GGNNUU** EEnnvviirroonnmmeenntt VVaarriiaabblleess aanndd EExxtteennssiioonnss

       CPATH             Specifies  path to include directory for C/C++
                         compilations.

       C_INCLUDE_PATH    Specifies path to include directory for C com-
                         pilations.

       CPLUS_INCLUDE_PATH
                         Specifies  path  to  include directory for C++
                         compilations.

       DEPENDENCIES_OUTPUT
                         Specifies how to output dependencies for  make
                         based on the non-system header files processed
                         by  the  compiler.  System  header  files  are
                         ignored in the dependency output.

       GCC_EXEC_PREFIX   Specifies alternative names for the linker (.B
                         ld ) and assembler (.B as ).

       GOMP_CPU_AFFINITY Specifies a list of OS processor IDs.

        DDeeffaauulltt:: Affinity is disabled

       GOMP_STACKSIZE    This environment variable is a  GNU  extension
                         recognized  by the Intel(R) OpenMP compatibil-
                         ity library.

       OMP_STACKSIZE overrides
                         GOMP_STACKSIZE.     KMP_STACKSIZE    overrides
                         OMP_STACKSIZE and GOMP_STACKSIZE.

       LIBRARY_PATH      Specifies  a  colon-separated list of directo-
                         ries, much like PATH.

       SUNPRO_DEPENDENCIES
                         This variable is the same as DEPENDENCIES_OUT-
                         PUT,  except  that system header files are not
                         ignored.

        PPGGOO EEnnvviirroonnmmeenntt VVaarriiaabblleess


       INTEL_PROF_DUMP_CUMULATIVE
                         When using interval profile dumping (initiated
                         by  INTEL_PROF_DUMP_INTERVAL  or  the function
                         _PGOPTI_Set_Interval_Prof_Dump)   during   the
                         execution of an instrumented user application,
                         allows creation of a single

       INTEL_PROF_DUMP_INTERVAL
                         Initiates  interval  profile  dumping  in   an
                         instrumented  user  application. This environ-
                         ment variable may be used to initiate Interval
                         Profile  Dumping  in  an instrumented applica-
                         tion.

       See Interval Profile Dumping for more information.

       INTEL_PROF_DYN_PREFIX
                         Specifies the prefix to be used for the  files
                         dumped   by  other  PGO  runs.  Executing  the
                         instrumented  application  generates  a   .dyn
                         filename    as    follows:    <prefix>_<times-
                         tamp>_<pid>.dyn, where <prefix> is the identi-
                         fier that you have specified.

       NNOOTTEE::  The value specified in this environment variable must not
       contain < > : " /  | ? * characters. The default  naming  scheme
       is used if an invalid prefix is specified.

       PROF_DIR          Specifies   the  directory  in  which  dynamic
                         information files are created.  This  variable
                         applies  to  all three phases of the profiling
                         process.

       PROF_DUMP_INTERVAL
                         Deprecated;    use    INTEL_PROF_DUMP_INTERVAL
                         instead.

       PROF_NO_CLOBBER   Alters    the   feedback   compilation   phase
                         slightly. By default, during the feedback com-
                         pilation  phase, the compiler merges data from
                         all dynamic information files  and  creates  a
                         new pgopti.dpi file if the pgopti.dpi file.

       When  this  variable  is set the compiler does not overwrite the
       existing
                         pgopti.dpi  file. Instead, the compiler issues
                         a warning. You must remove the pgopti.dpi file
                         if you want to use additional dynamic informa-
                         tion files.

TTEECCHHNNIICCAALL SSUUPPPPOORRTT
       The Intel(R) Compiler product web site offers timely and compre-
       hensive  product  information, including product features, white
       papers, and technical articles.

       For the  latest  information,  visit  http://www.intel.com/soft-
       ware/products/.

       For support information, see the Release Notes. For general sup-
       port  information,   visit   http://www.intel.com/software/prod-
       ucts/support/.

       For licensing and registration information, visit https://regis-
       trationcenter.intel.com/.

SSEEEE AALLSSOO
       icc(1), ld(1)

       The Intel(R) C++ Compiler Documentation has additional reference
       material on features of the Intel(R) C++ Compiler.

LLEEGGAALL IINNFFOORRMMAATTIIOONN
       By  using  this document, in addition to any agreements you have
       with Intel, you accept the terms set forth below.

       You may not use or facilitate the use of this document  in  con-
       nection with any infringement or other legal analysis concerning
       Intel products described herein. You  agree  to  grant  Intel  a
       non-exclusive,  royalty-free  license to any patent claim there-
       after drafted which includes subject matter disclosed herein.

       INFORMATION IN THIS DOCUMENT  IS  PROVIDED  IN  CONNECTION  WITH
       INTEL(R)  PRODUCTS.  NO LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL
       OR OTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS IS GRANTED  BY
       THIS  DOCUMENT.  EXCEPT  AS PROVIDED IN INTEL'S TERMS AND CONDI-
       TIONS OF SALE FOR SUCH  PRODUCTS,  INTEL  ASSUMES  NO  LIABILITY
       WHATSOEVER, AND INTEL DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY,
       RELATING TO SALE AND/OR USE OF INTEL PRODUCTS INCLUDING  LIABIL-
       ITY  OR WARRANTIES RELATING TO FITNESS FOR A PARTICULAR PURPOSE,
       MERCHANTABILITY, OR INFRINGEMENT OF  ANY  PATENT,  COPYRIGHT  OR
       OTHER INTELLECTUAL PROPERTY RIGHT.

       A  "Mission  Critical  Application"  is any application in which
       failure of the Intel(R) Product could result, directly or  indi-
       rectly,  in personal injury or death. SHOULD YOU PURCHASE OR USE
       INTEL'S PRODUCTS FOR ANY SUCH MISSION CRITICAL APPLICATION,  YOU
       SHALL INDEMNIFY AND HOLD INTEL AND ITS SUBSIDIARIES, SUBCONTRAC-
       TORS AND AFFILIATES, AND THE DIRECTORS, OFFICERS, AND  EMPLOYEES
       OF  EACH,  HARMLESS  AGAINST  ALL  CLAIMS  COSTS,  DAMAGES,  AND
       EXPENSES AND REASONABLE ATTORNEYS' FEES ARISING OUT OF, DIRECTLY
       OR  INDIRECTLY, ANY CLAIM OF PRODUCT LIABILITY, PERSONAL INJURY,
       OR DEATH ARISING IN ANY WAY OUT OF SUCH MISSION CRITICAL  APPLI-
       CATION,  WHETHER OR NOT INTEL OR ITS SUBCONTRACTOR WAS NEGLIGENT
       IN THE DESIGN, MANUFACTURE, OR WARNING OF THE INTEL  PRODUCT  OR
       ANY OF ITS PARTS.

       Intel  may  make  changes to specifications and product descrip-
       tions at any time, without notice. Designers must  not  rely  on
       the  absence  or characteristics of any features or instructions
       marked "reserved"  or  "undefined."  Intel  reserves  these  for
       future  definition  and  shall have no responsibility whatsoever
       for conflicts or incompatibilities arising from  future  changes
       to  them.  The  information  here  is  subject to change without
       notice. Do not finalize a design with this information.

       The products described  in  this  document  may  contain  design
       defects or errors known as errata which may cause the product to
       deviate from  published  specifications.  Current  characterized
       errata are available on request.

       Contact  your  local  Intel  sales office or your distributor to
       obtain the latest specifications and before placing your product
       order.

       Copies  of  documents  which have an order number and are refer-
       enced in this  document,  or  other  Intel  literature,  may  be
       obtained     by    calling    1-800-548-4725,    or    go    to:
       http://www.intel.com/design/literature.htm

       Intel processor numbers are not a measure of  performance.  Pro-
       cessor numbers differentiate features within each processor fam-
       ily, not across different processor families. Go to: Learn About
       Intel(R)  Processor  Numbers (http://www.intel.com/products/pro-
       cessor_number).

       Intel's compilers may or may not optimize to the same degree for
       non-Intel  microprocessors for optimizations that are not unique
       to Intel  microprocessors.  These  optimizations  include  SSE2,
       SSE3,  and  SSE3 instruction sets and other optimizations. Intel
       does not guarantee the availability,  functionality,  or  effec-
       tiveness of any optimization on microprocessors not manufactured
       by Intel. Microprocessor-dependent optimizations in this product
       are  intended  for use with Intel microprocessors. Certain opti-
       mizations not specific to Intel microarchitecture  are  reserved
       for  Intel microprocessors. Please refer to the applicable prod-
       uct User and Reference Guides for more information regarding the
       specific  instruction  sets covered by this notice. Notice revi-
       sion #20110804

       Intel, Intel Atom, Intel Core, Intel Cilk, Intel  VTune  ,  Ita-
       nium,  MMX,  Pentium, Xeon, and Intel Xeon Phi are trademarks of
       Intel Corporation in the U.S. and/or other countries.

       * Other names and brands may be claimed as the property of  oth-
       ers.

       Copyright (C) 1996-2014, Intel Corporation. All rights reserved.

       Portions Copyright (C) 2001,  Hewlett-Packard  Development  Com-
       pany, L.P.



Copyright(C) 1996 - 2014       Intel Corporation                        ICC(1)
